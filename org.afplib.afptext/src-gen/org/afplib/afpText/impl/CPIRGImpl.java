/**
 * generated by Xtext 2.18.0.M3
 */
package org.afplib.afpText.impl;

import org.afplib.afpText.AfpTextPackage;
import org.afplib.afpText.CPIRG;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>CPIRG</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.afplib.afpText.impl.CPIRGImpl#getGCGID <em>GCGID</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.CPIRGImpl#getPrtFlags <em>Prt Flags</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.CPIRGImpl#getCodePoint <em>Code Point</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.CPIRGImpl#getCount <em>Count</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CPIRGImpl extends MinimalEObjectImpl.Container implements CPIRG
{
  /**
   * The default value of the '{@link #getGCGID() <em>GCGID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGCGID()
   * @generated
   * @ordered
   */
  protected static final String GCGID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getGCGID() <em>GCGID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGCGID()
   * @generated
   * @ordered
   */
  protected String gcgid = GCGID_EDEFAULT;

  /**
   * The default value of the '{@link #getPrtFlags() <em>Prt Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrtFlags()
   * @generated
   * @ordered
   */
  protected static final int PRT_FLAGS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPrtFlags() <em>Prt Flags</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrtFlags()
   * @generated
   * @ordered
   */
  protected int prtFlags = PRT_FLAGS_EDEFAULT;

  /**
   * The default value of the '{@link #getCodePoint() <em>Code Point</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCodePoint()
   * @generated
   * @ordered
   */
  protected static final int CODE_POINT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getCodePoint() <em>Code Point</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCodePoint()
   * @generated
   * @ordered
   */
  protected int codePoint = CODE_POINT_EDEFAULT;

  /**
   * The default value of the '{@link #getCount() <em>Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCount()
   * @generated
   * @ordered
   */
  protected static final int COUNT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getCount() <em>Count</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCount()
   * @generated
   * @ordered
   */
  protected int count = COUNT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CPIRGImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AfpTextPackage.eINSTANCE.getCPIRG();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getGCGID()
  {
    return gcgid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGCGID(String newGCGID)
  {
    String oldGCGID = gcgid;
    gcgid = newGCGID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.CPIRG__GCGID, oldGCGID, gcgid));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getPrtFlags()
  {
    return prtFlags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPrtFlags(int newPrtFlags)
  {
    int oldPrtFlags = prtFlags;
    prtFlags = newPrtFlags;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.CPIRG__PRT_FLAGS, oldPrtFlags, prtFlags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getCodePoint()
  {
    return codePoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCodePoint(int newCodePoint)
  {
    int oldCodePoint = codePoint;
    codePoint = newCodePoint;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.CPIRG__CODE_POINT, oldCodePoint, codePoint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getCount()
  {
    return count;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCount(int newCount)
  {
    int oldCount = count;
    count = newCount;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.CPIRG__COUNT, oldCount, count));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AfpTextPackage.CPIRG__GCGID:
        return getGCGID();
      case AfpTextPackage.CPIRG__PRT_FLAGS:
        return getPrtFlags();
      case AfpTextPackage.CPIRG__CODE_POINT:
        return getCodePoint();
      case AfpTextPackage.CPIRG__COUNT:
        return getCount();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AfpTextPackage.CPIRG__GCGID:
        setGCGID((String)newValue);
        return;
      case AfpTextPackage.CPIRG__PRT_FLAGS:
        setPrtFlags((Integer)newValue);
        return;
      case AfpTextPackage.CPIRG__CODE_POINT:
        setCodePoint((Integer)newValue);
        return;
      case AfpTextPackage.CPIRG__COUNT:
        setCount((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AfpTextPackage.CPIRG__GCGID:
        setGCGID(GCGID_EDEFAULT);
        return;
      case AfpTextPackage.CPIRG__PRT_FLAGS:
        setPrtFlags(PRT_FLAGS_EDEFAULT);
        return;
      case AfpTextPackage.CPIRG__CODE_POINT:
        setCodePoint(CODE_POINT_EDEFAULT);
        return;
      case AfpTextPackage.CPIRG__COUNT:
        setCount(COUNT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AfpTextPackage.CPIRG__GCGID:
        return GCGID_EDEFAULT == null ? gcgid != null : !GCGID_EDEFAULT.equals(gcgid);
      case AfpTextPackage.CPIRG__PRT_FLAGS:
        return prtFlags != PRT_FLAGS_EDEFAULT;
      case AfpTextPackage.CPIRG__CODE_POINT:
        return codePoint != CODE_POINT_EDEFAULT;
      case AfpTextPackage.CPIRG__COUNT:
        return count != COUNT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (GCGID: ");
    result.append(gcgid);
    result.append(", PrtFlags: ");
    result.append(prtFlags);
    result.append(", CodePoint: ");
    result.append(codePoint);
    result.append(", Count: ");
    result.append(count);
    result.append(')');
    return result.toString();
  }

} //CPIRGImpl
