/**
 * generated by Xtext 2.18.0.M3
 */
package org.afplib.afpText.impl;

import org.afplib.afpText.AfpTextPackage;
import org.afplib.afpText.STC;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>STC</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.afplib.afpText.impl.STCImpl#getFRGCOLOR <em>FRGCOLOR</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.STCImpl#getPRECSION <em>PRECSION</em>}</li>
 * </ul>
 *
 * @generated
 */
public class STCImpl extends tripletImpl implements STC
{
  /**
   * The default value of the '{@link #getFRGCOLOR() <em>FRGCOLOR</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFRGCOLOR()
   * @generated
   * @ordered
   */
  protected static final int FRGCOLOR_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getFRGCOLOR() <em>FRGCOLOR</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFRGCOLOR()
   * @generated
   * @ordered
   */
  protected int frgcolor = FRGCOLOR_EDEFAULT;

  /**
   * The default value of the '{@link #getPRECSION() <em>PRECSION</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPRECSION()
   * @generated
   * @ordered
   */
  protected static final int PRECSION_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getPRECSION() <em>PRECSION</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPRECSION()
   * @generated
   * @ordered
   */
  protected int precsion = PRECSION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected STCImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AfpTextPackage.eINSTANCE.getSTC();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getFRGCOLOR()
  {
    return frgcolor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFRGCOLOR(int newFRGCOLOR)
  {
    int oldFRGCOLOR = frgcolor;
    frgcolor = newFRGCOLOR;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.STC__FRGCOLOR, oldFRGCOLOR, frgcolor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getPRECSION()
  {
    return precsion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPRECSION(int newPRECSION)
  {
    int oldPRECSION = precsion;
    precsion = newPRECSION;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.STC__PRECSION, oldPRECSION, precsion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AfpTextPackage.STC__FRGCOLOR:
        return getFRGCOLOR();
      case AfpTextPackage.STC__PRECSION:
        return getPRECSION();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AfpTextPackage.STC__FRGCOLOR:
        setFRGCOLOR((Integer)newValue);
        return;
      case AfpTextPackage.STC__PRECSION:
        setPRECSION((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AfpTextPackage.STC__FRGCOLOR:
        setFRGCOLOR(FRGCOLOR_EDEFAULT);
        return;
      case AfpTextPackage.STC__PRECSION:
        setPRECSION(PRECSION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AfpTextPackage.STC__FRGCOLOR:
        return frgcolor != FRGCOLOR_EDEFAULT;
      case AfpTextPackage.STC__PRECSION:
        return precsion != PRECSION_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (FRGCOLOR: ");
    result.append(frgcolor);
    result.append(", PRECSION: ");
    result.append(precsion);
    result.append(')');
    return result.toString();
  }

} //STCImpl
