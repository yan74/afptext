/**
 * generated by Xtext 2.18.0.M3
 */
package org.afplib.afpText.impl;

import org.afplib.afpText.AfpTextPackage;
import org.afplib.afpText.WindowSpecification;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Window Specification</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.afplib.afpText.impl.WindowSpecificationImpl#getFLAGS <em>FLAGS</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.WindowSpecificationImpl#getRES3 <em>RES3</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.WindowSpecificationImpl#getCFORMAT <em>CFORMAT</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.WindowSpecificationImpl#getUBASE <em>UBASE</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.WindowSpecificationImpl#getXRESOL <em>XRESOL</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.WindowSpecificationImpl#getYRESOL <em>YRESOL</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.WindowSpecificationImpl#getIMGXYRES <em>IMGXYRES</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.WindowSpecificationImpl#getXLWIND <em>XLWIND</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.WindowSpecificationImpl#getXRWIND <em>XRWIND</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.WindowSpecificationImpl#getYBWIND <em>YBWIND</em>}</li>
 *   <li>{@link org.afplib.afpText.impl.WindowSpecificationImpl#getYTWIND <em>YTWIND</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WindowSpecificationImpl extends tripletImpl implements WindowSpecification
{
  /**
   * The default value of the '{@link #getFLAGS() <em>FLAGS</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFLAGS()
   * @generated
   * @ordered
   */
  protected static final int FLAGS_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getFLAGS() <em>FLAGS</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFLAGS()
   * @generated
   * @ordered
   */
  protected int flags = FLAGS_EDEFAULT;

  /**
   * The default value of the '{@link #getRES3() <em>RES3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRES3()
   * @generated
   * @ordered
   */
  protected static final int RES3_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getRES3() <em>RES3</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRES3()
   * @generated
   * @ordered
   */
  protected int res3 = RES3_EDEFAULT;

  /**
   * The default value of the '{@link #getCFORMAT() <em>CFORMAT</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCFORMAT()
   * @generated
   * @ordered
   */
  protected static final int CFORMAT_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getCFORMAT() <em>CFORMAT</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCFORMAT()
   * @generated
   * @ordered
   */
  protected int cformat = CFORMAT_EDEFAULT;

  /**
   * The default value of the '{@link #getUBASE() <em>UBASE</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUBASE()
   * @generated
   * @ordered
   */
  protected static final int UBASE_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getUBASE() <em>UBASE</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUBASE()
   * @generated
   * @ordered
   */
  protected int ubase = UBASE_EDEFAULT;

  /**
   * The default value of the '{@link #getXRESOL() <em>XRESOL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXRESOL()
   * @generated
   * @ordered
   */
  protected static final int XRESOL_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getXRESOL() <em>XRESOL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXRESOL()
   * @generated
   * @ordered
   */
  protected int xresol = XRESOL_EDEFAULT;

  /**
   * The default value of the '{@link #getYRESOL() <em>YRESOL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getYRESOL()
   * @generated
   * @ordered
   */
  protected static final int YRESOL_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getYRESOL() <em>YRESOL</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getYRESOL()
   * @generated
   * @ordered
   */
  protected int yresol = YRESOL_EDEFAULT;

  /**
   * The default value of the '{@link #getIMGXYRES() <em>IMGXYRES</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIMGXYRES()
   * @generated
   * @ordered
   */
  protected static final int IMGXYRES_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getIMGXYRES() <em>IMGXYRES</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIMGXYRES()
   * @generated
   * @ordered
   */
  protected int imgxyres = IMGXYRES_EDEFAULT;

  /**
   * The default value of the '{@link #getXLWIND() <em>XLWIND</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXLWIND()
   * @generated
   * @ordered
   */
  protected static final int XLWIND_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getXLWIND() <em>XLWIND</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXLWIND()
   * @generated
   * @ordered
   */
  protected int xlwind = XLWIND_EDEFAULT;

  /**
   * The default value of the '{@link #getXRWIND() <em>XRWIND</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXRWIND()
   * @generated
   * @ordered
   */
  protected static final int XRWIND_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getXRWIND() <em>XRWIND</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXRWIND()
   * @generated
   * @ordered
   */
  protected int xrwind = XRWIND_EDEFAULT;

  /**
   * The default value of the '{@link #getYBWIND() <em>YBWIND</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getYBWIND()
   * @generated
   * @ordered
   */
  protected static final int YBWIND_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getYBWIND() <em>YBWIND</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getYBWIND()
   * @generated
   * @ordered
   */
  protected int ybwind = YBWIND_EDEFAULT;

  /**
   * The default value of the '{@link #getYTWIND() <em>YTWIND</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getYTWIND()
   * @generated
   * @ordered
   */
  protected static final int YTWIND_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getYTWIND() <em>YTWIND</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getYTWIND()
   * @generated
   * @ordered
   */
  protected int ytwind = YTWIND_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WindowSpecificationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AfpTextPackage.eINSTANCE.getWindowSpecification();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getFLAGS()
  {
    return flags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFLAGS(int newFLAGS)
  {
    int oldFLAGS = flags;
    flags = newFLAGS;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.WINDOW_SPECIFICATION__FLAGS, oldFLAGS, flags));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getRES3()
  {
    return res3;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRES3(int newRES3)
  {
    int oldRES3 = res3;
    res3 = newRES3;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.WINDOW_SPECIFICATION__RES3, oldRES3, res3));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getCFORMAT()
  {
    return cformat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCFORMAT(int newCFORMAT)
  {
    int oldCFORMAT = cformat;
    cformat = newCFORMAT;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.WINDOW_SPECIFICATION__CFORMAT, oldCFORMAT, cformat));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getUBASE()
  {
    return ubase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUBASE(int newUBASE)
  {
    int oldUBASE = ubase;
    ubase = newUBASE;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.WINDOW_SPECIFICATION__UBASE, oldUBASE, ubase));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getXRESOL()
  {
    return xresol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setXRESOL(int newXRESOL)
  {
    int oldXRESOL = xresol;
    xresol = newXRESOL;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.WINDOW_SPECIFICATION__XRESOL, oldXRESOL, xresol));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getYRESOL()
  {
    return yresol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setYRESOL(int newYRESOL)
  {
    int oldYRESOL = yresol;
    yresol = newYRESOL;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.WINDOW_SPECIFICATION__YRESOL, oldYRESOL, yresol));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getIMGXYRES()
  {
    return imgxyres;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIMGXYRES(int newIMGXYRES)
  {
    int oldIMGXYRES = imgxyres;
    imgxyres = newIMGXYRES;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.WINDOW_SPECIFICATION__IMGXYRES, oldIMGXYRES, imgxyres));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getXLWIND()
  {
    return xlwind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setXLWIND(int newXLWIND)
  {
    int oldXLWIND = xlwind;
    xlwind = newXLWIND;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.WINDOW_SPECIFICATION__XLWIND, oldXLWIND, xlwind));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getXRWIND()
  {
    return xrwind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setXRWIND(int newXRWIND)
  {
    int oldXRWIND = xrwind;
    xrwind = newXRWIND;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.WINDOW_SPECIFICATION__XRWIND, oldXRWIND, xrwind));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getYBWIND()
  {
    return ybwind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setYBWIND(int newYBWIND)
  {
    int oldYBWIND = ybwind;
    ybwind = newYBWIND;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.WINDOW_SPECIFICATION__YBWIND, oldYBWIND, ybwind));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getYTWIND()
  {
    return ytwind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setYTWIND(int newYTWIND)
  {
    int oldYTWIND = ytwind;
    ytwind = newYTWIND;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AfpTextPackage.WINDOW_SPECIFICATION__YTWIND, oldYTWIND, ytwind));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AfpTextPackage.WINDOW_SPECIFICATION__FLAGS:
        return getFLAGS();
      case AfpTextPackage.WINDOW_SPECIFICATION__RES3:
        return getRES3();
      case AfpTextPackage.WINDOW_SPECIFICATION__CFORMAT:
        return getCFORMAT();
      case AfpTextPackage.WINDOW_SPECIFICATION__UBASE:
        return getUBASE();
      case AfpTextPackage.WINDOW_SPECIFICATION__XRESOL:
        return getXRESOL();
      case AfpTextPackage.WINDOW_SPECIFICATION__YRESOL:
        return getYRESOL();
      case AfpTextPackage.WINDOW_SPECIFICATION__IMGXYRES:
        return getIMGXYRES();
      case AfpTextPackage.WINDOW_SPECIFICATION__XLWIND:
        return getXLWIND();
      case AfpTextPackage.WINDOW_SPECIFICATION__XRWIND:
        return getXRWIND();
      case AfpTextPackage.WINDOW_SPECIFICATION__YBWIND:
        return getYBWIND();
      case AfpTextPackage.WINDOW_SPECIFICATION__YTWIND:
        return getYTWIND();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AfpTextPackage.WINDOW_SPECIFICATION__FLAGS:
        setFLAGS((Integer)newValue);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__RES3:
        setRES3((Integer)newValue);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__CFORMAT:
        setCFORMAT((Integer)newValue);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__UBASE:
        setUBASE((Integer)newValue);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__XRESOL:
        setXRESOL((Integer)newValue);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__YRESOL:
        setYRESOL((Integer)newValue);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__IMGXYRES:
        setIMGXYRES((Integer)newValue);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__XLWIND:
        setXLWIND((Integer)newValue);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__XRWIND:
        setXRWIND((Integer)newValue);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__YBWIND:
        setYBWIND((Integer)newValue);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__YTWIND:
        setYTWIND((Integer)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AfpTextPackage.WINDOW_SPECIFICATION__FLAGS:
        setFLAGS(FLAGS_EDEFAULT);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__RES3:
        setRES3(RES3_EDEFAULT);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__CFORMAT:
        setCFORMAT(CFORMAT_EDEFAULT);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__UBASE:
        setUBASE(UBASE_EDEFAULT);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__XRESOL:
        setXRESOL(XRESOL_EDEFAULT);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__YRESOL:
        setYRESOL(YRESOL_EDEFAULT);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__IMGXYRES:
        setIMGXYRES(IMGXYRES_EDEFAULT);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__XLWIND:
        setXLWIND(XLWIND_EDEFAULT);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__XRWIND:
        setXRWIND(XRWIND_EDEFAULT);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__YBWIND:
        setYBWIND(YBWIND_EDEFAULT);
        return;
      case AfpTextPackage.WINDOW_SPECIFICATION__YTWIND:
        setYTWIND(YTWIND_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AfpTextPackage.WINDOW_SPECIFICATION__FLAGS:
        return flags != FLAGS_EDEFAULT;
      case AfpTextPackage.WINDOW_SPECIFICATION__RES3:
        return res3 != RES3_EDEFAULT;
      case AfpTextPackage.WINDOW_SPECIFICATION__CFORMAT:
        return cformat != CFORMAT_EDEFAULT;
      case AfpTextPackage.WINDOW_SPECIFICATION__UBASE:
        return ubase != UBASE_EDEFAULT;
      case AfpTextPackage.WINDOW_SPECIFICATION__XRESOL:
        return xresol != XRESOL_EDEFAULT;
      case AfpTextPackage.WINDOW_SPECIFICATION__YRESOL:
        return yresol != YRESOL_EDEFAULT;
      case AfpTextPackage.WINDOW_SPECIFICATION__IMGXYRES:
        return imgxyres != IMGXYRES_EDEFAULT;
      case AfpTextPackage.WINDOW_SPECIFICATION__XLWIND:
        return xlwind != XLWIND_EDEFAULT;
      case AfpTextPackage.WINDOW_SPECIFICATION__XRWIND:
        return xrwind != XRWIND_EDEFAULT;
      case AfpTextPackage.WINDOW_SPECIFICATION__YBWIND:
        return ybwind != YBWIND_EDEFAULT;
      case AfpTextPackage.WINDOW_SPECIFICATION__YTWIND:
        return ytwind != YTWIND_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (FLAGS: ");
    result.append(flags);
    result.append(", RES3: ");
    result.append(res3);
    result.append(", CFORMAT: ");
    result.append(cformat);
    result.append(", UBASE: ");
    result.append(ubase);
    result.append(", XRESOL: ");
    result.append(xresol);
    result.append(", YRESOL: ");
    result.append(yresol);
    result.append(", IMGXYRES: ");
    result.append(imgxyres);
    result.append(", XLWIND: ");
    result.append(xlwind);
    result.append(", XRWIND: ");
    result.append(xrwind);
    result.append(", YBWIND: ");
    result.append(ybwind);
    result.append(", YTWIND: ");
    result.append(ytwind);
    result.append(')');
    return result.toString();
  }

} //WindowSpecificationImpl
