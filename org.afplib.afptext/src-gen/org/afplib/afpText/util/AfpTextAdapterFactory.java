/**
 * generated by Xtext 2.18.0.M3
 */
package org.afplib.afpText.util;

import org.afplib.afpText.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.afplib.afpText.AfpTextPackage
 * @generated
 */
public class AfpTextAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static AfpTextPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AfpTextAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = AfpTextPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AfpTextSwitch<Adapter> modelSwitch =
    new AfpTextSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter casestructuredField(structuredField object)
      {
        return createstructuredFieldAdapter();
      }
      @Override
      public Adapter caseLineData(LineData object)
      {
        return createLineDataAdapter();
      }
      @Override
      public Adapter caseBAG(BAG object)
      {
        return createBAGAdapter();
      }
      @Override
      public Adapter caseBBC(BBC object)
      {
        return createBBCAdapter();
      }
      @Override
      public Adapter caseBCA(BCA object)
      {
        return createBCAAdapter();
      }
      @Override
      public Adapter caseBCF(BCF object)
      {
        return createBCFAdapter();
      }
      @Override
      public Adapter caseBCP(BCP object)
      {
        return createBCPAdapter();
      }
      @Override
      public Adapter caseBDA(BDA object)
      {
        return createBDAAdapter();
      }
      @Override
      public Adapter caseBDD(BDD object)
      {
        return createBDDAdapter();
      }
      @Override
      public Adapter caseBDG(BDG object)
      {
        return createBDGAdapter();
      }
      @Override
      public Adapter caseBDI(BDI object)
      {
        return createBDIAdapter();
      }
      @Override
      public Adapter caseBDM(BDM object)
      {
        return createBDMAdapter();
      }
      @Override
      public Adapter caseBDT(BDT object)
      {
        return createBDTAdapter();
      }
      @Override
      public Adapter caseBDX(BDX object)
      {
        return createBDXAdapter();
      }
      @Override
      public Adapter caseBFG(BFG object)
      {
        return createBFGAdapter();
      }
      @Override
      public Adapter caseBFM(BFM object)
      {
        return createBFMAdapter();
      }
      @Override
      public Adapter caseBFN(BFN object)
      {
        return createBFNAdapter();
      }
      @Override
      public Adapter caseBGR(BGR object)
      {
        return createBGRAdapter();
      }
      @Override
      public Adapter caseBII(BII object)
      {
        return createBIIAdapter();
      }
      @Override
      public Adapter caseBIM(BIM object)
      {
        return createBIMAdapter();
      }
      @Override
      public Adapter caseBMM(BMM object)
      {
        return createBMMAdapter();
      }
      @Override
      public Adapter caseBMO(BMO object)
      {
        return createBMOAdapter();
      }
      @Override
      public Adapter caseBNG(BNG object)
      {
        return createBNGAdapter();
      }
      @Override
      public Adapter caseBOC(BOC object)
      {
        return createBOCAdapter();
      }
      @Override
      public Adapter caseBOG(BOG object)
      {
        return createBOGAdapter();
      }
      @Override
      public Adapter caseBPF(BPF object)
      {
        return createBPFAdapter();
      }
      @Override
      public Adapter caseBPG(BPG object)
      {
        return createBPGAdapter();
      }
      @Override
      public Adapter caseBPM(BPM object)
      {
        return createBPMAdapter();
      }
      @Override
      public Adapter caseBPS(BPS object)
      {
        return createBPSAdapter();
      }
      @Override
      public Adapter caseBPT(BPT object)
      {
        return createBPTAdapter();
      }
      @Override
      public Adapter caseBRG(BRG object)
      {
        return createBRGAdapter();
      }
      @Override
      public Adapter caseBRS(BRS object)
      {
        return createBRSAdapter();
      }
      @Override
      public Adapter caseBSG(BSG object)
      {
        return createBSGAdapter();
      }
      @Override
      public Adapter caseCAT(CAT object)
      {
        return createCATAdapter();
      }
      @Override
      public Adapter caseCDD(CDD object)
      {
        return createCDDAdapter();
      }
      @Override
      public Adapter caseCFC(CFC object)
      {
        return createCFCAdapter();
      }
      @Override
      public Adapter caseCFI(CFI object)
      {
        return createCFIAdapter();
      }
      @Override
      public Adapter caseCPC(CPC object)
      {
        return createCPCAdapter();
      }
      @Override
      public Adapter caseCPD(CPD object)
      {
        return createCPDAdapter();
      }
      @Override
      public Adapter caseCPI(CPI object)
      {
        return createCPIAdapter();
      }
      @Override
      public Adapter caseCTC(CTC object)
      {
        return createCTCAdapter();
      }
      @Override
      public Adapter caseDXD(DXD object)
      {
        return createDXDAdapter();
      }
      @Override
      public Adapter caseEAG(EAG object)
      {
        return createEAGAdapter();
      }
      @Override
      public Adapter caseEBC(EBC object)
      {
        return createEBCAdapter();
      }
      @Override
      public Adapter caseECA(ECA object)
      {
        return createECAAdapter();
      }
      @Override
      public Adapter caseECF(ECF object)
      {
        return createECFAdapter();
      }
      @Override
      public Adapter caseECP(ECP object)
      {
        return createECPAdapter();
      }
      @Override
      public Adapter caseEDG(EDG object)
      {
        return createEDGAdapter();
      }
      @Override
      public Adapter caseEDI(EDI object)
      {
        return createEDIAdapter();
      }
      @Override
      public Adapter caseEDM(EDM object)
      {
        return createEDMAdapter();
      }
      @Override
      public Adapter caseEDT(EDT object)
      {
        return createEDTAdapter();
      }
      @Override
      public Adapter caseEDX(EDX object)
      {
        return createEDXAdapter();
      }
      @Override
      public Adapter caseEFG(EFG object)
      {
        return createEFGAdapter();
      }
      @Override
      public Adapter caseEFM(EFM object)
      {
        return createEFMAdapter();
      }
      @Override
      public Adapter caseEFN(EFN object)
      {
        return createEFNAdapter();
      }
      @Override
      public Adapter caseEGR(EGR object)
      {
        return createEGRAdapter();
      }
      @Override
      public Adapter caseEII(EII object)
      {
        return createEIIAdapter();
      }
      @Override
      public Adapter caseEIM(EIM object)
      {
        return createEIMAdapter();
      }
      @Override
      public Adapter caseEMM(EMM object)
      {
        return createEMMAdapter();
      }
      @Override
      public Adapter caseEMO(EMO object)
      {
        return createEMOAdapter();
      }
      @Override
      public Adapter caseENG(ENG object)
      {
        return createENGAdapter();
      }
      @Override
      public Adapter caseEOC(EOC object)
      {
        return createEOCAdapter();
      }
      @Override
      public Adapter caseEOG(EOG object)
      {
        return createEOGAdapter();
      }
      @Override
      public Adapter caseEPF(EPF object)
      {
        return createEPFAdapter();
      }
      @Override
      public Adapter caseEPG(EPG object)
      {
        return createEPGAdapter();
      }
      @Override
      public Adapter caseEPM(EPM object)
      {
        return createEPMAdapter();
      }
      @Override
      public Adapter caseEPS(EPS object)
      {
        return createEPSAdapter();
      }
      @Override
      public Adapter caseEPT(EPT object)
      {
        return createEPTAdapter();
      }
      @Override
      public Adapter caseERG(ERG object)
      {
        return createERGAdapter();
      }
      @Override
      public Adapter caseERS(ERS object)
      {
        return createERSAdapter();
      }
      @Override
      public Adapter caseESG(ESG object)
      {
        return createESGAdapter();
      }
      @Override
      public Adapter caseFNC(FNC object)
      {
        return createFNCAdapter();
      }
      @Override
      public Adapter caseFND(FND object)
      {
        return createFNDAdapter();
      }
      @Override
      public Adapter caseFNG(FNG object)
      {
        return createFNGAdapter();
      }
      @Override
      public Adapter caseFNI(FNI object)
      {
        return createFNIAdapter();
      }
      @Override
      public Adapter caseFNN(FNN object)
      {
        return createFNNAdapter();
      }
      @Override
      public Adapter caseFNM(FNM object)
      {
        return createFNMAdapter();
      }
      @Override
      public Adapter caseFNO(FNO object)
      {
        return createFNOAdapter();
      }
      @Override
      public Adapter caseFNP(FNP object)
      {
        return createFNPAdapter();
      }
      @Override
      public Adapter caseGAD(GAD object)
      {
        return createGADAdapter();
      }
      @Override
      public Adapter caseGDD(GDD object)
      {
        return createGDDAdapter();
      }
      @Override
      public Adapter caseICP(ICP object)
      {
        return createICPAdapter();
      }
      @Override
      public Adapter caseIDD(IDD object)
      {
        return createIDDAdapter();
      }
      @Override
      public Adapter caseIEL(IEL object)
      {
        return createIELAdapter();
      }
      @Override
      public Adapter caseIID(IID object)
      {
        return createIIDAdapter();
      }
      @Override
      public Adapter caseIMM(IMM object)
      {
        return createIMMAdapter();
      }
      @Override
      public Adapter caseIOB(IOB object)
      {
        return createIOBAdapter();
      }
      @Override
      public Adapter caseIOC(IOC object)
      {
        return createIOCAdapter();
      }
      @Override
      public Adapter caseIPD(IPD object)
      {
        return createIPDAdapter();
      }
      @Override
      public Adapter caseIPG(IPG object)
      {
        return createIPGAdapter();
      }
      @Override
      public Adapter caseIPO(IPO object)
      {
        return createIPOAdapter();
      }
      @Override
      public Adapter caseIPS(IPS object)
      {
        return createIPSAdapter();
      }
      @Override
      public Adapter caseIRD(IRD object)
      {
        return createIRDAdapter();
      }
      @Override
      public Adapter caseLLE(LLE object)
      {
        return createLLEAdapter();
      }
      @Override
      public Adapter caseLNC(LNC object)
      {
        return createLNCAdapter();
      }
      @Override
      public Adapter caseLND(LND object)
      {
        return createLNDAdapter();
      }
      @Override
      public Adapter caseMBC(MBC object)
      {
        return createMBCAdapter();
      }
      @Override
      public Adapter caseMCA(MCA object)
      {
        return createMCAAdapter();
      }
      @Override
      public Adapter caseMCC(MCC object)
      {
        return createMCCAdapter();
      }
      @Override
      public Adapter caseMCD(MCD object)
      {
        return createMCDAdapter();
      }
      @Override
      public Adapter caseMCF(MCF object)
      {
        return createMCFAdapter();
      }
      @Override
      public Adapter caseMCF1(MCF1 object)
      {
        return createMCF1Adapter();
      }
      @Override
      public Adapter caseMDD(MDD object)
      {
        return createMDDAdapter();
      }
      @Override
      public Adapter caseMDR(MDR object)
      {
        return createMDRAdapter();
      }
      @Override
      public Adapter caseMFC(MFC object)
      {
        return createMFCAdapter();
      }
      @Override
      public Adapter caseMGO(MGO object)
      {
        return createMGOAdapter();
      }
      @Override
      public Adapter caseMIO(MIO object)
      {
        return createMIOAdapter();
      }
      @Override
      public Adapter caseMMC(MMC object)
      {
        return createMMCAdapter();
      }
      @Override
      public Adapter caseMMD(MMD object)
      {
        return createMMDAdapter();
      }
      @Override
      public Adapter caseMMO(MMO object)
      {
        return createMMOAdapter();
      }
      @Override
      public Adapter caseMMT(MMT object)
      {
        return createMMTAdapter();
      }
      @Override
      public Adapter caseMPG(MPG object)
      {
        return createMPGAdapter();
      }
      @Override
      public Adapter caseMPO(MPO object)
      {
        return createMPOAdapter();
      }
      @Override
      public Adapter caseMPS(MPS object)
      {
        return createMPSAdapter();
      }
      @Override
      public Adapter caseMSU(MSU object)
      {
        return createMSUAdapter();
      }
      @Override
      public Adapter caseNOP(NOP object)
      {
        return createNOPAdapter();
      }
      @Override
      public Adapter caseOBD(OBD object)
      {
        return createOBDAdapter();
      }
      @Override
      public Adapter caseOBP(OBP object)
      {
        return createOBPAdapter();
      }
      @Override
      public Adapter caseOCD(OCD object)
      {
        return createOCDAdapter();
      }
      @Override
      public Adapter casePEC(PEC object)
      {
        return createPECAdapter();
      }
      @Override
      public Adapter casePFC(PFC object)
      {
        return createPFCAdapter();
      }
      @Override
      public Adapter casePGD(PGD object)
      {
        return createPGDAdapter();
      }
      @Override
      public Adapter casePGP(PGP object)
      {
        return createPGPAdapter();
      }
      @Override
      public Adapter casePGP1(PGP1 object)
      {
        return createPGP1Adapter();
      }
      @Override
      public Adapter casePMC(PMC object)
      {
        return createPMCAdapter();
      }
      @Override
      public Adapter casePPO(PPO object)
      {
        return createPPOAdapter();
      }
      @Override
      public Adapter casePTD(PTD object)
      {
        return createPTDAdapter();
      }
      @Override
      public Adapter casePTD1(PTD1 object)
      {
        return createPTD1Adapter();
      }
      @Override
      public Adapter casePTX(PTX object)
      {
        return createPTXAdapter();
      }
      @Override
      public Adapter caseTLE(TLE object)
      {
        return createTLEAdapter();
      }
      @Override
      public Adapter caseFGD(FGD object)
      {
        return createFGDAdapter();
      }
      @Override
      public Adapter caseCPIRG(CPIRG object)
      {
        return createCPIRGAdapter();
      }
      @Override
      public Adapter caseCFIRG(CFIRG object)
      {
        return createCFIRGAdapter();
      }
      @Override
      public Adapter caseFNIRG(FNIRG object)
      {
        return createFNIRGAdapter();
      }
      @Override
      public Adapter caseFNMRG(FNMRG object)
      {
        return createFNMRGAdapter();
      }
      @Override
      public Adapter caseLLERG(LLERG object)
      {
        return createLLERGAdapter();
      }
      @Override
      public Adapter caseMPSRG(MPSRG object)
      {
        return createMPSRGAdapter();
      }
      @Override
      public Adapter caseMCFRG(MCFRG object)
      {
        return createMCFRGAdapter();
      }
      @Override
      public Adapter caseMBCRG(MBCRG object)
      {
        return createMBCRGAdapter();
      }
      @Override
      public Adapter caseMCARG(MCARG object)
      {
        return createMCARGAdapter();
      }
      @Override
      public Adapter caseMCDRG(MCDRG object)
      {
        return createMCDRGAdapter();
      }
      @Override
      public Adapter caseMDRRG(MDRRG object)
      {
        return createMDRRGAdapter();
      }
      @Override
      public Adapter caseMGORG(MGORG object)
      {
        return createMGORGAdapter();
      }
      @Override
      public Adapter caseMIORG(MIORG object)
      {
        return createMIORGAdapter();
      }
      @Override
      public Adapter caseMMDRG(MMDRG object)
      {
        return createMMDRGAdapter();
      }
      @Override
      public Adapter caseMMTRG(MMTRG object)
      {
        return createMMTRGAdapter();
      }
      @Override
      public Adapter caseMPGRG(MPGRG object)
      {
        return createMPGRGAdapter();
      }
      @Override
      public Adapter caseMPORG(MPORG object)
      {
        return createMPORGAdapter();
      }
      @Override
      public Adapter casePPORG(PPORG object)
      {
        return createPPORGAdapter();
      }
      @Override
      public Adapter casePGPRG(PGPRG object)
      {
        return createPGPRGAdapter();
      }
      @Override
      public Adapter caseMCCRG(MCCRG object)
      {
        return createMCCRGAdapter();
      }
      @Override
      public Adapter caseMMORG(MMORG object)
      {
        return createMMORGAdapter();
      }
      @Override
      public Adapter caseBandImageRG(BandImageRG object)
      {
        return createBandImageRGAdapter();
      }
      @Override
      public Adapter caseMCF1RG(MCF1RG object)
      {
        return createMCF1RGAdapter();
      }
      @Override
      public Adapter caseMMCRG(MMCRG object)
      {
        return createMMCRGAdapter();
      }
      @Override
      public Adapter caseFNORG(FNORG object)
      {
        return createFNORGAdapter();
      }
      @Override
      public Adapter caseFNPRG(FNPRG object)
      {
        return createFNPRGAdapter();
      }
      @Override
      public Adapter caseTileTOCRG(TileTOCRG object)
      {
        return createTileTOCRGAdapter();
      }
      @Override
      public Adapter caseSamplingRatiosRG(SamplingRatiosRG object)
      {
        return createSamplingRatiosRGAdapter();
      }
      @Override
      public Adapter caseExternalAlgorithmRG(ExternalAlgorithmRG object)
      {
        return createExternalAlgorithmRGAdapter();
      }
      @Override
      public Adapter caseFNNRG(FNNRG object)
      {
        return createFNNRGAdapter();
      }
      @Override
      public Adapter caseGCBEZRG(GCBEZRG object)
      {
        return createGCBEZRGAdapter();
      }
      @Override
      public Adapter caseGCCBEZRG(GCCBEZRG object)
      {
        return createGCCBEZRGAdapter();
      }
      @Override
      public Adapter caseGFLTRG(GFLTRG object)
      {
        return createGFLTRGAdapter();
      }
      @Override
      public Adapter caseGCFLTRG(GCFLTRG object)
      {
        return createGCFLTRGAdapter();
      }
      @Override
      public Adapter caseGLINERG(GLINERG object)
      {
        return createGLINERGAdapter();
      }
      @Override
      public Adapter caseGCLINERG(GCLINERG object)
      {
        return createGCLINERGAdapter();
      }
      @Override
      public Adapter caseGMRKRG(GMRKRG object)
      {
        return createGMRKRGAdapter();
      }
      @Override
      public Adapter caseGCMRKRG(GCMRKRG object)
      {
        return createGCMRKRGAdapter();
      }
      @Override
      public Adapter caseGRLINERG(GRLINERG object)
      {
        return createGRLINERGAdapter();
      }
      @Override
      public Adapter caseGCRLINERG(GCRLINERG object)
      {
        return createGCRLINERGAdapter();
      }
      @Override
      public Adapter caseMSURG(MSURG object)
      {
        return createMSURGAdapter();
      }
      @Override
      public Adapter casetriplet(triplet object)
      {
        return createtripletAdapter();
      }
      @Override
      public Adapter caseAMB(AMB object)
      {
        return createAMBAdapter();
      }
      @Override
      public Adapter caseAMI(AMI object)
      {
        return createAMIAdapter();
      }
      @Override
      public Adapter caseBLN(BLN object)
      {
        return createBLNAdapter();
      }
      @Override
      public Adapter caseBSU(BSU object)
      {
        return createBSUAdapter();
      }
      @Override
      public Adapter caseDBR(DBR object)
      {
        return createDBRAdapter();
      }
      @Override
      public Adapter caseDIR(DIR object)
      {
        return createDIRAdapter();
      }
      @Override
      public Adapter caseESU(ESU object)
      {
        return createESUAdapter();
      }
      @Override
      public Adapter caseNOPCS(NOPCS object)
      {
        return createNOPCSAdapter();
      }
      @Override
      public Adapter caseOVS(OVS object)
      {
        return createOVSAdapter();
      }
      @Override
      public Adapter caseRMB(RMB object)
      {
        return createRMBAdapter();
      }
      @Override
      public Adapter caseRMI(RMI object)
      {
        return createRMIAdapter();
      }
      @Override
      public Adapter caseRPS(RPS object)
      {
        return createRPSAdapter();
      }
      @Override
      public Adapter caseSBI(SBI object)
      {
        return createSBIAdapter();
      }
      @Override
      public Adapter caseSCFL(SCFL object)
      {
        return createSCFLAdapter();
      }
      @Override
      public Adapter caseSEC(SEC object)
      {
        return createSECAdapter();
      }
      @Override
      public Adapter caseSIA(SIA object)
      {
        return createSIAAdapter();
      }
      @Override
      public Adapter caseSIM(SIM object)
      {
        return createSIMAdapter();
      }
      @Override
      public Adapter caseSTC(STC object)
      {
        return createSTCAdapter();
      }
      @Override
      public Adapter caseSTO(STO object)
      {
        return createSTOAdapter();
      }
      @Override
      public Adapter caseSVI(SVI object)
      {
        return createSVIAdapter();
      }
      @Override
      public Adapter caseTBM(TBM object)
      {
        return createTBMAdapter();
      }
      @Override
      public Adapter caseTRN(TRN object)
      {
        return createTRNAdapter();
      }
      @Override
      public Adapter caseUSC(USC object)
      {
        return createUSCAdapter();
      }
      @Override
      public Adapter caseAttributeQualifier(AttributeQualifier object)
      {
        return createAttributeQualifierAdapter();
      }
      @Override
      public Adapter caseAttributeValue(AttributeValue object)
      {
        return createAttributeValueAdapter();
      }
      @Override
      public Adapter caseCGCSGID(CGCSGID object)
      {
        return createCGCSGIDAdapter();
      }
      @Override
      public Adapter caseCRCResourceManagement(CRCResourceManagement object)
      {
        return createCRCResourceManagementAdapter();
      }
      @Override
      public Adapter caseCharacterRotation(CharacterRotation object)
      {
        return createCharacterRotationAdapter();
      }
      @Override
      public Adapter caseColorSpecification(ColorSpecification object)
      {
        return createColorSpecificationAdapter();
      }
      @Override
      public Adapter caseComment(Comment object)
      {
        return createCommentAdapter();
      }
      @Override
      public Adapter caseDataObjectFontDescriptor(DataObjectFontDescriptor object)
      {
        return createDataObjectFontDescriptorAdapter();
      }
      @Override
      public Adapter caseDescriptorPosition(DescriptorPosition object)
      {
        return createDescriptorPositionAdapter();
      }
      @Override
      public Adapter caseEncodingSchemeID(EncodingSchemeID object)
      {
        return createEncodingSchemeIDAdapter();
      }
      @Override
      public Adapter caseFontResolution(FontResolution object)
      {
        return createFontResolutionAdapter();
      }
      @Override
      public Adapter caseFullyQualifiedName(FullyQualifiedName object)
      {
        return createFullyQualifiedNameAdapter();
      }
      @Override
      public Adapter caseLocalDateAndTimeStamp(LocalDateAndTimeStamp object)
      {
        return createLocalDateAndTimeStampAdapter();
      }
      @Override
      public Adapter caseUniversalDateAndTimeStamp(UniversalDateAndTimeStamp object)
      {
        return createUniversalDateAndTimeStampAdapter();
      }
      @Override
      public Adapter caseMappingOption(MappingOption object)
      {
        return createMappingOptionAdapter();
      }
      @Override
      public Adapter caseMediaEjectControl(MediaEjectControl object)
      {
        return createMediaEjectControlAdapter();
      }
      @Override
      public Adapter caseMediumMapPageNumber(MediumMapPageNumber object)
      {
        return createMediumMapPageNumberAdapter();
      }
      @Override
      public Adapter caseMediumOrientation(MediumOrientation object)
      {
        return createMediumOrientationAdapter();
      }
      @Override
      public Adapter caseMeasurementUnits(MeasurementUnits object)
      {
        return createMeasurementUnitsAdapter();
      }
      @Override
      public Adapter caseMODCAInterchangeSet(MODCAInterchangeSet object)
      {
        return createMODCAInterchangeSetAdapter();
      }
      @Override
      public Adapter caseObjectAreaSize(ObjectAreaSize object)
      {
        return createObjectAreaSizeAdapter();
      }
      @Override
      public Adapter caseObjectClassification(ObjectClassification object)
      {
        return createObjectClassificationAdapter();
      }
      @Override
      public Adapter caseObjectFunctionSetSpecification(ObjectFunctionSetSpecification object)
      {
        return createObjectFunctionSetSpecificationAdapter();
      }
      @Override
      public Adapter caseObjectOffset(ObjectOffset object)
      {
        return createObjectOffsetAdapter();
      }
      @Override
      public Adapter caseResourceObjectType(ResourceObjectType object)
      {
        return createResourceObjectTypeAdapter();
      }
      @Override
      public Adapter casePagePositionInformation(PagePositionInformation object)
      {
        return createPagePositionInformationAdapter();
      }
      @Override
      public Adapter casePresentationControl(PresentationControl object)
      {
        return createPresentationControlAdapter();
      }
      @Override
      public Adapter casePresentationSpaceResetMixing(PresentationSpaceResetMixing object)
      {
        return createPresentationSpaceResetMixingAdapter();
      }
      @Override
      public Adapter casePresentationSpaceMixingRules(PresentationSpaceMixingRules object)
      {
        return createPresentationSpaceMixingRulesAdapter();
      }
      @Override
      public Adapter caseResourceLocalIdentifier(ResourceLocalIdentifier object)
      {
        return createResourceLocalIdentifierAdapter();
      }
      @Override
      public Adapter caseResourceSectionNumber(ResourceSectionNumber object)
      {
        return createResourceSectionNumberAdapter();
      }
      @Override
      public Adapter caseTextOrientation(TextOrientation object)
      {
        return createTextOrientationAdapter();
      }
      @Override
      public Adapter caseFontHorizontalScaleFactor(FontHorizontalScaleFactor object)
      {
        return createFontHorizontalScaleFactorAdapter();
      }
      @Override
      public Adapter caseFontDescriptorSpecification(FontDescriptorSpecification object)
      {
        return createFontDescriptorSpecificationAdapter();
      }
      @Override
      public Adapter caseBeginSegment(BeginSegment object)
      {
        return createBeginSegmentAdapter();
      }
      @Override
      public Adapter caseEndSegment(EndSegment object)
      {
        return createEndSegmentAdapter();
      }
      @Override
      public Adapter caseBeginTile(BeginTile object)
      {
        return createBeginTileAdapter();
      }
      @Override
      public Adapter caseEndTile(EndTile object)
      {
        return createEndTileAdapter();
      }
      @Override
      public Adapter caseBeginTransparencyMask(BeginTransparencyMask object)
      {
        return createBeginTransparencyMaskAdapter();
      }
      @Override
      public Adapter caseEndTransparencyMask(EndTransparencyMask object)
      {
        return createEndTransparencyMaskAdapter();
      }
      @Override
      public Adapter caseBeginImage(BeginImage object)
      {
        return createBeginImageAdapter();
      }
      @Override
      public Adapter caseEndImage(EndImage object)
      {
        return createEndImageAdapter();
      }
      @Override
      public Adapter caseImageSize(ImageSize object)
      {
        return createImageSizeAdapter();
      }
      @Override
      public Adapter caseImageEncoding(ImageEncoding object)
      {
        return createImageEncodingAdapter();
      }
      @Override
      public Adapter caseIDESize(IDESize object)
      {
        return createIDESizeAdapter();
      }
      @Override
      public Adapter caseImageLUTID(ImageLUTID object)
      {
        return createImageLUTIDAdapter();
      }
      @Override
      public Adapter caseBandImage(BandImage object)
      {
        return createBandImageAdapter();
      }
      @Override
      public Adapter caseIDEStructure(IDEStructure object)
      {
        return createIDEStructureAdapter();
      }
      @Override
      public Adapter caseExternalAlgorithm(ExternalAlgorithm object)
      {
        return createExternalAlgorithmAdapter();
      }
      @Override
      public Adapter caseTilePosition(TilePosition object)
      {
        return createTilePositionAdapter();
      }
      @Override
      public Adapter caseTileSize(TileSize object)
      {
        return createTileSizeAdapter();
      }
      @Override
      public Adapter caseTileSetColor(TileSetColor object)
      {
        return createTileSetColorAdapter();
      }
      @Override
      public Adapter caseSetBiLevelImageColor(SetBiLevelImageColor object)
      {
        return createSetBiLevelImageColorAdapter();
      }
      @Override
      public Adapter caseIOCAFunctionSetIdentification(IOCAFunctionSetIdentification object)
      {
        return createIOCAFunctionSetIdentificationAdapter();
      }
      @Override
      public Adapter caseImageData(ImageData object)
      {
        return createImageDataAdapter();
      }
      @Override
      public Adapter caseBandImageData(BandImageData object)
      {
        return createBandImageDataAdapter();
      }
      @Override
      public Adapter caseIncludeTile(IncludeTile object)
      {
        return createIncludeTileAdapter();
      }
      @Override
      public Adapter caseImageSubsampling(ImageSubsampling object)
      {
        return createImageSubsamplingAdapter();
      }
      @Override
      public Adapter caseSamplingRatios(SamplingRatios object)
      {
        return createSamplingRatiosAdapter();
      }
      @Override
      public Adapter caseTileTOC(TileTOC object)
      {
        return createTileTOCAdapter();
      }
      @Override
      public Adapter caseFNNRG2(FNNRG2 object)
      {
        return createFNNRG2Adapter();
      }
      @Override
      public Adapter caseBeginSegmentCommand(BeginSegmentCommand object)
      {
        return createBeginSegmentCommandAdapter();
      }
      @Override
      public Adapter caseEndSegmentCommand(EndSegmentCommand object)
      {
        return createEndSegmentCommandAdapter();
      }
      @Override
      public Adapter caseGBAR(GBAR object)
      {
        return createGBARAdapter();
      }
      @Override
      public Adapter caseGBIMG(GBIMG object)
      {
        return createGBIMGAdapter();
      }
      @Override
      public Adapter caseGCBIMG(GCBIMG object)
      {
        return createGCBIMGAdapter();
      }
      @Override
      public Adapter caseGBOX(GBOX object)
      {
        return createGBOXAdapter();
      }
      @Override
      public Adapter caseGCBOX(GCBOX object)
      {
        return createGCBOXAdapter();
      }
      @Override
      public Adapter caseGCHST(GCHST object)
      {
        return createGCHSTAdapter();
      }
      @Override
      public Adapter caseGCCHST(GCCHST object)
      {
        return createGCCHSTAdapter();
      }
      @Override
      public Adapter caseGCOMT(GCOMT object)
      {
        return createGCOMTAdapter();
      }
      @Override
      public Adapter caseGEAR(GEAR object)
      {
        return createGEARAdapter();
      }
      @Override
      public Adapter caseGEIMG(GEIMG object)
      {
        return createGEIMGAdapter();
      }
      @Override
      public Adapter caseGEPROL(GEPROL object)
      {
        return createGEPROLAdapter();
      }
      @Override
      public Adapter caseGFLT(GFLT object)
      {
        return createGFLTAdapter();
      }
      @Override
      public Adapter caseGCFLT(GCFLT object)
      {
        return createGCFLTAdapter();
      }
      @Override
      public Adapter caseGFARC(GFARC object)
      {
        return createGFARCAdapter();
      }
      @Override
      public Adapter caseGCFARC(GCFARC object)
      {
        return createGCFARCAdapter();
      }
      @Override
      public Adapter caseGIMD(GIMD object)
      {
        return createGIMDAdapter();
      }
      @Override
      public Adapter caseGLINE(GLINE object)
      {
        return createGLINEAdapter();
      }
      @Override
      public Adapter caseGCLINE(GCLINE object)
      {
        return createGCLINEAdapter();
      }
      @Override
      public Adapter caseGMRK(GMRK object)
      {
        return createGMRKAdapter();
      }
      @Override
      public Adapter caseGCMRK(GCMRK object)
      {
        return createGCMRKAdapter();
      }
      @Override
      public Adapter caseGNOP1(GNOP1 object)
      {
        return createGNOP1Adapter();
      }
      @Override
      public Adapter caseGPARC(GPARC object)
      {
        return createGPARCAdapter();
      }
      @Override
      public Adapter caseGCPARC(GCPARC object)
      {
        return createGCPARCAdapter();
      }
      @Override
      public Adapter caseGRLINE(GRLINE object)
      {
        return createGRLINEAdapter();
      }
      @Override
      public Adapter caseGCRLINE(GCRLINE object)
      {
        return createGCRLINEAdapter();
      }
      @Override
      public Adapter caseGSGCH(GSGCH object)
      {
        return createGSGCHAdapter();
      }
      @Override
      public Adapter caseGSAP(GSAP object)
      {
        return createGSAPAdapter();
      }
      @Override
      public Adapter caseGSBMX(GSBMX object)
      {
        return createGSBMXAdapter();
      }
      @Override
      public Adapter caseGSCA(GSCA object)
      {
        return createGSCAAdapter();
      }
      @Override
      public Adapter caseGSCC(GSCC object)
      {
        return createGSCCAdapter();
      }
      @Override
      public Adapter caseGSCD(GSCD object)
      {
        return createGSCDAdapter();
      }
      @Override
      public Adapter caseGSCR(GSCR object)
      {
        return createGSCRAdapter();
      }
      @Override
      public Adapter caseGSCS(GSCS object)
      {
        return createGSCSAdapter();
      }
      @Override
      public Adapter caseGSCH(GSCH object)
      {
        return createGSCHAdapter();
      }
      @Override
      public Adapter caseGSCOL(GSCOL object)
      {
        return createGSCOLAdapter();
      }
      @Override
      public Adapter caseGSCP(GSCP object)
      {
        return createGSCPAdapter();
      }
      @Override
      public Adapter caseGSECOL(GSECOL object)
      {
        return createGSECOLAdapter();
      }
      @Override
      public Adapter caseGSFLW(GSFLW object)
      {
        return createGSFLWAdapter();
      }
      @Override
      public Adapter caseGSLT(GSLT object)
      {
        return createGSLTAdapter();
      }
      @Override
      public Adapter caseGSLW(GSLW object)
      {
        return createGSLWAdapter();
      }
      @Override
      public Adapter caseGSMC(GSMC object)
      {
        return createGSMCAdapter();
      }
      @Override
      public Adapter caseGSMP(GSMP object)
      {
        return createGSMPAdapter();
      }
      @Override
      public Adapter caseGSMS(GSMS object)
      {
        return createGSMSAdapter();
      }
      @Override
      public Adapter caseGSMT(GSMT object)
      {
        return createGSMTAdapter();
      }
      @Override
      public Adapter caseGSMX(GSMX object)
      {
        return createGSMXAdapter();
      }
      @Override
      public Adapter caseGSPS(GSPS object)
      {
        return createGSPSAdapter();
      }
      @Override
      public Adapter caseGSPT(GSPT object)
      {
        return createGSPTAdapter();
      }
      @Override
      public Adapter caseGSPCOL(GSPCOL object)
      {
        return createGSPCOLAdapter();
      }
      @Override
      public Adapter caseGSLE(GSLE object)
      {
        return createGSLEAdapter();
      }
      @Override
      public Adapter caseGSLJ(GSLJ object)
      {
        return createGSLJAdapter();
      }
      @Override
      public Adapter caseGCBEZ(GCBEZ object)
      {
        return createGCBEZAdapter();
      }
      @Override
      public Adapter caseGCCBEZ(GCCBEZ object)
      {
        return createGCCBEZAdapter();
      }
      @Override
      public Adapter caseWindowSpecification(WindowSpecification object)
      {
        return createWindowSpecificationAdapter();
      }
      @Override
      public Adapter caseDrawingOrderSubset(DrawingOrderSubset object)
      {
        return createDrawingOrderSubsetAdapter();
      }
      @Override
      public Adapter caseTonerSaver(TonerSaver object)
      {
        return createTonerSaverAdapter();
      }
      @Override
      public Adapter caseColorFidelity(ColorFidelity object)
      {
        return createColorFidelityAdapter();
      }
      @Override
      public Adapter caseFontFidelity(FontFidelity object)
      {
        return createFontFidelityAdapter();
      }
      @Override
      public Adapter caseTextFidelity(TextFidelity object)
      {
        return createTextFidelityAdapter();
      }
      @Override
      public Adapter caseMediaFidelity(MediaFidelity object)
      {
        return createMediaFidelityAdapter();
      }
      @Override
      public Adapter caseFinishingFidelity(FinishingFidelity object)
      {
        return createFinishingFidelityAdapter();
      }
      @Override
      public Adapter caseCMRFidelity(CMRFidelity object)
      {
        return createCMRFidelityAdapter();
      }
      @Override
      public Adapter caseObjectByteExtent(ObjectByteExtent object)
      {
        return createObjectByteExtentAdapter();
      }
      @Override
      public Adapter caseObjectByteOffset(ObjectByteOffset object)
      {
        return createObjectByteOffsetAdapter();
      }
      @Override
      public Adapter caseObjectStructuredFieldExtent(ObjectStructuredFieldExtent object)
      {
        return createObjectStructuredFieldExtentAdapter();
      }
      @Override
      public Adapter caseObjectStructuredFieldOffset(ObjectStructuredFieldOffset object)
      {
        return createObjectStructuredFieldOffsetAdapter();
      }
      @Override
      public Adapter caseObjectCount(ObjectCount object)
      {
        return createObjectCountAdapter();
      }
      @Override
      public Adapter caseObjectOriginIdentifier(ObjectOriginIdentifier object)
      {
        return createObjectOriginIdentifierAdapter();
      }
      @Override
      public Adapter caseLineDataObjectPositionMigration(LineDataObjectPositionMigration object)
      {
        return createLineDataObjectPositionMigrationAdapter();
      }
      @Override
      public Adapter caseColorManagementResourceDescriptor(ColorManagementResourceDescriptor object)
      {
        return createColorManagementResourceDescriptorAdapter();
      }
      @Override
      public Adapter caseImageResolution(ImageResolution object)
      {
        return createImageResolutionAdapter();
      }
      @Override
      public Adapter caseObjectContainerPresentationSpaceSize(ObjectContainerPresentationSpaceSize object)
      {
        return createObjectContainerPresentationSpaceSizeAdapter();
      }
      @Override
      public Adapter caseExtendedResourceLocalIdentifier(ExtendedResourceLocalIdentifier object)
      {
        return createExtendedResourceLocalIdentifierAdapter();
      }
      @Override
      public Adapter caseMetricAdjustment(MetricAdjustment object)
      {
        return createMetricAdjustmentAdapter();
      }
      @Override
      public Adapter caseExtensionFont(ExtensionFont object)
      {
        return createExtensionFontAdapter();
      }
      @Override
      public Adapter caseRenderingIntent(RenderingIntent object)
      {
        return createRenderingIntentAdapter();
      }
      @Override
      public Adapter caseFontCodedGraphicCharacterSetGlobalIdentifier(FontCodedGraphicCharacterSetGlobalIdentifier object)
      {
        return createFontCodedGraphicCharacterSetGlobalIdentifierAdapter();
      }
      @Override
      public Adapter caseLocaleSelector(LocaleSelector object)
      {
        return createLocaleSelectorAdapter();
      }
      @Override
      public Adapter caseFinishingOperation(FinishingOperation object)
      {
        return createFinishingOperationAdapter();
      }
      @Override
      public Adapter caseUP3iFinishingOperation(UP3iFinishingOperation object)
      {
        return createUP3iFinishingOperationAdapter();
      }
      @Override
      public Adapter caseDeviceAppearance(DeviceAppearance object)
      {
        return createDeviceAppearanceAdapter();
      }
      @Override
      public Adapter caseResourceObjectInclude(ResourceObjectInclude object)
      {
        return createResourceObjectIncludeAdapter();
      }
      @Override
      public Adapter casePageOverlayConditionalProcessing(PageOverlayConditionalProcessing object)
      {
        return createPageOverlayConditionalProcessingAdapter();
      }
      @Override
      public Adapter caseResourceUsageAttribute(ResourceUsageAttribute object)
      {
        return createResourceUsageAttributeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.structuredField <em>structured Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.structuredField
   * @generated
   */
  public Adapter createstructuredFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.LineData <em>Line Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.LineData
   * @generated
   */
  public Adapter createLineDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BAG <em>BAG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BAG
   * @generated
   */
  public Adapter createBAGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BBC <em>BBC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BBC
   * @generated
   */
  public Adapter createBBCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BCA <em>BCA</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BCA
   * @generated
   */
  public Adapter createBCAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BCF <em>BCF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BCF
   * @generated
   */
  public Adapter createBCFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BCP <em>BCP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BCP
   * @generated
   */
  public Adapter createBCPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BDA <em>BDA</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BDA
   * @generated
   */
  public Adapter createBDAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BDD <em>BDD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BDD
   * @generated
   */
  public Adapter createBDDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BDG <em>BDG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BDG
   * @generated
   */
  public Adapter createBDGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BDI <em>BDI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BDI
   * @generated
   */
  public Adapter createBDIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BDM <em>BDM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BDM
   * @generated
   */
  public Adapter createBDMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BDT <em>BDT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BDT
   * @generated
   */
  public Adapter createBDTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BDX <em>BDX</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BDX
   * @generated
   */
  public Adapter createBDXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BFG <em>BFG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BFG
   * @generated
   */
  public Adapter createBFGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BFM <em>BFM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BFM
   * @generated
   */
  public Adapter createBFMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BFN <em>BFN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BFN
   * @generated
   */
  public Adapter createBFNAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BGR <em>BGR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BGR
   * @generated
   */
  public Adapter createBGRAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BII <em>BII</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BII
   * @generated
   */
  public Adapter createBIIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BIM <em>BIM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BIM
   * @generated
   */
  public Adapter createBIMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BMM <em>BMM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BMM
   * @generated
   */
  public Adapter createBMMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BMO <em>BMO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BMO
   * @generated
   */
  public Adapter createBMOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BNG <em>BNG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BNG
   * @generated
   */
  public Adapter createBNGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BOC <em>BOC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BOC
   * @generated
   */
  public Adapter createBOCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BOG <em>BOG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BOG
   * @generated
   */
  public Adapter createBOGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BPF <em>BPF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BPF
   * @generated
   */
  public Adapter createBPFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BPG <em>BPG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BPG
   * @generated
   */
  public Adapter createBPGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BPM <em>BPM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BPM
   * @generated
   */
  public Adapter createBPMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BPS <em>BPS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BPS
   * @generated
   */
  public Adapter createBPSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BPT <em>BPT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BPT
   * @generated
   */
  public Adapter createBPTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BRG <em>BRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BRG
   * @generated
   */
  public Adapter createBRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BRS <em>BRS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BRS
   * @generated
   */
  public Adapter createBRSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BSG <em>BSG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BSG
   * @generated
   */
  public Adapter createBSGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CAT <em>CAT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CAT
   * @generated
   */
  public Adapter createCATAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CDD <em>CDD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CDD
   * @generated
   */
  public Adapter createCDDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CFC <em>CFC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CFC
   * @generated
   */
  public Adapter createCFCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CFI <em>CFI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CFI
   * @generated
   */
  public Adapter createCFIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CPC <em>CPC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CPC
   * @generated
   */
  public Adapter createCPCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CPD <em>CPD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CPD
   * @generated
   */
  public Adapter createCPDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CPI <em>CPI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CPI
   * @generated
   */
  public Adapter createCPIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CTC <em>CTC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CTC
   * @generated
   */
  public Adapter createCTCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.DXD <em>DXD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.DXD
   * @generated
   */
  public Adapter createDXDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EAG <em>EAG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EAG
   * @generated
   */
  public Adapter createEAGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EBC <em>EBC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EBC
   * @generated
   */
  public Adapter createEBCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ECA <em>ECA</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ECA
   * @generated
   */
  public Adapter createECAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ECF <em>ECF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ECF
   * @generated
   */
  public Adapter createECFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ECP <em>ECP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ECP
   * @generated
   */
  public Adapter createECPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EDG <em>EDG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EDG
   * @generated
   */
  public Adapter createEDGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EDI <em>EDI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EDI
   * @generated
   */
  public Adapter createEDIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EDM <em>EDM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EDM
   * @generated
   */
  public Adapter createEDMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EDT <em>EDT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EDT
   * @generated
   */
  public Adapter createEDTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EDX <em>EDX</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EDX
   * @generated
   */
  public Adapter createEDXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EFG <em>EFG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EFG
   * @generated
   */
  public Adapter createEFGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EFM <em>EFM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EFM
   * @generated
   */
  public Adapter createEFMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EFN <em>EFN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EFN
   * @generated
   */
  public Adapter createEFNAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EGR <em>EGR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EGR
   * @generated
   */
  public Adapter createEGRAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EII <em>EII</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EII
   * @generated
   */
  public Adapter createEIIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EIM <em>EIM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EIM
   * @generated
   */
  public Adapter createEIMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EMM <em>EMM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EMM
   * @generated
   */
  public Adapter createEMMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EMO <em>EMO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EMO
   * @generated
   */
  public Adapter createEMOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ENG <em>ENG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ENG
   * @generated
   */
  public Adapter createENGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EOC <em>EOC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EOC
   * @generated
   */
  public Adapter createEOCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EOG <em>EOG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EOG
   * @generated
   */
  public Adapter createEOGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EPF <em>EPF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EPF
   * @generated
   */
  public Adapter createEPFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EPG <em>EPG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EPG
   * @generated
   */
  public Adapter createEPGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EPM <em>EPM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EPM
   * @generated
   */
  public Adapter createEPMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EPS <em>EPS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EPS
   * @generated
   */
  public Adapter createEPSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EPT <em>EPT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EPT
   * @generated
   */
  public Adapter createEPTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ERG <em>ERG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ERG
   * @generated
   */
  public Adapter createERGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ERS <em>ERS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ERS
   * @generated
   */
  public Adapter createERSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ESG <em>ESG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ESG
   * @generated
   */
  public Adapter createESGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNC <em>FNC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNC
   * @generated
   */
  public Adapter createFNCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FND <em>FND</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FND
   * @generated
   */
  public Adapter createFNDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNG <em>FNG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNG
   * @generated
   */
  public Adapter createFNGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNI <em>FNI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNI
   * @generated
   */
  public Adapter createFNIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNN <em>FNN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNN
   * @generated
   */
  public Adapter createFNNAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNM <em>FNM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNM
   * @generated
   */
  public Adapter createFNMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNO <em>FNO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNO
   * @generated
   */
  public Adapter createFNOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNP <em>FNP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNP
   * @generated
   */
  public Adapter createFNPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GAD <em>GAD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GAD
   * @generated
   */
  public Adapter createGADAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GDD <em>GDD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GDD
   * @generated
   */
  public Adapter createGDDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ICP <em>ICP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ICP
   * @generated
   */
  public Adapter createICPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IDD <em>IDD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IDD
   * @generated
   */
  public Adapter createIDDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IEL <em>IEL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IEL
   * @generated
   */
  public Adapter createIELAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IID <em>IID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IID
   * @generated
   */
  public Adapter createIIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IMM <em>IMM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IMM
   * @generated
   */
  public Adapter createIMMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IOB <em>IOB</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IOB
   * @generated
   */
  public Adapter createIOBAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IOC <em>IOC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IOC
   * @generated
   */
  public Adapter createIOCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IPD <em>IPD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IPD
   * @generated
   */
  public Adapter createIPDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IPG <em>IPG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IPG
   * @generated
   */
  public Adapter createIPGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IPO <em>IPO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IPO
   * @generated
   */
  public Adapter createIPOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IPS <em>IPS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IPS
   * @generated
   */
  public Adapter createIPSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IRD <em>IRD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IRD
   * @generated
   */
  public Adapter createIRDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.LLE <em>LLE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.LLE
   * @generated
   */
  public Adapter createLLEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.LNC <em>LNC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.LNC
   * @generated
   */
  public Adapter createLNCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.LND <em>LND</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.LND
   * @generated
   */
  public Adapter createLNDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MBC <em>MBC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MBC
   * @generated
   */
  public Adapter createMBCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MCA <em>MCA</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MCA
   * @generated
   */
  public Adapter createMCAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MCC <em>MCC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MCC
   * @generated
   */
  public Adapter createMCCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MCD <em>MCD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MCD
   * @generated
   */
  public Adapter createMCDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MCF <em>MCF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MCF
   * @generated
   */
  public Adapter createMCFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MCF1 <em>MCF1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MCF1
   * @generated
   */
  public Adapter createMCF1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MDD <em>MDD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MDD
   * @generated
   */
  public Adapter createMDDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MDR <em>MDR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MDR
   * @generated
   */
  public Adapter createMDRAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MFC <em>MFC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MFC
   * @generated
   */
  public Adapter createMFCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MGO <em>MGO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MGO
   * @generated
   */
  public Adapter createMGOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MIO <em>MIO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MIO
   * @generated
   */
  public Adapter createMIOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MMC <em>MMC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MMC
   * @generated
   */
  public Adapter createMMCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MMD <em>MMD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MMD
   * @generated
   */
  public Adapter createMMDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MMO <em>MMO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MMO
   * @generated
   */
  public Adapter createMMOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MMT <em>MMT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MMT
   * @generated
   */
  public Adapter createMMTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MPG <em>MPG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MPG
   * @generated
   */
  public Adapter createMPGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MPO <em>MPO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MPO
   * @generated
   */
  public Adapter createMPOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MPS <em>MPS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MPS
   * @generated
   */
  public Adapter createMPSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MSU <em>MSU</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MSU
   * @generated
   */
  public Adapter createMSUAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.NOP <em>NOP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.NOP
   * @generated
   */
  public Adapter createNOPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.OBD <em>OBD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.OBD
   * @generated
   */
  public Adapter createOBDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.OBP <em>OBP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.OBP
   * @generated
   */
  public Adapter createOBPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.OCD <em>OCD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.OCD
   * @generated
   */
  public Adapter createOCDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PEC <em>PEC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PEC
   * @generated
   */
  public Adapter createPECAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PFC <em>PFC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PFC
   * @generated
   */
  public Adapter createPFCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PGD <em>PGD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PGD
   * @generated
   */
  public Adapter createPGDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PGP <em>PGP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PGP
   * @generated
   */
  public Adapter createPGPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PGP1 <em>PGP1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PGP1
   * @generated
   */
  public Adapter createPGP1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PMC <em>PMC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PMC
   * @generated
   */
  public Adapter createPMCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PPO <em>PPO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PPO
   * @generated
   */
  public Adapter createPPOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PTD <em>PTD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PTD
   * @generated
   */
  public Adapter createPTDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PTD1 <em>PTD1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PTD1
   * @generated
   */
  public Adapter createPTD1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PTX <em>PTX</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PTX
   * @generated
   */
  public Adapter createPTXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.TLE <em>TLE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.TLE
   * @generated
   */
  public Adapter createTLEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FGD <em>FGD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FGD
   * @generated
   */
  public Adapter createFGDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CPIRG <em>CPIRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CPIRG
   * @generated
   */
  public Adapter createCPIRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CFIRG <em>CFIRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CFIRG
   * @generated
   */
  public Adapter createCFIRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNIRG <em>FNIRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNIRG
   * @generated
   */
  public Adapter createFNIRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNMRG <em>FNMRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNMRG
   * @generated
   */
  public Adapter createFNMRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.LLERG <em>LLERG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.LLERG
   * @generated
   */
  public Adapter createLLERGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MPSRG <em>MPSRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MPSRG
   * @generated
   */
  public Adapter createMPSRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MCFRG <em>MCFRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MCFRG
   * @generated
   */
  public Adapter createMCFRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MBCRG <em>MBCRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MBCRG
   * @generated
   */
  public Adapter createMBCRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MCARG <em>MCARG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MCARG
   * @generated
   */
  public Adapter createMCARGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MCDRG <em>MCDRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MCDRG
   * @generated
   */
  public Adapter createMCDRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MDRRG <em>MDRRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MDRRG
   * @generated
   */
  public Adapter createMDRRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MGORG <em>MGORG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MGORG
   * @generated
   */
  public Adapter createMGORGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MIORG <em>MIORG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MIORG
   * @generated
   */
  public Adapter createMIORGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MMDRG <em>MMDRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MMDRG
   * @generated
   */
  public Adapter createMMDRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MMTRG <em>MMTRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MMTRG
   * @generated
   */
  public Adapter createMMTRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MPGRG <em>MPGRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MPGRG
   * @generated
   */
  public Adapter createMPGRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MPORG <em>MPORG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MPORG
   * @generated
   */
  public Adapter createMPORGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PPORG <em>PPORG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PPORG
   * @generated
   */
  public Adapter createPPORGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PGPRG <em>PGPRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PGPRG
   * @generated
   */
  public Adapter createPGPRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MCCRG <em>MCCRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MCCRG
   * @generated
   */
  public Adapter createMCCRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MMORG <em>MMORG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MMORG
   * @generated
   */
  public Adapter createMMORGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BandImageRG <em>Band Image RG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BandImageRG
   * @generated
   */
  public Adapter createBandImageRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MCF1RG <em>MCF1RG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MCF1RG
   * @generated
   */
  public Adapter createMCF1RGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MMCRG <em>MMCRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MMCRG
   * @generated
   */
  public Adapter createMMCRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNORG <em>FNORG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNORG
   * @generated
   */
  public Adapter createFNORGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNPRG <em>FNPRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNPRG
   * @generated
   */
  public Adapter createFNPRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.TileTOCRG <em>Tile TOCRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.TileTOCRG
   * @generated
   */
  public Adapter createTileTOCRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.SamplingRatiosRG <em>Sampling Ratios RG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.SamplingRatiosRG
   * @generated
   */
  public Adapter createSamplingRatiosRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ExternalAlgorithmRG <em>External Algorithm RG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ExternalAlgorithmRG
   * @generated
   */
  public Adapter createExternalAlgorithmRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNNRG <em>FNNRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNNRG
   * @generated
   */
  public Adapter createFNNRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCBEZRG <em>GCBEZRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCBEZRG
   * @generated
   */
  public Adapter createGCBEZRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCCBEZRG <em>GCCBEZRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCCBEZRG
   * @generated
   */
  public Adapter createGCCBEZRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GFLTRG <em>GFLTRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GFLTRG
   * @generated
   */
  public Adapter createGFLTRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCFLTRG <em>GCFLTRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCFLTRG
   * @generated
   */
  public Adapter createGCFLTRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GLINERG <em>GLINERG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GLINERG
   * @generated
   */
  public Adapter createGLINERGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCLINERG <em>GCLINERG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCLINERG
   * @generated
   */
  public Adapter createGCLINERGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GMRKRG <em>GMRKRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GMRKRG
   * @generated
   */
  public Adapter createGMRKRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCMRKRG <em>GCMRKRG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCMRKRG
   * @generated
   */
  public Adapter createGCMRKRGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GRLINERG <em>GRLINERG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GRLINERG
   * @generated
   */
  public Adapter createGRLINERGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCRLINERG <em>GCRLINERG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCRLINERG
   * @generated
   */
  public Adapter createGCRLINERGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MSURG <em>MSURG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MSURG
   * @generated
   */
  public Adapter createMSURGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.triplet <em>triplet</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.triplet
   * @generated
   */
  public Adapter createtripletAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.AMB <em>AMB</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.AMB
   * @generated
   */
  public Adapter createAMBAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.AMI <em>AMI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.AMI
   * @generated
   */
  public Adapter createAMIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BLN <em>BLN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BLN
   * @generated
   */
  public Adapter createBLNAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BSU <em>BSU</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BSU
   * @generated
   */
  public Adapter createBSUAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.DBR <em>DBR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.DBR
   * @generated
   */
  public Adapter createDBRAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.DIR <em>DIR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.DIR
   * @generated
   */
  public Adapter createDIRAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ESU <em>ESU</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ESU
   * @generated
   */
  public Adapter createESUAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.NOPCS <em>NOPCS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.NOPCS
   * @generated
   */
  public Adapter createNOPCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.OVS <em>OVS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.OVS
   * @generated
   */
  public Adapter createOVSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.RMB <em>RMB</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.RMB
   * @generated
   */
  public Adapter createRMBAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.RMI <em>RMI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.RMI
   * @generated
   */
  public Adapter createRMIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.RPS <em>RPS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.RPS
   * @generated
   */
  public Adapter createRPSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.SBI <em>SBI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.SBI
   * @generated
   */
  public Adapter createSBIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.SCFL <em>SCFL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.SCFL
   * @generated
   */
  public Adapter createSCFLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.SEC <em>SEC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.SEC
   * @generated
   */
  public Adapter createSECAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.SIA <em>SIA</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.SIA
   * @generated
   */
  public Adapter createSIAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.SIM <em>SIM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.SIM
   * @generated
   */
  public Adapter createSIMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.STC <em>STC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.STC
   * @generated
   */
  public Adapter createSTCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.STO <em>STO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.STO
   * @generated
   */
  public Adapter createSTOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.SVI <em>SVI</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.SVI
   * @generated
   */
  public Adapter createSVIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.TBM <em>TBM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.TBM
   * @generated
   */
  public Adapter createTBMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.TRN <em>TRN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.TRN
   * @generated
   */
  public Adapter createTRNAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.USC <em>USC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.USC
   * @generated
   */
  public Adapter createUSCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.AttributeQualifier <em>Attribute Qualifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.AttributeQualifier
   * @generated
   */
  public Adapter createAttributeQualifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.AttributeValue <em>Attribute Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.AttributeValue
   * @generated
   */
  public Adapter createAttributeValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CGCSGID <em>CGCSGID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CGCSGID
   * @generated
   */
  public Adapter createCGCSGIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CRCResourceManagement <em>CRC Resource Management</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CRCResourceManagement
   * @generated
   */
  public Adapter createCRCResourceManagementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CharacterRotation <em>Character Rotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CharacterRotation
   * @generated
   */
  public Adapter createCharacterRotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ColorSpecification <em>Color Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ColorSpecification
   * @generated
   */
  public Adapter createColorSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.Comment <em>Comment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.Comment
   * @generated
   */
  public Adapter createCommentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.DataObjectFontDescriptor <em>Data Object Font Descriptor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.DataObjectFontDescriptor
   * @generated
   */
  public Adapter createDataObjectFontDescriptorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.DescriptorPosition <em>Descriptor Position</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.DescriptorPosition
   * @generated
   */
  public Adapter createDescriptorPositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EncodingSchemeID <em>Encoding Scheme ID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EncodingSchemeID
   * @generated
   */
  public Adapter createEncodingSchemeIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FontResolution <em>Font Resolution</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FontResolution
   * @generated
   */
  public Adapter createFontResolutionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FullyQualifiedName <em>Fully Qualified Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FullyQualifiedName
   * @generated
   */
  public Adapter createFullyQualifiedNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.LocalDateAndTimeStamp <em>Local Date And Time Stamp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.LocalDateAndTimeStamp
   * @generated
   */
  public Adapter createLocalDateAndTimeStampAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.UniversalDateAndTimeStamp <em>Universal Date And Time Stamp</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.UniversalDateAndTimeStamp
   * @generated
   */
  public Adapter createUniversalDateAndTimeStampAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MappingOption <em>Mapping Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MappingOption
   * @generated
   */
  public Adapter createMappingOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MediaEjectControl <em>Media Eject Control</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MediaEjectControl
   * @generated
   */
  public Adapter createMediaEjectControlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MediumMapPageNumber <em>Medium Map Page Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MediumMapPageNumber
   * @generated
   */
  public Adapter createMediumMapPageNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MediumOrientation <em>Medium Orientation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MediumOrientation
   * @generated
   */
  public Adapter createMediumOrientationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MeasurementUnits <em>Measurement Units</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MeasurementUnits
   * @generated
   */
  public Adapter createMeasurementUnitsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MODCAInterchangeSet <em>MODCA Interchange Set</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MODCAInterchangeSet
   * @generated
   */
  public Adapter createMODCAInterchangeSetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ObjectAreaSize <em>Object Area Size</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ObjectAreaSize
   * @generated
   */
  public Adapter createObjectAreaSizeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ObjectClassification <em>Object Classification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ObjectClassification
   * @generated
   */
  public Adapter createObjectClassificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ObjectFunctionSetSpecification <em>Object Function Set Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ObjectFunctionSetSpecification
   * @generated
   */
  public Adapter createObjectFunctionSetSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ObjectOffset <em>Object Offset</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ObjectOffset
   * @generated
   */
  public Adapter createObjectOffsetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ResourceObjectType <em>Resource Object Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ResourceObjectType
   * @generated
   */
  public Adapter createResourceObjectTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PagePositionInformation <em>Page Position Information</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PagePositionInformation
   * @generated
   */
  public Adapter createPagePositionInformationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PresentationControl <em>Presentation Control</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PresentationControl
   * @generated
   */
  public Adapter createPresentationControlAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PresentationSpaceResetMixing <em>Presentation Space Reset Mixing</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PresentationSpaceResetMixing
   * @generated
   */
  public Adapter createPresentationSpaceResetMixingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PresentationSpaceMixingRules <em>Presentation Space Mixing Rules</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PresentationSpaceMixingRules
   * @generated
   */
  public Adapter createPresentationSpaceMixingRulesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ResourceLocalIdentifier <em>Resource Local Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ResourceLocalIdentifier
   * @generated
   */
  public Adapter createResourceLocalIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ResourceSectionNumber <em>Resource Section Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ResourceSectionNumber
   * @generated
   */
  public Adapter createResourceSectionNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.TextOrientation <em>Text Orientation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.TextOrientation
   * @generated
   */
  public Adapter createTextOrientationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FontHorizontalScaleFactor <em>Font Horizontal Scale Factor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FontHorizontalScaleFactor
   * @generated
   */
  public Adapter createFontHorizontalScaleFactorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FontDescriptorSpecification <em>Font Descriptor Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FontDescriptorSpecification
   * @generated
   */
  public Adapter createFontDescriptorSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BeginSegment <em>Begin Segment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BeginSegment
   * @generated
   */
  public Adapter createBeginSegmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EndSegment <em>End Segment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EndSegment
   * @generated
   */
  public Adapter createEndSegmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BeginTile <em>Begin Tile</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BeginTile
   * @generated
   */
  public Adapter createBeginTileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EndTile <em>End Tile</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EndTile
   * @generated
   */
  public Adapter createEndTileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BeginTransparencyMask <em>Begin Transparency Mask</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BeginTransparencyMask
   * @generated
   */
  public Adapter createBeginTransparencyMaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EndTransparencyMask <em>End Transparency Mask</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EndTransparencyMask
   * @generated
   */
  public Adapter createEndTransparencyMaskAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BeginImage <em>Begin Image</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BeginImage
   * @generated
   */
  public Adapter createBeginImageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EndImage <em>End Image</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EndImage
   * @generated
   */
  public Adapter createEndImageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ImageSize <em>Image Size</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ImageSize
   * @generated
   */
  public Adapter createImageSizeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ImageEncoding <em>Image Encoding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ImageEncoding
   * @generated
   */
  public Adapter createImageEncodingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IDESize <em>IDE Size</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IDESize
   * @generated
   */
  public Adapter createIDESizeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ImageLUTID <em>Image LUTID</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ImageLUTID
   * @generated
   */
  public Adapter createImageLUTIDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BandImage <em>Band Image</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BandImage
   * @generated
   */
  public Adapter createBandImageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IDEStructure <em>IDE Structure</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IDEStructure
   * @generated
   */
  public Adapter createIDEStructureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ExternalAlgorithm <em>External Algorithm</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ExternalAlgorithm
   * @generated
   */
  public Adapter createExternalAlgorithmAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.TilePosition <em>Tile Position</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.TilePosition
   * @generated
   */
  public Adapter createTilePositionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.TileSize <em>Tile Size</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.TileSize
   * @generated
   */
  public Adapter createTileSizeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.TileSetColor <em>Tile Set Color</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.TileSetColor
   * @generated
   */
  public Adapter createTileSetColorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.SetBiLevelImageColor <em>Set Bi Level Image Color</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.SetBiLevelImageColor
   * @generated
   */
  public Adapter createSetBiLevelImageColorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IOCAFunctionSetIdentification <em>IOCA Function Set Identification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IOCAFunctionSetIdentification
   * @generated
   */
  public Adapter createIOCAFunctionSetIdentificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ImageData <em>Image Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ImageData
   * @generated
   */
  public Adapter createImageDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BandImageData <em>Band Image Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BandImageData
   * @generated
   */
  public Adapter createBandImageDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.IncludeTile <em>Include Tile</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.IncludeTile
   * @generated
   */
  public Adapter createIncludeTileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ImageSubsampling <em>Image Subsampling</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ImageSubsampling
   * @generated
   */
  public Adapter createImageSubsamplingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.SamplingRatios <em>Sampling Ratios</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.SamplingRatios
   * @generated
   */
  public Adapter createSamplingRatiosAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.TileTOC <em>Tile TOC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.TileTOC
   * @generated
   */
  public Adapter createTileTOCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FNNRG2 <em>FNNRG2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FNNRG2
   * @generated
   */
  public Adapter createFNNRG2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.BeginSegmentCommand <em>Begin Segment Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.BeginSegmentCommand
   * @generated
   */
  public Adapter createBeginSegmentCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.EndSegmentCommand <em>End Segment Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.EndSegmentCommand
   * @generated
   */
  public Adapter createEndSegmentCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GBAR <em>GBAR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GBAR
   * @generated
   */
  public Adapter createGBARAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GBIMG <em>GBIMG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GBIMG
   * @generated
   */
  public Adapter createGBIMGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCBIMG <em>GCBIMG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCBIMG
   * @generated
   */
  public Adapter createGCBIMGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GBOX <em>GBOX</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GBOX
   * @generated
   */
  public Adapter createGBOXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCBOX <em>GCBOX</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCBOX
   * @generated
   */
  public Adapter createGCBOXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCHST <em>GCHST</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCHST
   * @generated
   */
  public Adapter createGCHSTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCCHST <em>GCCHST</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCCHST
   * @generated
   */
  public Adapter createGCCHSTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCOMT <em>GCOMT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCOMT
   * @generated
   */
  public Adapter createGCOMTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GEAR <em>GEAR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GEAR
   * @generated
   */
  public Adapter createGEARAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GEIMG <em>GEIMG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GEIMG
   * @generated
   */
  public Adapter createGEIMGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GEPROL <em>GEPROL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GEPROL
   * @generated
   */
  public Adapter createGEPROLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GFLT <em>GFLT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GFLT
   * @generated
   */
  public Adapter createGFLTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCFLT <em>GCFLT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCFLT
   * @generated
   */
  public Adapter createGCFLTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GFARC <em>GFARC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GFARC
   * @generated
   */
  public Adapter createGFARCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCFARC <em>GCFARC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCFARC
   * @generated
   */
  public Adapter createGCFARCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GIMD <em>GIMD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GIMD
   * @generated
   */
  public Adapter createGIMDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GLINE <em>GLINE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GLINE
   * @generated
   */
  public Adapter createGLINEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCLINE <em>GCLINE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCLINE
   * @generated
   */
  public Adapter createGCLINEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GMRK <em>GMRK</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GMRK
   * @generated
   */
  public Adapter createGMRKAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCMRK <em>GCMRK</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCMRK
   * @generated
   */
  public Adapter createGCMRKAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GNOP1 <em>GNOP1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GNOP1
   * @generated
   */
  public Adapter createGNOP1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GPARC <em>GPARC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GPARC
   * @generated
   */
  public Adapter createGPARCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCPARC <em>GCPARC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCPARC
   * @generated
   */
  public Adapter createGCPARCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GRLINE <em>GRLINE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GRLINE
   * @generated
   */
  public Adapter createGRLINEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCRLINE <em>GCRLINE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCRLINE
   * @generated
   */
  public Adapter createGCRLINEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSGCH <em>GSGCH</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSGCH
   * @generated
   */
  public Adapter createGSGCHAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSAP <em>GSAP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSAP
   * @generated
   */
  public Adapter createGSAPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSBMX <em>GSBMX</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSBMX
   * @generated
   */
  public Adapter createGSBMXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSCA <em>GSCA</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSCA
   * @generated
   */
  public Adapter createGSCAAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSCC <em>GSCC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSCC
   * @generated
   */
  public Adapter createGSCCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSCD <em>GSCD</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSCD
   * @generated
   */
  public Adapter createGSCDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSCR <em>GSCR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSCR
   * @generated
   */
  public Adapter createGSCRAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSCS <em>GSCS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSCS
   * @generated
   */
  public Adapter createGSCSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSCH <em>GSCH</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSCH
   * @generated
   */
  public Adapter createGSCHAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSCOL <em>GSCOL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSCOL
   * @generated
   */
  public Adapter createGSCOLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSCP <em>GSCP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSCP
   * @generated
   */
  public Adapter createGSCPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSECOL <em>GSECOL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSECOL
   * @generated
   */
  public Adapter createGSECOLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSFLW <em>GSFLW</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSFLW
   * @generated
   */
  public Adapter createGSFLWAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSLT <em>GSLT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSLT
   * @generated
   */
  public Adapter createGSLTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSLW <em>GSLW</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSLW
   * @generated
   */
  public Adapter createGSLWAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSMC <em>GSMC</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSMC
   * @generated
   */
  public Adapter createGSMCAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSMP <em>GSMP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSMP
   * @generated
   */
  public Adapter createGSMPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSMS <em>GSMS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSMS
   * @generated
   */
  public Adapter createGSMSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSMT <em>GSMT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSMT
   * @generated
   */
  public Adapter createGSMTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSMX <em>GSMX</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSMX
   * @generated
   */
  public Adapter createGSMXAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSPS <em>GSPS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSPS
   * @generated
   */
  public Adapter createGSPSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSPT <em>GSPT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSPT
   * @generated
   */
  public Adapter createGSPTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSPCOL <em>GSPCOL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSPCOL
   * @generated
   */
  public Adapter createGSPCOLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSLE <em>GSLE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSLE
   * @generated
   */
  public Adapter createGSLEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GSLJ <em>GSLJ</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GSLJ
   * @generated
   */
  public Adapter createGSLJAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCBEZ <em>GCBEZ</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCBEZ
   * @generated
   */
  public Adapter createGCBEZAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.GCCBEZ <em>GCCBEZ</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.GCCBEZ
   * @generated
   */
  public Adapter createGCCBEZAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.WindowSpecification <em>Window Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.WindowSpecification
   * @generated
   */
  public Adapter createWindowSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.DrawingOrderSubset <em>Drawing Order Subset</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.DrawingOrderSubset
   * @generated
   */
  public Adapter createDrawingOrderSubsetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.TonerSaver <em>Toner Saver</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.TonerSaver
   * @generated
   */
  public Adapter createTonerSaverAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ColorFidelity <em>Color Fidelity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ColorFidelity
   * @generated
   */
  public Adapter createColorFidelityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FontFidelity <em>Font Fidelity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FontFidelity
   * @generated
   */
  public Adapter createFontFidelityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.TextFidelity <em>Text Fidelity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.TextFidelity
   * @generated
   */
  public Adapter createTextFidelityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MediaFidelity <em>Media Fidelity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MediaFidelity
   * @generated
   */
  public Adapter createMediaFidelityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FinishingFidelity <em>Finishing Fidelity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FinishingFidelity
   * @generated
   */
  public Adapter createFinishingFidelityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.CMRFidelity <em>CMR Fidelity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.CMRFidelity
   * @generated
   */
  public Adapter createCMRFidelityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ObjectByteExtent <em>Object Byte Extent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ObjectByteExtent
   * @generated
   */
  public Adapter createObjectByteExtentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ObjectByteOffset <em>Object Byte Offset</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ObjectByteOffset
   * @generated
   */
  public Adapter createObjectByteOffsetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ObjectStructuredFieldExtent <em>Object Structured Field Extent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ObjectStructuredFieldExtent
   * @generated
   */
  public Adapter createObjectStructuredFieldExtentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ObjectStructuredFieldOffset <em>Object Structured Field Offset</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ObjectStructuredFieldOffset
   * @generated
   */
  public Adapter createObjectStructuredFieldOffsetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ObjectCount <em>Object Count</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ObjectCount
   * @generated
   */
  public Adapter createObjectCountAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ObjectOriginIdentifier <em>Object Origin Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ObjectOriginIdentifier
   * @generated
   */
  public Adapter createObjectOriginIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.LineDataObjectPositionMigration <em>Line Data Object Position Migration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.LineDataObjectPositionMigration
   * @generated
   */
  public Adapter createLineDataObjectPositionMigrationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ColorManagementResourceDescriptor <em>Color Management Resource Descriptor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ColorManagementResourceDescriptor
   * @generated
   */
  public Adapter createColorManagementResourceDescriptorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ImageResolution <em>Image Resolution</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ImageResolution
   * @generated
   */
  public Adapter createImageResolutionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ObjectContainerPresentationSpaceSize <em>Object Container Presentation Space Size</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ObjectContainerPresentationSpaceSize
   * @generated
   */
  public Adapter createObjectContainerPresentationSpaceSizeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ExtendedResourceLocalIdentifier <em>Extended Resource Local Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ExtendedResourceLocalIdentifier
   * @generated
   */
  public Adapter createExtendedResourceLocalIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.MetricAdjustment <em>Metric Adjustment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.MetricAdjustment
   * @generated
   */
  public Adapter createMetricAdjustmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ExtensionFont <em>Extension Font</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ExtensionFont
   * @generated
   */
  public Adapter createExtensionFontAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.RenderingIntent <em>Rendering Intent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.RenderingIntent
   * @generated
   */
  public Adapter createRenderingIntentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FontCodedGraphicCharacterSetGlobalIdentifier <em>Font Coded Graphic Character Set Global Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FontCodedGraphicCharacterSetGlobalIdentifier
   * @generated
   */
  public Adapter createFontCodedGraphicCharacterSetGlobalIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.LocaleSelector <em>Locale Selector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.LocaleSelector
   * @generated
   */
  public Adapter createLocaleSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.FinishingOperation <em>Finishing Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.FinishingOperation
   * @generated
   */
  public Adapter createFinishingOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.UP3iFinishingOperation <em>UP 3i Finishing Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.UP3iFinishingOperation
   * @generated
   */
  public Adapter createUP3iFinishingOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.DeviceAppearance <em>Device Appearance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.DeviceAppearance
   * @generated
   */
  public Adapter createDeviceAppearanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ResourceObjectInclude <em>Resource Object Include</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ResourceObjectInclude
   * @generated
   */
  public Adapter createResourceObjectIncludeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.PageOverlayConditionalProcessing <em>Page Overlay Conditional Processing</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.PageOverlayConditionalProcessing
   * @generated
   */
  public Adapter createPageOverlayConditionalProcessingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.afplib.afpText.ResourceUsageAttribute <em>Resource Usage Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.afplib.afpText.ResourceUsageAttribute
   * @generated
   */
  public Adapter createResourceUsageAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //AfpTextAdapterFactory
