/*
 * generated by Xtext 2.18.0.M3
 */
package org.afplib.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.afplib.afpText.AMB;
import org.afplib.afpText.AMI;
import org.afplib.afpText.AfpTextPackage;
import org.afplib.afpText.AttributeQualifier;
import org.afplib.afpText.AttributeValue;
import org.afplib.afpText.BAG;
import org.afplib.afpText.BBC;
import org.afplib.afpText.BCA;
import org.afplib.afpText.BCF;
import org.afplib.afpText.BCP;
import org.afplib.afpText.BDA;
import org.afplib.afpText.BDD;
import org.afplib.afpText.BDG;
import org.afplib.afpText.BDI;
import org.afplib.afpText.BDM;
import org.afplib.afpText.BDT;
import org.afplib.afpText.BDX;
import org.afplib.afpText.BFG;
import org.afplib.afpText.BFM;
import org.afplib.afpText.BFN;
import org.afplib.afpText.BGR;
import org.afplib.afpText.BII;
import org.afplib.afpText.BIM;
import org.afplib.afpText.BLN;
import org.afplib.afpText.BMM;
import org.afplib.afpText.BMO;
import org.afplib.afpText.BNG;
import org.afplib.afpText.BOC;
import org.afplib.afpText.BOG;
import org.afplib.afpText.BPF;
import org.afplib.afpText.BPG;
import org.afplib.afpText.BPM;
import org.afplib.afpText.BPS;
import org.afplib.afpText.BPT;
import org.afplib.afpText.BRG;
import org.afplib.afpText.BRS;
import org.afplib.afpText.BSG;
import org.afplib.afpText.BSU;
import org.afplib.afpText.BandImage;
import org.afplib.afpText.BandImageData;
import org.afplib.afpText.BandImageRG;
import org.afplib.afpText.BeginImage;
import org.afplib.afpText.BeginSegment;
import org.afplib.afpText.BeginSegmentCommand;
import org.afplib.afpText.BeginTile;
import org.afplib.afpText.BeginTransparencyMask;
import org.afplib.afpText.CAT;
import org.afplib.afpText.CDD;
import org.afplib.afpText.CFC;
import org.afplib.afpText.CFI;
import org.afplib.afpText.CFIRG;
import org.afplib.afpText.CGCSGID;
import org.afplib.afpText.CMRFidelity;
import org.afplib.afpText.CPC;
import org.afplib.afpText.CPD;
import org.afplib.afpText.CPI;
import org.afplib.afpText.CPIRG;
import org.afplib.afpText.CRCResourceManagement;
import org.afplib.afpText.CTC;
import org.afplib.afpText.CharacterRotation;
import org.afplib.afpText.ColorFidelity;
import org.afplib.afpText.ColorManagementResourceDescriptor;
import org.afplib.afpText.ColorSpecification;
import org.afplib.afpText.Comment;
import org.afplib.afpText.DBR;
import org.afplib.afpText.DIR;
import org.afplib.afpText.DXD;
import org.afplib.afpText.DataObjectFontDescriptor;
import org.afplib.afpText.DescriptorPosition;
import org.afplib.afpText.DeviceAppearance;
import org.afplib.afpText.DrawingOrderSubset;
import org.afplib.afpText.EAG;
import org.afplib.afpText.EBC;
import org.afplib.afpText.ECA;
import org.afplib.afpText.ECF;
import org.afplib.afpText.ECP;
import org.afplib.afpText.EDG;
import org.afplib.afpText.EDI;
import org.afplib.afpText.EDM;
import org.afplib.afpText.EDT;
import org.afplib.afpText.EDX;
import org.afplib.afpText.EFG;
import org.afplib.afpText.EFM;
import org.afplib.afpText.EFN;
import org.afplib.afpText.EGR;
import org.afplib.afpText.EII;
import org.afplib.afpText.EIM;
import org.afplib.afpText.EMM;
import org.afplib.afpText.EMO;
import org.afplib.afpText.ENG;
import org.afplib.afpText.EOC;
import org.afplib.afpText.EOG;
import org.afplib.afpText.EPF;
import org.afplib.afpText.EPG;
import org.afplib.afpText.EPM;
import org.afplib.afpText.EPS;
import org.afplib.afpText.EPT;
import org.afplib.afpText.ERG;
import org.afplib.afpText.ERS;
import org.afplib.afpText.ESG;
import org.afplib.afpText.ESU;
import org.afplib.afpText.EncodingSchemeID;
import org.afplib.afpText.EndImage;
import org.afplib.afpText.EndSegment;
import org.afplib.afpText.EndSegmentCommand;
import org.afplib.afpText.EndTile;
import org.afplib.afpText.EndTransparencyMask;
import org.afplib.afpText.ExtendedResourceLocalIdentifier;
import org.afplib.afpText.ExtensionFont;
import org.afplib.afpText.ExternalAlgorithm;
import org.afplib.afpText.ExternalAlgorithmRG;
import org.afplib.afpText.FGD;
import org.afplib.afpText.FNC;
import org.afplib.afpText.FND;
import org.afplib.afpText.FNG;
import org.afplib.afpText.FNI;
import org.afplib.afpText.FNIRG;
import org.afplib.afpText.FNM;
import org.afplib.afpText.FNMRG;
import org.afplib.afpText.FNN;
import org.afplib.afpText.FNNRG;
import org.afplib.afpText.FNNRG2;
import org.afplib.afpText.FNO;
import org.afplib.afpText.FNORG;
import org.afplib.afpText.FNP;
import org.afplib.afpText.FNPRG;
import org.afplib.afpText.FinishingFidelity;
import org.afplib.afpText.FinishingOperation;
import org.afplib.afpText.FontCodedGraphicCharacterSetGlobalIdentifier;
import org.afplib.afpText.FontDescriptorSpecification;
import org.afplib.afpText.FontFidelity;
import org.afplib.afpText.FontHorizontalScaleFactor;
import org.afplib.afpText.FontResolution;
import org.afplib.afpText.FullyQualifiedName;
import org.afplib.afpText.GAD;
import org.afplib.afpText.GBAR;
import org.afplib.afpText.GBIMG;
import org.afplib.afpText.GBOX;
import org.afplib.afpText.GCBEZ;
import org.afplib.afpText.GCBEZRG;
import org.afplib.afpText.GCBIMG;
import org.afplib.afpText.GCBOX;
import org.afplib.afpText.GCCBEZ;
import org.afplib.afpText.GCCBEZRG;
import org.afplib.afpText.GCCHST;
import org.afplib.afpText.GCFARC;
import org.afplib.afpText.GCFLT;
import org.afplib.afpText.GCFLTRG;
import org.afplib.afpText.GCHST;
import org.afplib.afpText.GCLINE;
import org.afplib.afpText.GCLINERG;
import org.afplib.afpText.GCMRK;
import org.afplib.afpText.GCMRKRG;
import org.afplib.afpText.GCOMT;
import org.afplib.afpText.GCPARC;
import org.afplib.afpText.GCRLINE;
import org.afplib.afpText.GCRLINERG;
import org.afplib.afpText.GDD;
import org.afplib.afpText.GEAR;
import org.afplib.afpText.GEIMG;
import org.afplib.afpText.GEPROL;
import org.afplib.afpText.GFARC;
import org.afplib.afpText.GFLT;
import org.afplib.afpText.GFLTRG;
import org.afplib.afpText.GIMD;
import org.afplib.afpText.GLINE;
import org.afplib.afpText.GLINERG;
import org.afplib.afpText.GMRK;
import org.afplib.afpText.GMRKRG;
import org.afplib.afpText.GNOP1;
import org.afplib.afpText.GPARC;
import org.afplib.afpText.GRLINE;
import org.afplib.afpText.GRLINERG;
import org.afplib.afpText.GSAP;
import org.afplib.afpText.GSBMX;
import org.afplib.afpText.GSCA;
import org.afplib.afpText.GSCC;
import org.afplib.afpText.GSCD;
import org.afplib.afpText.GSCH;
import org.afplib.afpText.GSCOL;
import org.afplib.afpText.GSCP;
import org.afplib.afpText.GSCR;
import org.afplib.afpText.GSCS;
import org.afplib.afpText.GSECOL;
import org.afplib.afpText.GSFLW;
import org.afplib.afpText.GSGCH;
import org.afplib.afpText.GSLE;
import org.afplib.afpText.GSLJ;
import org.afplib.afpText.GSLT;
import org.afplib.afpText.GSLW;
import org.afplib.afpText.GSMC;
import org.afplib.afpText.GSMP;
import org.afplib.afpText.GSMS;
import org.afplib.afpText.GSMT;
import org.afplib.afpText.GSMX;
import org.afplib.afpText.GSPCOL;
import org.afplib.afpText.GSPS;
import org.afplib.afpText.GSPT;
import org.afplib.afpText.ICP;
import org.afplib.afpText.IDD;
import org.afplib.afpText.IDESize;
import org.afplib.afpText.IDEStructure;
import org.afplib.afpText.IEL;
import org.afplib.afpText.IID;
import org.afplib.afpText.IMM;
import org.afplib.afpText.IOB;
import org.afplib.afpText.IOC;
import org.afplib.afpText.IOCAFunctionSetIdentification;
import org.afplib.afpText.IPD;
import org.afplib.afpText.IPG;
import org.afplib.afpText.IPO;
import org.afplib.afpText.IPS;
import org.afplib.afpText.IRD;
import org.afplib.afpText.ImageData;
import org.afplib.afpText.ImageEncoding;
import org.afplib.afpText.ImageLUTID;
import org.afplib.afpText.ImageResolution;
import org.afplib.afpText.ImageSize;
import org.afplib.afpText.ImageSubsampling;
import org.afplib.afpText.IncludeTile;
import org.afplib.afpText.LLE;
import org.afplib.afpText.LLERG;
import org.afplib.afpText.LNC;
import org.afplib.afpText.LND;
import org.afplib.afpText.LineData;
import org.afplib.afpText.LineDataObjectPositionMigration;
import org.afplib.afpText.LocalDateAndTimeStamp;
import org.afplib.afpText.LocaleSelector;
import org.afplib.afpText.MBC;
import org.afplib.afpText.MBCRG;
import org.afplib.afpText.MCA;
import org.afplib.afpText.MCARG;
import org.afplib.afpText.MCC;
import org.afplib.afpText.MCCRG;
import org.afplib.afpText.MCD;
import org.afplib.afpText.MCDRG;
import org.afplib.afpText.MCF;
import org.afplib.afpText.MCF1;
import org.afplib.afpText.MCF1RG;
import org.afplib.afpText.MCFRG;
import org.afplib.afpText.MDD;
import org.afplib.afpText.MDR;
import org.afplib.afpText.MDRRG;
import org.afplib.afpText.MFC;
import org.afplib.afpText.MGO;
import org.afplib.afpText.MGORG;
import org.afplib.afpText.MIO;
import org.afplib.afpText.MIORG;
import org.afplib.afpText.MMC;
import org.afplib.afpText.MMCRG;
import org.afplib.afpText.MMD;
import org.afplib.afpText.MMDRG;
import org.afplib.afpText.MMO;
import org.afplib.afpText.MMORG;
import org.afplib.afpText.MMT;
import org.afplib.afpText.MMTRG;
import org.afplib.afpText.MODCAInterchangeSet;
import org.afplib.afpText.MPG;
import org.afplib.afpText.MPGRG;
import org.afplib.afpText.MPO;
import org.afplib.afpText.MPORG;
import org.afplib.afpText.MPS;
import org.afplib.afpText.MPSRG;
import org.afplib.afpText.MSU;
import org.afplib.afpText.MSURG;
import org.afplib.afpText.MappingOption;
import org.afplib.afpText.MeasurementUnits;
import org.afplib.afpText.MediaEjectControl;
import org.afplib.afpText.MediaFidelity;
import org.afplib.afpText.MediumMapPageNumber;
import org.afplib.afpText.MediumOrientation;
import org.afplib.afpText.MetricAdjustment;
import org.afplib.afpText.Model;
import org.afplib.afpText.NOP;
import org.afplib.afpText.NOPCS;
import org.afplib.afpText.OBD;
import org.afplib.afpText.OBP;
import org.afplib.afpText.OCD;
import org.afplib.afpText.OVS;
import org.afplib.afpText.ObjectAreaSize;
import org.afplib.afpText.ObjectByteExtent;
import org.afplib.afpText.ObjectByteOffset;
import org.afplib.afpText.ObjectClassification;
import org.afplib.afpText.ObjectContainerPresentationSpaceSize;
import org.afplib.afpText.ObjectCount;
import org.afplib.afpText.ObjectFunctionSetSpecification;
import org.afplib.afpText.ObjectOffset;
import org.afplib.afpText.ObjectOriginIdentifier;
import org.afplib.afpText.ObjectStructuredFieldExtent;
import org.afplib.afpText.ObjectStructuredFieldOffset;
import org.afplib.afpText.PEC;
import org.afplib.afpText.PFC;
import org.afplib.afpText.PGD;
import org.afplib.afpText.PGP;
import org.afplib.afpText.PGP1;
import org.afplib.afpText.PGPRG;
import org.afplib.afpText.PMC;
import org.afplib.afpText.PPO;
import org.afplib.afpText.PPORG;
import org.afplib.afpText.PTD;
import org.afplib.afpText.PTD1;
import org.afplib.afpText.PTX;
import org.afplib.afpText.PageOverlayConditionalProcessing;
import org.afplib.afpText.PagePositionInformation;
import org.afplib.afpText.PresentationControl;
import org.afplib.afpText.PresentationSpaceMixingRules;
import org.afplib.afpText.PresentationSpaceResetMixing;
import org.afplib.afpText.RMB;
import org.afplib.afpText.RMI;
import org.afplib.afpText.RPS;
import org.afplib.afpText.RenderingIntent;
import org.afplib.afpText.ResourceLocalIdentifier;
import org.afplib.afpText.ResourceObjectInclude;
import org.afplib.afpText.ResourceObjectType;
import org.afplib.afpText.ResourceSectionNumber;
import org.afplib.afpText.ResourceUsageAttribute;
import org.afplib.afpText.SBI;
import org.afplib.afpText.SCFL;
import org.afplib.afpText.SEC;
import org.afplib.afpText.SIA;
import org.afplib.afpText.SIM;
import org.afplib.afpText.STC;
import org.afplib.afpText.STO;
import org.afplib.afpText.SVI;
import org.afplib.afpText.SamplingRatios;
import org.afplib.afpText.SamplingRatiosRG;
import org.afplib.afpText.SetBiLevelImageColor;
import org.afplib.afpText.TBM;
import org.afplib.afpText.TLE;
import org.afplib.afpText.TRN;
import org.afplib.afpText.TextFidelity;
import org.afplib.afpText.TextOrientation;
import org.afplib.afpText.TilePosition;
import org.afplib.afpText.TileSetColor;
import org.afplib.afpText.TileSize;
import org.afplib.afpText.TileTOC;
import org.afplib.afpText.TileTOCRG;
import org.afplib.afpText.TonerSaver;
import org.afplib.afpText.UP3iFinishingOperation;
import org.afplib.afpText.USC;
import org.afplib.afpText.UniversalDateAndTimeStamp;
import org.afplib.afpText.WindowSpecification;
import org.afplib.services.AfpTextGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class AfpTextSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AfpTextGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AfpTextPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AfpTextPackage.AMB:
				sequence_AMB(context, (AMB) semanticObject); 
				return; 
			case AfpTextPackage.AMI:
				sequence_AMI(context, (AMI) semanticObject); 
				return; 
			case AfpTextPackage.ATTRIBUTE_QUALIFIER:
				sequence_AttributeQualifier(context, (AttributeQualifier) semanticObject); 
				return; 
			case AfpTextPackage.ATTRIBUTE_VALUE:
				sequence_AttributeValue(context, (AttributeValue) semanticObject); 
				return; 
			case AfpTextPackage.BAG:
				sequence_BAG(context, (BAG) semanticObject); 
				return; 
			case AfpTextPackage.BBC:
				sequence_BBC(context, (BBC) semanticObject); 
				return; 
			case AfpTextPackage.BCA:
				sequence_BCA(context, (BCA) semanticObject); 
				return; 
			case AfpTextPackage.BCF:
				sequence_BCF(context, (BCF) semanticObject); 
				return; 
			case AfpTextPackage.BCP:
				sequence_BCP(context, (BCP) semanticObject); 
				return; 
			case AfpTextPackage.BDA:
				sequence_BDA(context, (BDA) semanticObject); 
				return; 
			case AfpTextPackage.BDD:
				sequence_BDD(context, (BDD) semanticObject); 
				return; 
			case AfpTextPackage.BDG:
				sequence_BDG(context, (BDG) semanticObject); 
				return; 
			case AfpTextPackage.BDI:
				sequence_BDI(context, (BDI) semanticObject); 
				return; 
			case AfpTextPackage.BDM:
				sequence_BDM(context, (BDM) semanticObject); 
				return; 
			case AfpTextPackage.BDT:
				sequence_BDT(context, (BDT) semanticObject); 
				return; 
			case AfpTextPackage.BDX:
				sequence_BDX(context, (BDX) semanticObject); 
				return; 
			case AfpTextPackage.BFG:
				sequence_BFG(context, (BFG) semanticObject); 
				return; 
			case AfpTextPackage.BFM:
				sequence_BFM(context, (BFM) semanticObject); 
				return; 
			case AfpTextPackage.BFN:
				sequence_BFN(context, (BFN) semanticObject); 
				return; 
			case AfpTextPackage.BGR:
				sequence_BGR(context, (BGR) semanticObject); 
				return; 
			case AfpTextPackage.BII:
				sequence_BII(context, (BII) semanticObject); 
				return; 
			case AfpTextPackage.BIM:
				sequence_BIM(context, (BIM) semanticObject); 
				return; 
			case AfpTextPackage.BLN:
				sequence_BLN(context, (BLN) semanticObject); 
				return; 
			case AfpTextPackage.BMM:
				sequence_BMM(context, (BMM) semanticObject); 
				return; 
			case AfpTextPackage.BMO:
				sequence_BMO(context, (BMO) semanticObject); 
				return; 
			case AfpTextPackage.BNG:
				sequence_BNG(context, (BNG) semanticObject); 
				return; 
			case AfpTextPackage.BOC:
				sequence_BOC(context, (BOC) semanticObject); 
				return; 
			case AfpTextPackage.BOG:
				sequence_BOG(context, (BOG) semanticObject); 
				return; 
			case AfpTextPackage.BPF:
				sequence_BPF(context, (BPF) semanticObject); 
				return; 
			case AfpTextPackage.BPG:
				sequence_BPG(context, (BPG) semanticObject); 
				return; 
			case AfpTextPackage.BPM:
				sequence_BPM(context, (BPM) semanticObject); 
				return; 
			case AfpTextPackage.BPS:
				sequence_BPS(context, (BPS) semanticObject); 
				return; 
			case AfpTextPackage.BPT:
				sequence_BPT(context, (BPT) semanticObject); 
				return; 
			case AfpTextPackage.BRG:
				sequence_BRG(context, (BRG) semanticObject); 
				return; 
			case AfpTextPackage.BRS:
				sequence_BRS(context, (BRS) semanticObject); 
				return; 
			case AfpTextPackage.BSG:
				sequence_BSG(context, (BSG) semanticObject); 
				return; 
			case AfpTextPackage.BSU:
				sequence_BSU(context, (BSU) semanticObject); 
				return; 
			case AfpTextPackage.BAND_IMAGE:
				sequence_BandImage(context, (BandImage) semanticObject); 
				return; 
			case AfpTextPackage.BAND_IMAGE_DATA:
				sequence_BandImageData(context, (BandImageData) semanticObject); 
				return; 
			case AfpTextPackage.BAND_IMAGE_RG:
				sequence_BandImageRG(context, (BandImageRG) semanticObject); 
				return; 
			case AfpTextPackage.BEGIN_IMAGE:
				sequence_BeginImage(context, (BeginImage) semanticObject); 
				return; 
			case AfpTextPackage.BEGIN_SEGMENT:
				sequence_BeginSegment(context, (BeginSegment) semanticObject); 
				return; 
			case AfpTextPackage.BEGIN_SEGMENT_COMMAND:
				sequence_BeginSegmentCommand(context, (BeginSegmentCommand) semanticObject); 
				return; 
			case AfpTextPackage.BEGIN_TILE:
				sequence_BeginTile(context, (BeginTile) semanticObject); 
				return; 
			case AfpTextPackage.BEGIN_TRANSPARENCY_MASK:
				sequence_BeginTransparencyMask(context, (BeginTransparencyMask) semanticObject); 
				return; 
			case AfpTextPackage.CAT:
				sequence_CAT(context, (CAT) semanticObject); 
				return; 
			case AfpTextPackage.CDD:
				sequence_CDD(context, (CDD) semanticObject); 
				return; 
			case AfpTextPackage.CFC:
				sequence_CFC(context, (CFC) semanticObject); 
				return; 
			case AfpTextPackage.CFI:
				sequence_CFI(context, (CFI) semanticObject); 
				return; 
			case AfpTextPackage.CFIRG:
				sequence_CFIRG(context, (CFIRG) semanticObject); 
				return; 
			case AfpTextPackage.CGCSGID:
				sequence_CGCSGID(context, (CGCSGID) semanticObject); 
				return; 
			case AfpTextPackage.CMR_FIDELITY:
				sequence_CMRFidelity(context, (CMRFidelity) semanticObject); 
				return; 
			case AfpTextPackage.CPC:
				sequence_CPC(context, (CPC) semanticObject); 
				return; 
			case AfpTextPackage.CPD:
				sequence_CPD(context, (CPD) semanticObject); 
				return; 
			case AfpTextPackage.CPI:
				sequence_CPI(context, (CPI) semanticObject); 
				return; 
			case AfpTextPackage.CPIRG:
				sequence_CPIRG(context, (CPIRG) semanticObject); 
				return; 
			case AfpTextPackage.CRC_RESOURCE_MANAGEMENT:
				sequence_CRCResourceManagement(context, (CRCResourceManagement) semanticObject); 
				return; 
			case AfpTextPackage.CTC:
				sequence_CTC(context, (CTC) semanticObject); 
				return; 
			case AfpTextPackage.CHARACTER_ROTATION:
				sequence_CharacterRotation(context, (CharacterRotation) semanticObject); 
				return; 
			case AfpTextPackage.COLOR_FIDELITY:
				sequence_ColorFidelity(context, (ColorFidelity) semanticObject); 
				return; 
			case AfpTextPackage.COLOR_MANAGEMENT_RESOURCE_DESCRIPTOR:
				sequence_ColorManagementResourceDescriptor(context, (ColorManagementResourceDescriptor) semanticObject); 
				return; 
			case AfpTextPackage.COLOR_SPECIFICATION:
				sequence_ColorSpecification(context, (ColorSpecification) semanticObject); 
				return; 
			case AfpTextPackage.COMMENT:
				sequence_Comment(context, (Comment) semanticObject); 
				return; 
			case AfpTextPackage.DBR:
				sequence_DBR(context, (DBR) semanticObject); 
				return; 
			case AfpTextPackage.DIR:
				sequence_DIR(context, (DIR) semanticObject); 
				return; 
			case AfpTextPackage.DXD:
				sequence_DXD(context, (DXD) semanticObject); 
				return; 
			case AfpTextPackage.DATA_OBJECT_FONT_DESCRIPTOR:
				sequence_DataObjectFontDescriptor(context, (DataObjectFontDescriptor) semanticObject); 
				return; 
			case AfpTextPackage.DESCRIPTOR_POSITION:
				sequence_DescriptorPosition(context, (DescriptorPosition) semanticObject); 
				return; 
			case AfpTextPackage.DEVICE_APPEARANCE:
				sequence_DeviceAppearance(context, (DeviceAppearance) semanticObject); 
				return; 
			case AfpTextPackage.DRAWING_ORDER_SUBSET:
				sequence_DrawingOrderSubset(context, (DrawingOrderSubset) semanticObject); 
				return; 
			case AfpTextPackage.EAG:
				sequence_EAG(context, (EAG) semanticObject); 
				return; 
			case AfpTextPackage.EBC:
				sequence_EBC(context, (EBC) semanticObject); 
				return; 
			case AfpTextPackage.ECA:
				sequence_ECA(context, (ECA) semanticObject); 
				return; 
			case AfpTextPackage.ECF:
				sequence_ECF(context, (ECF) semanticObject); 
				return; 
			case AfpTextPackage.ECP:
				sequence_ECP(context, (ECP) semanticObject); 
				return; 
			case AfpTextPackage.EDG:
				sequence_EDG(context, (EDG) semanticObject); 
				return; 
			case AfpTextPackage.EDI:
				sequence_EDI(context, (EDI) semanticObject); 
				return; 
			case AfpTextPackage.EDM:
				sequence_EDM(context, (EDM) semanticObject); 
				return; 
			case AfpTextPackage.EDT:
				sequence_EDT(context, (EDT) semanticObject); 
				return; 
			case AfpTextPackage.EDX:
				sequence_EDX(context, (EDX) semanticObject); 
				return; 
			case AfpTextPackage.EFG:
				sequence_EFG(context, (EFG) semanticObject); 
				return; 
			case AfpTextPackage.EFM:
				sequence_EFM(context, (EFM) semanticObject); 
				return; 
			case AfpTextPackage.EFN:
				sequence_EFN(context, (EFN) semanticObject); 
				return; 
			case AfpTextPackage.EGR:
				sequence_EGR(context, (EGR) semanticObject); 
				return; 
			case AfpTextPackage.EII:
				sequence_EII(context, (EII) semanticObject); 
				return; 
			case AfpTextPackage.EIM:
				sequence_EIM(context, (EIM) semanticObject); 
				return; 
			case AfpTextPackage.EMM:
				sequence_EMM(context, (EMM) semanticObject); 
				return; 
			case AfpTextPackage.EMO:
				sequence_EMO(context, (EMO) semanticObject); 
				return; 
			case AfpTextPackage.ENG:
				sequence_ENG(context, (ENG) semanticObject); 
				return; 
			case AfpTextPackage.EOC:
				sequence_EOC(context, (EOC) semanticObject); 
				return; 
			case AfpTextPackage.EOG:
				sequence_EOG(context, (EOG) semanticObject); 
				return; 
			case AfpTextPackage.EPF:
				sequence_EPF(context, (EPF) semanticObject); 
				return; 
			case AfpTextPackage.EPG:
				sequence_EPG(context, (EPG) semanticObject); 
				return; 
			case AfpTextPackage.EPM:
				sequence_EPM(context, (EPM) semanticObject); 
				return; 
			case AfpTextPackage.EPS:
				sequence_EPS(context, (EPS) semanticObject); 
				return; 
			case AfpTextPackage.EPT:
				sequence_EPT(context, (EPT) semanticObject); 
				return; 
			case AfpTextPackage.ERG:
				sequence_ERG(context, (ERG) semanticObject); 
				return; 
			case AfpTextPackage.ERS:
				sequence_ERS(context, (ERS) semanticObject); 
				return; 
			case AfpTextPackage.ESG:
				sequence_ESG(context, (ESG) semanticObject); 
				return; 
			case AfpTextPackage.ESU:
				sequence_ESU(context, (ESU) semanticObject); 
				return; 
			case AfpTextPackage.ENCODING_SCHEME_ID:
				sequence_EncodingSchemeID(context, (EncodingSchemeID) semanticObject); 
				return; 
			case AfpTextPackage.END_IMAGE:
				sequence_EndImage(context, (EndImage) semanticObject); 
				return; 
			case AfpTextPackage.END_SEGMENT:
				sequence_EndSegment(context, (EndSegment) semanticObject); 
				return; 
			case AfpTextPackage.END_SEGMENT_COMMAND:
				sequence_EndSegmentCommand(context, (EndSegmentCommand) semanticObject); 
				return; 
			case AfpTextPackage.END_TILE:
				sequence_EndTile(context, (EndTile) semanticObject); 
				return; 
			case AfpTextPackage.END_TRANSPARENCY_MASK:
				sequence_EndTransparencyMask(context, (EndTransparencyMask) semanticObject); 
				return; 
			case AfpTextPackage.EXTENDED_RESOURCE_LOCAL_IDENTIFIER:
				sequence_ExtendedResourceLocalIdentifier(context, (ExtendedResourceLocalIdentifier) semanticObject); 
				return; 
			case AfpTextPackage.EXTENSION_FONT:
				sequence_ExtensionFont(context, (ExtensionFont) semanticObject); 
				return; 
			case AfpTextPackage.EXTERNAL_ALGORITHM:
				sequence_ExternalAlgorithm(context, (ExternalAlgorithm) semanticObject); 
				return; 
			case AfpTextPackage.EXTERNAL_ALGORITHM_RG:
				sequence_ExternalAlgorithmRG(context, (ExternalAlgorithmRG) semanticObject); 
				return; 
			case AfpTextPackage.FGD:
				sequence_FGD(context, (FGD) semanticObject); 
				return; 
			case AfpTextPackage.FNC:
				sequence_FNC(context, (FNC) semanticObject); 
				return; 
			case AfpTextPackage.FND:
				sequence_FND(context, (FND) semanticObject); 
				return; 
			case AfpTextPackage.FNG:
				sequence_FNG(context, (FNG) semanticObject); 
				return; 
			case AfpTextPackage.FNI:
				sequence_FNI(context, (FNI) semanticObject); 
				return; 
			case AfpTextPackage.FNIRG:
				sequence_FNIRG(context, (FNIRG) semanticObject); 
				return; 
			case AfpTextPackage.FNM:
				sequence_FNM(context, (FNM) semanticObject); 
				return; 
			case AfpTextPackage.FNMRG:
				sequence_FNMRG(context, (FNMRG) semanticObject); 
				return; 
			case AfpTextPackage.FNN:
				sequence_FNN(context, (FNN) semanticObject); 
				return; 
			case AfpTextPackage.FNNRG:
				sequence_FNNRG(context, (FNNRG) semanticObject); 
				return; 
			case AfpTextPackage.FNNRG2:
				sequence_FNNRG2(context, (FNNRG2) semanticObject); 
				return; 
			case AfpTextPackage.FNO:
				sequence_FNO(context, (FNO) semanticObject); 
				return; 
			case AfpTextPackage.FNORG:
				sequence_FNORG(context, (FNORG) semanticObject); 
				return; 
			case AfpTextPackage.FNP:
				sequence_FNP(context, (FNP) semanticObject); 
				return; 
			case AfpTextPackage.FNPRG:
				sequence_FNPRG(context, (FNPRG) semanticObject); 
				return; 
			case AfpTextPackage.FINISHING_FIDELITY:
				sequence_FinishingFidelity(context, (FinishingFidelity) semanticObject); 
				return; 
			case AfpTextPackage.FINISHING_OPERATION:
				sequence_FinishingOperation(context, (FinishingOperation) semanticObject); 
				return; 
			case AfpTextPackage.FONT_CODED_GRAPHIC_CHARACTER_SET_GLOBAL_IDENTIFIER:
				sequence_FontCodedGraphicCharacterSetGlobalIdentifier(context, (FontCodedGraphicCharacterSetGlobalIdentifier) semanticObject); 
				return; 
			case AfpTextPackage.FONT_DESCRIPTOR_SPECIFICATION:
				sequence_FontDescriptorSpecification(context, (FontDescriptorSpecification) semanticObject); 
				return; 
			case AfpTextPackage.FONT_FIDELITY:
				sequence_FontFidelity(context, (FontFidelity) semanticObject); 
				return; 
			case AfpTextPackage.FONT_HORIZONTAL_SCALE_FACTOR:
				sequence_FontHorizontalScaleFactor(context, (FontHorizontalScaleFactor) semanticObject); 
				return; 
			case AfpTextPackage.FONT_RESOLUTION:
				sequence_FontResolution(context, (FontResolution) semanticObject); 
				return; 
			case AfpTextPackage.FULLY_QUALIFIED_NAME:
				sequence_FullyQualifiedName(context, (FullyQualifiedName) semanticObject); 
				return; 
			case AfpTextPackage.GAD:
				sequence_GAD(context, (GAD) semanticObject); 
				return; 
			case AfpTextPackage.GBAR:
				sequence_GBAR(context, (GBAR) semanticObject); 
				return; 
			case AfpTextPackage.GBIMG:
				sequence_GBIMG(context, (GBIMG) semanticObject); 
				return; 
			case AfpTextPackage.GBOX:
				sequence_GBOX(context, (GBOX) semanticObject); 
				return; 
			case AfpTextPackage.GCBEZ:
				sequence_GCBEZ(context, (GCBEZ) semanticObject); 
				return; 
			case AfpTextPackage.GCBEZRG:
				sequence_GCBEZRG(context, (GCBEZRG) semanticObject); 
				return; 
			case AfpTextPackage.GCBIMG:
				sequence_GCBIMG(context, (GCBIMG) semanticObject); 
				return; 
			case AfpTextPackage.GCBOX:
				sequence_GCBOX(context, (GCBOX) semanticObject); 
				return; 
			case AfpTextPackage.GCCBEZ:
				sequence_GCCBEZ(context, (GCCBEZ) semanticObject); 
				return; 
			case AfpTextPackage.GCCBEZRG:
				sequence_GCCBEZRG(context, (GCCBEZRG) semanticObject); 
				return; 
			case AfpTextPackage.GCCHST:
				sequence_GCCHST(context, (GCCHST) semanticObject); 
				return; 
			case AfpTextPackage.GCFARC:
				sequence_GCFARC(context, (GCFARC) semanticObject); 
				return; 
			case AfpTextPackage.GCFLT:
				sequence_GCFLT(context, (GCFLT) semanticObject); 
				return; 
			case AfpTextPackage.GCFLTRG:
				sequence_GCFLTRG(context, (GCFLTRG) semanticObject); 
				return; 
			case AfpTextPackage.GCHST:
				sequence_GCHST(context, (GCHST) semanticObject); 
				return; 
			case AfpTextPackage.GCLINE:
				sequence_GCLINE(context, (GCLINE) semanticObject); 
				return; 
			case AfpTextPackage.GCLINERG:
				sequence_GCLINERG(context, (GCLINERG) semanticObject); 
				return; 
			case AfpTextPackage.GCMRK:
				sequence_GCMRK(context, (GCMRK) semanticObject); 
				return; 
			case AfpTextPackage.GCMRKRG:
				sequence_GCMRKRG(context, (GCMRKRG) semanticObject); 
				return; 
			case AfpTextPackage.GCOMT:
				sequence_GCOMT(context, (GCOMT) semanticObject); 
				return; 
			case AfpTextPackage.GCPARC:
				sequence_GCPARC(context, (GCPARC) semanticObject); 
				return; 
			case AfpTextPackage.GCRLINE:
				sequence_GCRLINE(context, (GCRLINE) semanticObject); 
				return; 
			case AfpTextPackage.GCRLINERG:
				sequence_GCRLINERG(context, (GCRLINERG) semanticObject); 
				return; 
			case AfpTextPackage.GDD:
				sequence_GDD(context, (GDD) semanticObject); 
				return; 
			case AfpTextPackage.GEAR:
				sequence_GEAR(context, (GEAR) semanticObject); 
				return; 
			case AfpTextPackage.GEIMG:
				sequence_GEIMG(context, (GEIMG) semanticObject); 
				return; 
			case AfpTextPackage.GEPROL:
				sequence_GEPROL(context, (GEPROL) semanticObject); 
				return; 
			case AfpTextPackage.GFARC:
				sequence_GFARC(context, (GFARC) semanticObject); 
				return; 
			case AfpTextPackage.GFLT:
				sequence_GFLT(context, (GFLT) semanticObject); 
				return; 
			case AfpTextPackage.GFLTRG:
				sequence_GFLTRG(context, (GFLTRG) semanticObject); 
				return; 
			case AfpTextPackage.GIMD:
				sequence_GIMD(context, (GIMD) semanticObject); 
				return; 
			case AfpTextPackage.GLINE:
				sequence_GLINE(context, (GLINE) semanticObject); 
				return; 
			case AfpTextPackage.GLINERG:
				sequence_GLINERG(context, (GLINERG) semanticObject); 
				return; 
			case AfpTextPackage.GMRK:
				sequence_GMRK(context, (GMRK) semanticObject); 
				return; 
			case AfpTextPackage.GMRKRG:
				sequence_GMRKRG(context, (GMRKRG) semanticObject); 
				return; 
			case AfpTextPackage.GNOP1:
				sequence_GNOP1(context, (GNOP1) semanticObject); 
				return; 
			case AfpTextPackage.GPARC:
				sequence_GPARC(context, (GPARC) semanticObject); 
				return; 
			case AfpTextPackage.GRLINE:
				sequence_GRLINE(context, (GRLINE) semanticObject); 
				return; 
			case AfpTextPackage.GRLINERG:
				sequence_GRLINERG(context, (GRLINERG) semanticObject); 
				return; 
			case AfpTextPackage.GSAP:
				sequence_GSAP(context, (GSAP) semanticObject); 
				return; 
			case AfpTextPackage.GSBMX:
				sequence_GSBMX(context, (GSBMX) semanticObject); 
				return; 
			case AfpTextPackage.GSCA:
				sequence_GSCA(context, (GSCA) semanticObject); 
				return; 
			case AfpTextPackage.GSCC:
				sequence_GSCC(context, (GSCC) semanticObject); 
				return; 
			case AfpTextPackage.GSCD:
				sequence_GSCD(context, (GSCD) semanticObject); 
				return; 
			case AfpTextPackage.GSCH:
				sequence_GSCH(context, (GSCH) semanticObject); 
				return; 
			case AfpTextPackage.GSCOL:
				sequence_GSCOL(context, (GSCOL) semanticObject); 
				return; 
			case AfpTextPackage.GSCP:
				sequence_GSCP(context, (GSCP) semanticObject); 
				return; 
			case AfpTextPackage.GSCR:
				sequence_GSCR(context, (GSCR) semanticObject); 
				return; 
			case AfpTextPackage.GSCS:
				sequence_GSCS(context, (GSCS) semanticObject); 
				return; 
			case AfpTextPackage.GSECOL:
				sequence_GSECOL(context, (GSECOL) semanticObject); 
				return; 
			case AfpTextPackage.GSFLW:
				sequence_GSFLW(context, (GSFLW) semanticObject); 
				return; 
			case AfpTextPackage.GSGCH:
				sequence_GSGCH(context, (GSGCH) semanticObject); 
				return; 
			case AfpTextPackage.GSLE:
				sequence_GSLE(context, (GSLE) semanticObject); 
				return; 
			case AfpTextPackage.GSLJ:
				sequence_GSLJ(context, (GSLJ) semanticObject); 
				return; 
			case AfpTextPackage.GSLT:
				sequence_GSLT(context, (GSLT) semanticObject); 
				return; 
			case AfpTextPackage.GSLW:
				sequence_GSLW(context, (GSLW) semanticObject); 
				return; 
			case AfpTextPackage.GSMC:
				sequence_GSMC(context, (GSMC) semanticObject); 
				return; 
			case AfpTextPackage.GSMP:
				sequence_GSMP(context, (GSMP) semanticObject); 
				return; 
			case AfpTextPackage.GSMS:
				sequence_GSMS(context, (GSMS) semanticObject); 
				return; 
			case AfpTextPackage.GSMT:
				sequence_GSMT(context, (GSMT) semanticObject); 
				return; 
			case AfpTextPackage.GSMX:
				sequence_GSMX(context, (GSMX) semanticObject); 
				return; 
			case AfpTextPackage.GSPCOL:
				sequence_GSPCOL(context, (GSPCOL) semanticObject); 
				return; 
			case AfpTextPackage.GSPS:
				sequence_GSPS(context, (GSPS) semanticObject); 
				return; 
			case AfpTextPackage.GSPT:
				sequence_GSPT(context, (GSPT) semanticObject); 
				return; 
			case AfpTextPackage.ICP:
				sequence_ICP(context, (ICP) semanticObject); 
				return; 
			case AfpTextPackage.IDD:
				sequence_IDD(context, (IDD) semanticObject); 
				return; 
			case AfpTextPackage.IDE_SIZE:
				sequence_IDESize(context, (IDESize) semanticObject); 
				return; 
			case AfpTextPackage.IDE_STRUCTURE:
				sequence_IDEStructure(context, (IDEStructure) semanticObject); 
				return; 
			case AfpTextPackage.IEL:
				sequence_IEL(context, (IEL) semanticObject); 
				return; 
			case AfpTextPackage.IID:
				sequence_IID(context, (IID) semanticObject); 
				return; 
			case AfpTextPackage.IMM:
				sequence_IMM(context, (IMM) semanticObject); 
				return; 
			case AfpTextPackage.IOB:
				sequence_IOB(context, (IOB) semanticObject); 
				return; 
			case AfpTextPackage.IOC:
				sequence_IOC(context, (IOC) semanticObject); 
				return; 
			case AfpTextPackage.IOCA_FUNCTION_SET_IDENTIFICATION:
				sequence_IOCAFunctionSetIdentification(context, (IOCAFunctionSetIdentification) semanticObject); 
				return; 
			case AfpTextPackage.IPD:
				sequence_IPD(context, (IPD) semanticObject); 
				return; 
			case AfpTextPackage.IPG:
				sequence_IPG(context, (IPG) semanticObject); 
				return; 
			case AfpTextPackage.IPO:
				sequence_IPO(context, (IPO) semanticObject); 
				return; 
			case AfpTextPackage.IPS:
				sequence_IPS(context, (IPS) semanticObject); 
				return; 
			case AfpTextPackage.IRD:
				sequence_IRD(context, (IRD) semanticObject); 
				return; 
			case AfpTextPackage.IMAGE_DATA:
				sequence_ImageData(context, (ImageData) semanticObject); 
				return; 
			case AfpTextPackage.IMAGE_ENCODING:
				sequence_ImageEncoding(context, (ImageEncoding) semanticObject); 
				return; 
			case AfpTextPackage.IMAGE_LUTID:
				sequence_ImageLUTID(context, (ImageLUTID) semanticObject); 
				return; 
			case AfpTextPackage.IMAGE_RESOLUTION:
				sequence_ImageResolution(context, (ImageResolution) semanticObject); 
				return; 
			case AfpTextPackage.IMAGE_SIZE:
				sequence_ImageSize(context, (ImageSize) semanticObject); 
				return; 
			case AfpTextPackage.IMAGE_SUBSAMPLING:
				sequence_ImageSubsampling(context, (ImageSubsampling) semanticObject); 
				return; 
			case AfpTextPackage.INCLUDE_TILE:
				sequence_IncludeTile(context, (IncludeTile) semanticObject); 
				return; 
			case AfpTextPackage.LLE:
				sequence_LLE(context, (LLE) semanticObject); 
				return; 
			case AfpTextPackage.LLERG:
				sequence_LLERG(context, (LLERG) semanticObject); 
				return; 
			case AfpTextPackage.LNC:
				sequence_LNC(context, (LNC) semanticObject); 
				return; 
			case AfpTextPackage.LND:
				sequence_LND(context, (LND) semanticObject); 
				return; 
			case AfpTextPackage.LINE_DATA:
				sequence_LineData(context, (LineData) semanticObject); 
				return; 
			case AfpTextPackage.LINE_DATA_OBJECT_POSITION_MIGRATION:
				sequence_LineDataObjectPositionMigration(context, (LineDataObjectPositionMigration) semanticObject); 
				return; 
			case AfpTextPackage.LOCAL_DATE_AND_TIME_STAMP:
				sequence_LocalDateAndTimeStamp(context, (LocalDateAndTimeStamp) semanticObject); 
				return; 
			case AfpTextPackage.LOCALE_SELECTOR:
				sequence_LocaleSelector(context, (LocaleSelector) semanticObject); 
				return; 
			case AfpTextPackage.MBC:
				sequence_MBC(context, (MBC) semanticObject); 
				return; 
			case AfpTextPackage.MBCRG:
				sequence_MBCRG(context, (MBCRG) semanticObject); 
				return; 
			case AfpTextPackage.MCA:
				sequence_MCA(context, (MCA) semanticObject); 
				return; 
			case AfpTextPackage.MCARG:
				sequence_MCARG(context, (MCARG) semanticObject); 
				return; 
			case AfpTextPackage.MCC:
				sequence_MCC(context, (MCC) semanticObject); 
				return; 
			case AfpTextPackage.MCCRG:
				sequence_MCCRG(context, (MCCRG) semanticObject); 
				return; 
			case AfpTextPackage.MCD:
				sequence_MCD(context, (MCD) semanticObject); 
				return; 
			case AfpTextPackage.MCDRG:
				sequence_MCDRG(context, (MCDRG) semanticObject); 
				return; 
			case AfpTextPackage.MCF:
				sequence_MCF(context, (MCF) semanticObject); 
				return; 
			case AfpTextPackage.MCF1:
				sequence_MCF1(context, (MCF1) semanticObject); 
				return; 
			case AfpTextPackage.MCF1RG:
				sequence_MCF1RG(context, (MCF1RG) semanticObject); 
				return; 
			case AfpTextPackage.MCFRG:
				sequence_MCFRG(context, (MCFRG) semanticObject); 
				return; 
			case AfpTextPackage.MDD:
				sequence_MDD(context, (MDD) semanticObject); 
				return; 
			case AfpTextPackage.MDR:
				sequence_MDR(context, (MDR) semanticObject); 
				return; 
			case AfpTextPackage.MDRRG:
				sequence_MDRRG(context, (MDRRG) semanticObject); 
				return; 
			case AfpTextPackage.MFC:
				sequence_MFC(context, (MFC) semanticObject); 
				return; 
			case AfpTextPackage.MGO:
				sequence_MGO(context, (MGO) semanticObject); 
				return; 
			case AfpTextPackage.MGORG:
				sequence_MGORG(context, (MGORG) semanticObject); 
				return; 
			case AfpTextPackage.MIO:
				sequence_MIO(context, (MIO) semanticObject); 
				return; 
			case AfpTextPackage.MIORG:
				sequence_MIORG(context, (MIORG) semanticObject); 
				return; 
			case AfpTextPackage.MMC:
				sequence_MMC(context, (MMC) semanticObject); 
				return; 
			case AfpTextPackage.MMCRG:
				sequence_MMCRG(context, (MMCRG) semanticObject); 
				return; 
			case AfpTextPackage.MMD:
				sequence_MMD(context, (MMD) semanticObject); 
				return; 
			case AfpTextPackage.MMDRG:
				sequence_MMDRG(context, (MMDRG) semanticObject); 
				return; 
			case AfpTextPackage.MMO:
				sequence_MMO(context, (MMO) semanticObject); 
				return; 
			case AfpTextPackage.MMORG:
				sequence_MMORG(context, (MMORG) semanticObject); 
				return; 
			case AfpTextPackage.MMT:
				sequence_MMT(context, (MMT) semanticObject); 
				return; 
			case AfpTextPackage.MMTRG:
				sequence_MMTRG(context, (MMTRG) semanticObject); 
				return; 
			case AfpTextPackage.MODCA_INTERCHANGE_SET:
				sequence_MODCAInterchangeSet(context, (MODCAInterchangeSet) semanticObject); 
				return; 
			case AfpTextPackage.MPG:
				sequence_MPG(context, (MPG) semanticObject); 
				return; 
			case AfpTextPackage.MPGRG:
				sequence_MPGRG(context, (MPGRG) semanticObject); 
				return; 
			case AfpTextPackage.MPO:
				sequence_MPO(context, (MPO) semanticObject); 
				return; 
			case AfpTextPackage.MPORG:
				sequence_MPORG(context, (MPORG) semanticObject); 
				return; 
			case AfpTextPackage.MPS:
				sequence_MPS(context, (MPS) semanticObject); 
				return; 
			case AfpTextPackage.MPSRG:
				sequence_MPSRG(context, (MPSRG) semanticObject); 
				return; 
			case AfpTextPackage.MSU:
				sequence_MSU(context, (MSU) semanticObject); 
				return; 
			case AfpTextPackage.MSURG:
				sequence_MSURG(context, (MSURG) semanticObject); 
				return; 
			case AfpTextPackage.MAPPING_OPTION:
				sequence_MappingOption(context, (MappingOption) semanticObject); 
				return; 
			case AfpTextPackage.MEASUREMENT_UNITS:
				sequence_MeasurementUnits(context, (MeasurementUnits) semanticObject); 
				return; 
			case AfpTextPackage.MEDIA_EJECT_CONTROL:
				sequence_MediaEjectControl(context, (MediaEjectControl) semanticObject); 
				return; 
			case AfpTextPackage.MEDIA_FIDELITY:
				sequence_MediaFidelity(context, (MediaFidelity) semanticObject); 
				return; 
			case AfpTextPackage.MEDIUM_MAP_PAGE_NUMBER:
				sequence_MediumMapPageNumber(context, (MediumMapPageNumber) semanticObject); 
				return; 
			case AfpTextPackage.MEDIUM_ORIENTATION:
				sequence_MediumOrientation(context, (MediumOrientation) semanticObject); 
				return; 
			case AfpTextPackage.METRIC_ADJUSTMENT:
				sequence_MetricAdjustment(context, (MetricAdjustment) semanticObject); 
				return; 
			case AfpTextPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AfpTextPackage.NOP:
				sequence_NOP(context, (NOP) semanticObject); 
				return; 
			case AfpTextPackage.NOPCS:
				sequence_NOPCS(context, (NOPCS) semanticObject); 
				return; 
			case AfpTextPackage.OBD:
				sequence_OBD(context, (OBD) semanticObject); 
				return; 
			case AfpTextPackage.OBP:
				sequence_OBP(context, (OBP) semanticObject); 
				return; 
			case AfpTextPackage.OCD:
				sequence_OCD(context, (OCD) semanticObject); 
				return; 
			case AfpTextPackage.OVS:
				sequence_OVS(context, (OVS) semanticObject); 
				return; 
			case AfpTextPackage.OBJECT_AREA_SIZE:
				sequence_ObjectAreaSize(context, (ObjectAreaSize) semanticObject); 
				return; 
			case AfpTextPackage.OBJECT_BYTE_EXTENT:
				sequence_ObjectByteExtent(context, (ObjectByteExtent) semanticObject); 
				return; 
			case AfpTextPackage.OBJECT_BYTE_OFFSET:
				sequence_ObjectByteOffset(context, (ObjectByteOffset) semanticObject); 
				return; 
			case AfpTextPackage.OBJECT_CLASSIFICATION:
				sequence_ObjectClassification(context, (ObjectClassification) semanticObject); 
				return; 
			case AfpTextPackage.OBJECT_CONTAINER_PRESENTATION_SPACE_SIZE:
				sequence_ObjectContainerPresentationSpaceSize(context, (ObjectContainerPresentationSpaceSize) semanticObject); 
				return; 
			case AfpTextPackage.OBJECT_COUNT:
				sequence_ObjectCount(context, (ObjectCount) semanticObject); 
				return; 
			case AfpTextPackage.OBJECT_FUNCTION_SET_SPECIFICATION:
				sequence_ObjectFunctionSetSpecification(context, (ObjectFunctionSetSpecification) semanticObject); 
				return; 
			case AfpTextPackage.OBJECT_OFFSET:
				sequence_ObjectOffset(context, (ObjectOffset) semanticObject); 
				return; 
			case AfpTextPackage.OBJECT_ORIGIN_IDENTIFIER:
				sequence_ObjectOriginIdentifier(context, (ObjectOriginIdentifier) semanticObject); 
				return; 
			case AfpTextPackage.OBJECT_STRUCTURED_FIELD_EXTENT:
				sequence_ObjectStructuredFieldExtent(context, (ObjectStructuredFieldExtent) semanticObject); 
				return; 
			case AfpTextPackage.OBJECT_STRUCTURED_FIELD_OFFSET:
				sequence_ObjectStructuredFieldOffset(context, (ObjectStructuredFieldOffset) semanticObject); 
				return; 
			case AfpTextPackage.PEC:
				sequence_PEC(context, (PEC) semanticObject); 
				return; 
			case AfpTextPackage.PFC:
				sequence_PFC(context, (PFC) semanticObject); 
				return; 
			case AfpTextPackage.PGD:
				sequence_PGD(context, (PGD) semanticObject); 
				return; 
			case AfpTextPackage.PGP:
				sequence_PGP(context, (PGP) semanticObject); 
				return; 
			case AfpTextPackage.PGP1:
				sequence_PGP1(context, (PGP1) semanticObject); 
				return; 
			case AfpTextPackage.PGPRG:
				sequence_PGPRG(context, (PGPRG) semanticObject); 
				return; 
			case AfpTextPackage.PMC:
				sequence_PMC(context, (PMC) semanticObject); 
				return; 
			case AfpTextPackage.PPO:
				sequence_PPO(context, (PPO) semanticObject); 
				return; 
			case AfpTextPackage.PPORG:
				sequence_PPORG(context, (PPORG) semanticObject); 
				return; 
			case AfpTextPackage.PTD:
				sequence_PTD(context, (PTD) semanticObject); 
				return; 
			case AfpTextPackage.PTD1:
				sequence_PTD1(context, (PTD1) semanticObject); 
				return; 
			case AfpTextPackage.PTX:
				sequence_PTX(context, (PTX) semanticObject); 
				return; 
			case AfpTextPackage.PAGE_OVERLAY_CONDITIONAL_PROCESSING:
				sequence_PageOverlayConditionalProcessing(context, (PageOverlayConditionalProcessing) semanticObject); 
				return; 
			case AfpTextPackage.PAGE_POSITION_INFORMATION:
				sequence_PagePositionInformation(context, (PagePositionInformation) semanticObject); 
				return; 
			case AfpTextPackage.PRESENTATION_CONTROL:
				sequence_PresentationControl(context, (PresentationControl) semanticObject); 
				return; 
			case AfpTextPackage.PRESENTATION_SPACE_MIXING_RULES:
				sequence_PresentationSpaceMixingRules(context, (PresentationSpaceMixingRules) semanticObject); 
				return; 
			case AfpTextPackage.PRESENTATION_SPACE_RESET_MIXING:
				sequence_PresentationSpaceResetMixing(context, (PresentationSpaceResetMixing) semanticObject); 
				return; 
			case AfpTextPackage.RMB:
				sequence_RMB(context, (RMB) semanticObject); 
				return; 
			case AfpTextPackage.RMI:
				sequence_RMI(context, (RMI) semanticObject); 
				return; 
			case AfpTextPackage.RPS:
				sequence_RPS(context, (RPS) semanticObject); 
				return; 
			case AfpTextPackage.RENDERING_INTENT:
				sequence_RenderingIntent(context, (RenderingIntent) semanticObject); 
				return; 
			case AfpTextPackage.RESOURCE_LOCAL_IDENTIFIER:
				sequence_ResourceLocalIdentifier(context, (ResourceLocalIdentifier) semanticObject); 
				return; 
			case AfpTextPackage.RESOURCE_OBJECT_INCLUDE:
				sequence_ResourceObjectInclude(context, (ResourceObjectInclude) semanticObject); 
				return; 
			case AfpTextPackage.RESOURCE_OBJECT_TYPE:
				sequence_ResourceObjectType(context, (ResourceObjectType) semanticObject); 
				return; 
			case AfpTextPackage.RESOURCE_SECTION_NUMBER:
				sequence_ResourceSectionNumber(context, (ResourceSectionNumber) semanticObject); 
				return; 
			case AfpTextPackage.RESOURCE_USAGE_ATTRIBUTE:
				sequence_ResourceUsageAttribute(context, (ResourceUsageAttribute) semanticObject); 
				return; 
			case AfpTextPackage.SBI:
				sequence_SBI(context, (SBI) semanticObject); 
				return; 
			case AfpTextPackage.SCFL:
				sequence_SCFL(context, (SCFL) semanticObject); 
				return; 
			case AfpTextPackage.SEC:
				sequence_SEC(context, (SEC) semanticObject); 
				return; 
			case AfpTextPackage.SIA:
				sequence_SIA(context, (SIA) semanticObject); 
				return; 
			case AfpTextPackage.SIM:
				sequence_SIM(context, (SIM) semanticObject); 
				return; 
			case AfpTextPackage.STC:
				sequence_STC(context, (STC) semanticObject); 
				return; 
			case AfpTextPackage.STO:
				sequence_STO(context, (STO) semanticObject); 
				return; 
			case AfpTextPackage.SVI:
				sequence_SVI(context, (SVI) semanticObject); 
				return; 
			case AfpTextPackage.SAMPLING_RATIOS:
				sequence_SamplingRatios(context, (SamplingRatios) semanticObject); 
				return; 
			case AfpTextPackage.SAMPLING_RATIOS_RG:
				sequence_SamplingRatiosRG(context, (SamplingRatiosRG) semanticObject); 
				return; 
			case AfpTextPackage.SET_BI_LEVEL_IMAGE_COLOR:
				sequence_SetBiLevelImageColor(context, (SetBiLevelImageColor) semanticObject); 
				return; 
			case AfpTextPackage.TBM:
				sequence_TBM(context, (TBM) semanticObject); 
				return; 
			case AfpTextPackage.TLE:
				sequence_TLE(context, (TLE) semanticObject); 
				return; 
			case AfpTextPackage.TRN:
				sequence_TRN(context, (TRN) semanticObject); 
				return; 
			case AfpTextPackage.TEXT_FIDELITY:
				sequence_TextFidelity(context, (TextFidelity) semanticObject); 
				return; 
			case AfpTextPackage.TEXT_ORIENTATION:
				sequence_TextOrientation(context, (TextOrientation) semanticObject); 
				return; 
			case AfpTextPackage.TILE_POSITION:
				sequence_TilePosition(context, (TilePosition) semanticObject); 
				return; 
			case AfpTextPackage.TILE_SET_COLOR:
				sequence_TileSetColor(context, (TileSetColor) semanticObject); 
				return; 
			case AfpTextPackage.TILE_SIZE:
				sequence_TileSize(context, (TileSize) semanticObject); 
				return; 
			case AfpTextPackage.TILE_TOC:
				sequence_TileTOC(context, (TileTOC) semanticObject); 
				return; 
			case AfpTextPackage.TILE_TOCRG:
				sequence_TileTOCRG(context, (TileTOCRG) semanticObject); 
				return; 
			case AfpTextPackage.TONER_SAVER:
				sequence_TonerSaver(context, (TonerSaver) semanticObject); 
				return; 
			case AfpTextPackage.UP_3I_FINISHING_OPERATION:
				sequence_UP3iFinishingOperation(context, (UP3iFinishingOperation) semanticObject); 
				return; 
			case AfpTextPackage.USC:
				sequence_USC(context, (USC) semanticObject); 
				return; 
			case AfpTextPackage.UNIVERSAL_DATE_AND_TIME_STAMP:
				sequence_UniversalDateAndTimeStamp(context, (UniversalDateAndTimeStamp) semanticObject); 
				return; 
			case AfpTextPackage.WINDOW_SPECIFICATION:
				sequence_WindowSpecification(context, (WindowSpecification) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     triplet returns AMB
	 *     AMB returns AMB
	 *
	 * Constraint:
	 *     DSPLCMNT=EINTEGEROBJECT?
	 */
	protected void sequence_AMB(ISerializationContext context, AMB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns AMI
	 *     AMI returns AMI
	 *
	 * Constraint:
	 *     DSPLCMNT=EINTEGEROBJECT?
	 */
	protected void sequence_AMI(ISerializationContext context, AMI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns AttributeQualifier
	 *     AttributeQualifier returns AttributeQualifier
	 *
	 * Constraint:
	 *     (SeqNum=EINTEGEROBJECT? LevNum=EINTEGEROBJECT?)
	 */
	protected void sequence_AttributeQualifier(ISerializationContext context, AttributeQualifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns AttributeValue
	 *     AttributeValue returns AttributeValue
	 *
	 * Constraint:
	 *     (Reserved0=EINTEGEROBJECT? AttVal=MODCASTRING?)
	 */
	protected void sequence_AttributeValue(ISerializationContext context, AttributeValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BAG
	 *     BAG returns BAG
	 *
	 * Constraint:
	 *     (AEGName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BAG(ISerializationContext context, BAG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BBC
	 *     BBC returns BBC
	 *
	 * Constraint:
	 *     (BCdoName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BBC(ISerializationContext context, BBC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BCA
	 *     BCA returns BCA
	 *
	 * Constraint:
	 *     (CATName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BCA(ISerializationContext context, BCA semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BCF
	 *     BCF returns BCF
	 *
	 * Constraint:
	 *     RSName=MODCASTRING?
	 */
	protected void sequence_BCF(ISerializationContext context, BCF semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BCP
	 *     BCP returns BCP
	 *
	 * Constraint:
	 *     (RSName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BCP(ISerializationContext context, BCP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BDA
	 *     BDA returns BDA
	 *
	 * Constraint:
	 *     (Flags=EINTEGEROBJECT? Xoffset=EINTEGEROBJECT? Yoffset=EINTEGEROBJECT? Data=EBYTEARRAY?)
	 */
	protected void sequence_BDA(ISerializationContext context, BDA semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BDD
	 *     BDD returns BDD
	 *
	 * Constraint:
	 *     (
	 *         UBASE=EINTEGEROBJECT? 
	 *         Reserved=EINTEGEROBJECT? 
	 *         XUPUB=EINTEGEROBJECT? 
	 *         YUPUB=EINTEGEROBJECT? 
	 *         XEXTENT=EINTEGEROBJECT? 
	 *         YEXTENT=EINTEGEROBJECT? 
	 *         Reserved2=EINTEGEROBJECT? 
	 *         TYPE=EINTEGEROBJECT? 
	 *         MOD=EINTEGEROBJECT? 
	 *         LID=EINTEGEROBJECT? 
	 *         COLOR=EINTEGEROBJECT? 
	 *         MODULEWIDTH=EINTEGEROBJECT? 
	 *         ELEMENTHEIGHT=EINTEGEROBJECT? 
	 *         MULT=EINTEGEROBJECT? 
	 *         WENE=EINTEGEROBJECT? 
	 *         triplets+=triplet*
	 *     )
	 */
	protected void sequence_BDD(ISerializationContext context, BDD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BDG
	 *     BDG returns BDG
	 *
	 * Constraint:
	 *     (DEGName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BDG(ISerializationContext context, BDG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BDI
	 *     BDI returns BDI
	 *
	 * Constraint:
	 *     (IndxName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BDI(ISerializationContext context, BDI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BDM
	 *     BDM returns BDM
	 *
	 * Constraint:
	 *     (DMName=MODCASTRING? DatFmt=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_BDM(ISerializationContext context, BDM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BDT
	 *     BDT returns BDT
	 *
	 * Constraint:
	 *     (DocName=MODCASTRING? Reserved=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_BDT(ISerializationContext context, BDT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BDX
	 *     BDX returns BDX
	 *
	 * Constraint:
	 *     DMXName=MODCASTRING?
	 */
	protected void sequence_BDX(ISerializationContext context, BDX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BFG
	 *     BFG returns BFG
	 *
	 * Constraint:
	 *     FEGName=MODCASTRING?
	 */
	protected void sequence_BFG(ISerializationContext context, BFG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BFM
	 *     BFM returns BFM
	 *
	 * Constraint:
	 *     (FMName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BFM(ISerializationContext context, BFM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BFN
	 *     BFN returns BFN
	 *
	 * Constraint:
	 *     (RSName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BFN(ISerializationContext context, BFN semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BGR
	 *     BGR returns BGR
	 *
	 * Constraint:
	 *     (GdoName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BGR(ISerializationContext context, BGR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BII
	 *     BII returns BII
	 *
	 * Constraint:
	 *     ImoName=MODCASTRING?
	 */
	protected void sequence_BII(ISerializationContext context, BII semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BIM
	 *     BIM returns BIM
	 *
	 * Constraint:
	 *     (IdoName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BIM(ISerializationContext context, BIM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns BLN
	 *     BLN returns BLN
	 *
	 * Constraint:
	 *     {BLN}
	 */
	protected void sequence_BLN(ISerializationContext context, BLN semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BMM
	 *     BMM returns BMM
	 *
	 * Constraint:
	 *     (MMName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BMM(ISerializationContext context, BMM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BMO
	 *     BMO returns BMO
	 *
	 * Constraint:
	 *     (OvlyName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BMO(ISerializationContext context, BMO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BNG
	 *     BNG returns BNG
	 *
	 * Constraint:
	 *     (PGrpName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BNG(ISerializationContext context, BNG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BOC
	 *     BOC returns BOC
	 *
	 * Constraint:
	 *     (ObjCName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BOC(ISerializationContext context, BOC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BOG
	 *     BOG returns BOG
	 *
	 * Constraint:
	 *     (OEGName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BOG(ISerializationContext context, BOG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BPF
	 *     BPF returns BPF
	 *
	 * Constraint:
	 *     (PFName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BPF(ISerializationContext context, BPF semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BPG
	 *     BPG returns BPG
	 *
	 * Constraint:
	 *     (PageName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BPG(ISerializationContext context, BPG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BPM
	 *     BPM returns BPM
	 *
	 * Constraint:
	 *     PMName=MODCASTRING?
	 */
	protected void sequence_BPM(ISerializationContext context, BPM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BPS
	 *     BPS returns BPS
	 *
	 * Constraint:
	 *     (PsegName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BPS(ISerializationContext context, BPS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BPT
	 *     BPT returns BPT
	 *
	 * Constraint:
	 *     (PTdoName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BPT(ISerializationContext context, BPT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BRG
	 *     BRG returns BRG
	 *
	 * Constraint:
	 *     (RGrpName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BRG(ISerializationContext context, BRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BRS
	 *     BRS returns BRS
	 *
	 * Constraint:
	 *     (RSName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BRS(ISerializationContext context, BRS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns BSG
	 *     BSG returns BSG
	 *
	 * Constraint:
	 *     (REGName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_BSG(ISerializationContext context, BSG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns BSU
	 *     BSU returns BSU
	 *
	 * Constraint:
	 *     LID=EINTEGEROBJECT?
	 */
	protected void sequence_BSU(ISerializationContext context, BSU semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns BandImageData
	 *     BandImageData returns BandImageData
	 *
	 * Constraint:
	 *     (BANDNUM=EINTEGEROBJECT? RESERVED=EINTEGEROBJECT? DATA=EBYTEARRAY?)
	 */
	protected void sequence_BandImageData(ISerializationContext context, BandImageData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BandImageRG returns BandImageRG
	 *
	 * Constraint:
	 *     BITCNT=EINTEGEROBJECT?
	 */
	protected void sequence_BandImageRG(ISerializationContext context, BandImageRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns BandImage
	 *     BandImage returns BandImage
	 *
	 * Constraint:
	 *     BCOUNT=EINTEGEROBJECT?
	 */
	protected void sequence_BandImage(ISerializationContext context, BandImage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns BeginImage
	 *     BeginImage returns BeginImage
	 *
	 * Constraint:
	 *     OBJTYPE=EINTEGEROBJECT?
	 */
	protected void sequence_BeginImage(ISerializationContext context, BeginImage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns BeginSegmentCommand
	 *     BeginSegmentCommand returns BeginSegmentCommand
	 *
	 * Constraint:
	 *     (
	 *         LENGTH=EINTEGEROBJECT? 
	 *         NAME=EINTEGEROBJECT? 
	 *         FLAG1=EINTEGEROBJECT? 
	 *         FLAG2=EINTEGEROBJECT? 
	 *         SEGL=EINTEGEROBJECT? 
	 *         PSNAME=MODCASTRING?
	 *     )
	 */
	protected void sequence_BeginSegmentCommand(ISerializationContext context, BeginSegmentCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns BeginSegment
	 *     BeginSegment returns BeginSegment
	 *
	 * Constraint:
	 *     SEGNAME=EINTEGEROBJECT?
	 */
	protected void sequence_BeginSegment(ISerializationContext context, BeginSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns BeginTile
	 *     BeginTile returns BeginTile
	 *
	 * Constraint:
	 *     {BeginTile}
	 */
	protected void sequence_BeginTile(ISerializationContext context, BeginTile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns BeginTransparencyMask
	 *     BeginTransparencyMask returns BeginTransparencyMask
	 *
	 * Constraint:
	 *     {BeginTransparencyMask}
	 */
	protected void sequence_BeginTransparencyMask(ISerializationContext context, BeginTransparencyMask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns CAT
	 *     CAT returns CAT
	 *
	 * Constraint:
	 *     CATData=EBYTEARRAY?
	 */
	protected void sequence_CAT(ISerializationContext context, CAT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns CDD
	 *     CDD returns CDD
	 *
	 * Constraint:
	 *     (
	 *         XocBase=EINTEGEROBJECT? 
	 *         YocBase=EINTEGEROBJECT? 
	 *         XocUnits=EINTEGEROBJECT? 
	 *         YocUnits=EINTEGEROBJECT? 
	 *         XocSize=EINTEGEROBJECT? 
	 *         YocSize=EINTEGEROBJECT? 
	 *         triplets+=triplet*
	 *     )
	 */
	protected void sequence_CDD(ISerializationContext context, CDD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns CFC
	 *     CFC returns CFC
	 *
	 * Constraint:
	 *     (CFIRGLen=EINTEGEROBJECT? Retired1=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_CFC(ISerializationContext context, CFC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CFIRG returns CFIRG
	 *
	 * Constraint:
	 *     (
	 *         FCSName=MODCASTRING? 
	 *         CPName=MODCASTRING? 
	 *         SVSize=EINTEGEROBJECT? 
	 *         SHScale=EINTEGEROBJECT? 
	 *         Reserved=EBYTEARRAY? 
	 *         Section=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_CFIRG(ISerializationContext context, CFIRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns CFI
	 *     CFI returns CFI
	 *
	 * Constraint:
	 *     {CFI}
	 */
	protected void sequence_CFI(ISerializationContext context, CFI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns CGCSGID
	 *     CGCSGID returns CGCSGID
	 *
	 * Constraint:
	 *     (GCSGID=EINTEGEROBJECT? CPGID=EINTEGEROBJECT?)
	 */
	protected void sequence_CGCSGID(ISerializationContext context, CGCSGID semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns CMRFidelity
	 *     CMRFidelity returns CMRFidelity
	 *
	 * Constraint:
	 *     (StpCMREx=EINTEGEROBJECT? RepCMREx=EINTEGEROBJECT?)
	 */
	protected void sequence_CMRFidelity(ISerializationContext context, CMRFidelity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns CPC
	 *     CPC returns CPC
	 *
	 * Constraint:
	 *     (
	 *         DefCharID=MODCASTRING? 
	 *         PrtFlags=EINTEGEROBJECT? 
	 *         CPIRGLen=EINTEGEROBJECT? 
	 *         VSCharSN=EINTEGEROBJECT? 
	 *         VSChar=EINTEGEROBJECT? 
	 *         VSFlags=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_CPC(ISerializationContext context, CPC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns CPD
	 *     CPD returns CPD
	 *
	 * Constraint:
	 *     (
	 *         CPDesc=MODCASTRING? 
	 *         GCGIDLen=EINTEGEROBJECT? 
	 *         NumCdPts=EINTEGEROBJECT? 
	 *         GCSGID=EINTEGEROBJECT? 
	 *         CPGID=EINTEGEROBJECT? 
	 *         EncScheme=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_CPD(ISerializationContext context, CPD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CPIRG returns CPIRG
	 *
	 * Constraint:
	 *     (GCGID=MODCASTRING? PrtFlags=EINTEGEROBJECT? CodePoint=EINTEGEROBJECT? Count=EINTEGEROBJECT?)
	 */
	protected void sequence_CPIRG(ISerializationContext context, CPIRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns CPI
	 *     CPI returns CPI
	 *
	 * Constraint:
	 *     rg+=CPIRG*
	 */
	protected void sequence_CPI(ISerializationContext context, CPI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns CRCResourceManagement
	 *     CRCResourceManagement returns CRCResourceManagement
	 *
	 * Constraint:
	 *     (FmtQual=EINTEGEROBJECT? RMValue=EINTEGEROBJECT? ResClassFlg=EINTEGEROBJECT?)
	 */
	protected void sequence_CRCResourceManagement(ISerializationContext context, CRCResourceManagement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns CTC
	 *     CTC returns CTC
	 *
	 * Constraint:
	 *     ConData=EBYTEARRAY?
	 */
	protected void sequence_CTC(ISerializationContext context, CTC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns CharacterRotation
	 *     CharacterRotation returns CharacterRotation
	 *
	 * Constraint:
	 *     CharRot=EINTEGEROBJECT?
	 */
	protected void sequence_CharacterRotation(ISerializationContext context, CharacterRotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ColorFidelity
	 *     ColorFidelity returns ColorFidelity
	 *
	 * Constraint:
	 *     (StpCoEx=EINTEGEROBJECT? RepCoEx=EINTEGEROBJECT? ColSub=EINTEGEROBJECT?)
	 */
	protected void sequence_ColorFidelity(ISerializationContext context, ColorFidelity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ColorManagementResourceDescriptor
	 *     ColorManagementResourceDescriptor returns ColorManagementResourceDescriptor
	 *
	 * Constraint:
	 *     (ProcMode=EINTEGEROBJECT? CMRScpe=EINTEGEROBJECT?)
	 */
	protected void sequence_ColorManagementResourceDescriptor(ISerializationContext context, ColorManagementResourceDescriptor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ColorSpecification
	 *     ColorSpecification returns ColorSpecification
	 *
	 * Constraint:
	 *     (
	 *         ColSpce=EINTEGEROBJECT? 
	 *         ColSize1=EINTEGEROBJECT? 
	 *         ColSize2=EINTEGEROBJECT? 
	 *         ColSize3=EINTEGEROBJECT? 
	 *         ColSize4=EINTEGEROBJECT? 
	 *         Color=EBYTEARRAY?
	 *     )
	 */
	protected void sequence_ColorSpecification(ISerializationContext context, ColorSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns Comment
	 *     Comment returns Comment
	 *
	 * Constraint:
	 *     Comment=MODCASTRING?
	 */
	protected void sequence_Comment(ISerializationContext context, Comment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns DBR
	 *     DBR returns DBR
	 *
	 * Constraint:
	 *     (RLENGTH=EINTEGEROBJECT? RWIDTH=EINTEGEROBJECT? RWIDTHFRACTION=EINTEGEROBJECT?)
	 */
	protected void sequence_DBR(ISerializationContext context, DBR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns DIR
	 *     DIR returns DIR
	 *
	 * Constraint:
	 *     (RLENGTH=EINTEGEROBJECT? RWIDTH=EINTEGEROBJECT? RWIDTHFRACTION=EINTEGEROBJECT?)
	 */
	protected void sequence_DIR(ISerializationContext context, DIR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns DXD
	 *     DXD returns DXD
	 *
	 * Constraint:
	 *     {DXD}
	 */
	protected void sequence_DXD(ISerializationContext context, DXD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns DataObjectFontDescriptor
	 *     DataObjectFontDescriptor returns DataObjectFontDescriptor
	 *
	 * Constraint:
	 *     (
	 *         DOFtFlgs=EINTEGEROBJECT? 
	 *         FontTech=EINTEGEROBJECT? 
	 *         VFS=EINTEGEROBJECT? 
	 *         HFS=EINTEGEROBJECT? 
	 *         CharRot=EINTEGEROBJECT? 
	 *         EncEnv=EINTEGEROBJECT? 
	 *         EncID=EINTEGEROBJECT? 
	 *         Reserved=EBYTEARRAY?
	 *     )
	 */
	protected void sequence_DataObjectFontDescriptor(ISerializationContext context, DataObjectFontDescriptor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns DescriptorPosition
	 *     DescriptorPosition returns DescriptorPosition
	 *
	 * Constraint:
	 *     DesPosID=EINTEGEROBJECT?
	 */
	protected void sequence_DescriptorPosition(ISerializationContext context, DescriptorPosition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns DeviceAppearance
	 *     DeviceAppearance returns DeviceAppearance
	 *
	 * Constraint:
	 *     (DevApp=EINTEGEROBJECT? Reserved=EBYTEARRAY?)
	 */
	protected void sequence_DeviceAppearance(ISerializationContext context, DeviceAppearance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns DrawingOrderSubset
	 *     DrawingOrderSubset returns DrawingOrderSubset
	 *
	 * Constraint:
	 *     {DrawingOrderSubset}
	 */
	protected void sequence_DrawingOrderSubset(ISerializationContext context, DrawingOrderSubset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EAG
	 *     EAG returns EAG
	 *
	 * Constraint:
	 *     AEGName=MODCASTRING?
	 */
	protected void sequence_EAG(ISerializationContext context, EAG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EBC
	 *     EBC returns EBC
	 *
	 * Constraint:
	 *     (BCdoName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_EBC(ISerializationContext context, EBC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns ECA
	 *     ECA returns ECA
	 *
	 * Constraint:
	 *     (CATName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_ECA(ISerializationContext context, ECA semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns ECF
	 *     ECF returns ECF
	 *
	 * Constraint:
	 *     RSName=MODCASTRING?
	 */
	protected void sequence_ECF(ISerializationContext context, ECF semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns ECP
	 *     ECP returns ECP
	 *
	 * Constraint:
	 *     RSName=MODCASTRING?
	 */
	protected void sequence_ECP(ISerializationContext context, ECP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EDG
	 *     EDG returns EDG
	 *
	 * Constraint:
	 *     DEGName=MODCASTRING?
	 */
	protected void sequence_EDG(ISerializationContext context, EDG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EDI
	 *     EDI returns EDI
	 *
	 * Constraint:
	 *     (IndxName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_EDI(ISerializationContext context, EDI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EDM
	 *     EDM returns EDM
	 *
	 * Constraint:
	 *     DMName=MODCASTRING?
	 */
	protected void sequence_EDM(ISerializationContext context, EDM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EDT
	 *     EDT returns EDT
	 *
	 * Constraint:
	 *     (DocName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_EDT(ISerializationContext context, EDT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EDX
	 *     EDX returns EDX
	 *
	 * Constraint:
	 *     DMXName=MODCASTRING?
	 */
	protected void sequence_EDX(ISerializationContext context, EDX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EFG
	 *     EFG returns EFG
	 *
	 * Constraint:
	 *     FEGName=MODCASTRING?
	 */
	protected void sequence_EFG(ISerializationContext context, EFG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EFM
	 *     EFM returns EFM
	 *
	 * Constraint:
	 *     FMName=MODCASTRING?
	 */
	protected void sequence_EFM(ISerializationContext context, EFM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EFN
	 *     EFN returns EFN
	 *
	 * Constraint:
	 *     RSName=MODCASTRING?
	 */
	protected void sequence_EFN(ISerializationContext context, EFN semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EGR
	 *     EGR returns EGR
	 *
	 * Constraint:
	 *     (GdoName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_EGR(ISerializationContext context, EGR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EII
	 *     EII returns EII
	 *
	 * Constraint:
	 *     ImoName=MODCASTRING?
	 */
	protected void sequence_EII(ISerializationContext context, EII semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EIM
	 *     EIM returns EIM
	 *
	 * Constraint:
	 *     (IdoName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_EIM(ISerializationContext context, EIM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EMM
	 *     EMM returns EMM
	 *
	 * Constraint:
	 *     MMName=MODCASTRING?
	 */
	protected void sequence_EMM(ISerializationContext context, EMM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EMO
	 *     EMO returns EMO
	 *
	 * Constraint:
	 *     (OvlyName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_EMO(ISerializationContext context, EMO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns ENG
	 *     ENG returns ENG
	 *
	 * Constraint:
	 *     (PGrpName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_ENG(ISerializationContext context, ENG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EOC
	 *     EOC returns EOC
	 *
	 * Constraint:
	 *     (ObjCName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_EOC(ISerializationContext context, EOC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EOG
	 *     EOG returns EOG
	 *
	 * Constraint:
	 *     OEGName=MODCASTRING?
	 */
	protected void sequence_EOG(ISerializationContext context, EOG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EPF
	 *     EPF returns EPF
	 *
	 * Constraint:
	 *     (PFName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_EPF(ISerializationContext context, EPF semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EPG
	 *     EPG returns EPG
	 *
	 * Constraint:
	 *     (PageName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_EPG(ISerializationContext context, EPG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EPM
	 *     EPM returns EPM
	 *
	 * Constraint:
	 *     PMName=MODCASTRING?
	 */
	protected void sequence_EPM(ISerializationContext context, EPM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EPS
	 *     EPS returns EPS
	 *
	 * Constraint:
	 *     PsegName=MODCASTRING?
	 */
	protected void sequence_EPS(ISerializationContext context, EPS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns EPT
	 *     EPT returns EPT
	 *
	 * Constraint:
	 *     (PTdoName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_EPT(ISerializationContext context, EPT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns ERG
	 *     ERG returns ERG
	 *
	 * Constraint:
	 *     (RGrpName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_ERG(ISerializationContext context, ERG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns ERS
	 *     ERS returns ERS
	 *
	 * Constraint:
	 *     RSName=MODCASTRING?
	 */
	protected void sequence_ERS(ISerializationContext context, ERS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns ESG
	 *     ESG returns ESG
	 *
	 * Constraint:
	 *     REGName=MODCASTRING?
	 */
	protected void sequence_ESG(ISerializationContext context, ESG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ESU
	 *     ESU returns ESU
	 *
	 * Constraint:
	 *     LID=EINTEGEROBJECT?
	 */
	protected void sequence_ESU(ISerializationContext context, ESU semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns EncodingSchemeID
	 *     EncodingSchemeID returns EncodingSchemeID
	 *
	 * Constraint:
	 *     (ESidCP=EINTEGEROBJECT? ESidUD=EINTEGEROBJECT?)
	 */
	protected void sequence_EncodingSchemeID(ISerializationContext context, EncodingSchemeID semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns EndImage
	 *     EndImage returns EndImage
	 *
	 * Constraint:
	 *     {EndImage}
	 */
	protected void sequence_EndImage(ISerializationContext context, EndImage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns EndSegmentCommand
	 *     EndSegmentCommand returns EndSegmentCommand
	 *
	 * Constraint:
	 *     {EndSegmentCommand}
	 */
	protected void sequence_EndSegmentCommand(ISerializationContext context, EndSegmentCommand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns EndSegment
	 *     EndSegment returns EndSegment
	 *
	 * Constraint:
	 *     {EndSegment}
	 */
	protected void sequence_EndSegment(ISerializationContext context, EndSegment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns EndTile
	 *     EndTile returns EndTile
	 *
	 * Constraint:
	 *     {EndTile}
	 */
	protected void sequence_EndTile(ISerializationContext context, EndTile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns EndTransparencyMask
	 *     EndTransparencyMask returns EndTransparencyMask
	 *
	 * Constraint:
	 *     {EndTransparencyMask}
	 */
	protected void sequence_EndTransparencyMask(ISerializationContext context, EndTransparencyMask semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ExtendedResourceLocalIdentifier
	 *     ExtendedResourceLocalIdentifier returns ExtendedResourceLocalIdentifier
	 *
	 * Constraint:
	 *     (ResType=EINTEGEROBJECT? ResLID=EINTEGEROBJECT?)
	 */
	protected void sequence_ExtendedResourceLocalIdentifier(ISerializationContext context, ExtendedResourceLocalIdentifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ExtensionFont
	 *     ExtensionFont returns ExtensionFont
	 *
	 * Constraint:
	 *     GCSGID=EINTEGEROBJECT?
	 */
	protected void sequence_ExtensionFont(ISerializationContext context, ExtensionFont semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExternalAlgorithmRG returns ExternalAlgorithmRG
	 *
	 * Constraint:
	 *     (DIRCTN=EINTEGEROBJECT? PADBDRY=EINTEGEROBJECT? PADALMT=EINTEGEROBJECT?)
	 */
	protected void sequence_ExternalAlgorithmRG(ISerializationContext context, ExternalAlgorithmRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ExternalAlgorithm
	 *     ExternalAlgorithm returns ExternalAlgorithm
	 *
	 * Constraint:
	 *     ALGTYPE=EINTEGEROBJECT?
	 */
	protected void sequence_ExternalAlgorithm(ISerializationContext context, ExternalAlgorithm semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns FGD
	 *     FGD returns FGD
	 *
	 * Constraint:
	 *     ConData=EBYTEARRAY?
	 */
	protected void sequence_FGD(ISerializationContext context, FGD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns FNC
	 *     FNC returns FNC
	 *
	 * Constraint:
	 *     (
	 *         Retired=EINTEGEROBJECT? 
	 *         PatTech=EINTEGEROBJECT? 
	 *         Reserved1=EBYTEARRAY? 
	 *         FntFlags=EINTEGEROBJECT? 
	 *         XUnitBase=EINTEGEROBJECT? 
	 *         YUnitBase=EINTEGEROBJECT? 
	 *         XftUnits=EINTEGEROBJECT? 
	 *         YftUnits=EINTEGEROBJECT? 
	 *         MaxBoxWd=EINTEGEROBJECT? 
	 *         MaxBoxHt=EINTEGEROBJECT? 
	 *         FNORGLen=EINTEGEROBJECT? 
	 *         FNIRGLen=EINTEGEROBJECT? 
	 *         PatAlign=EINTEGEROBJECT? 
	 *         RPatDCnt=EINTEGEROBJECT? 
	 *         FNPRGLen=EINTEGEROBJECT? 
	 *         FNMRGLen=EINTEGEROBJECT? 
	 *         ResXUBase=EINTEGEROBJECT? 
	 *         ResYUBase=EINTEGEROBJECT? 
	 *         XfrUnits=EINTEGEROBJECT? 
	 *         YfrUnits=EINTEGEROBJECT? 
	 *         OPatDCnt=EINTEGEROBJECT? 
	 *         Reserved2=EBYTEARRAY? 
	 *         FNNRGLen=EINTEGEROBJECT? 
	 *         FNNDCnt=EINTEGEROBJECT? 
	 *         FNNMapCnt=EINTEGEROBJECT? 
	 *         triplets+=triplet*
	 *     )
	 */
	protected void sequence_FNC(ISerializationContext context, FNC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns FND
	 *     FND returns FND
	 *
	 * Constraint:
	 *     (
	 *         TypeFcDesc=MODCASTRING? 
	 *         FtWtClass=EINTEGEROBJECT? 
	 *         FtWdClass=EINTEGEROBJECT? 
	 *         MaxPtSize=EINTEGEROBJECT? 
	 *         NomPtSize=EINTEGEROBJECT? 
	 *         MinPtSize=EINTEGEROBJECT? 
	 *         MaxHSize=EINTEGEROBJECT? 
	 *         NomHSize=EINTEGEROBJECT? 
	 *         MinHSize=EINTEGEROBJECT? 
	 *         DsnGenCls=EINTEGEROBJECT? 
	 *         DsnSubCls=EINTEGEROBJECT? 
	 *         DsnSpcGrp=EINTEGEROBJECT? 
	 *         Reserved1=EBYTEARRAY? 
	 *         FtDsFlags=EINTEGEROBJECT? 
	 *         Reserved2=EBYTEARRAY? 
	 *         GCSID=EINTEGEROBJECT? 
	 *         FGID=EINTEGEROBJECT? 
	 *         triplets+=triplet*
	 *     )
	 */
	protected void sequence_FND(ISerializationContext context, FND semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns FNG
	 *     FNG returns FNG
	 *
	 * Constraint:
	 *     PatData=EBYTEARRAY?
	 */
	protected void sequence_FNG(ISerializationContext context, FNG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FNIRG returns FNIRG
	 *
	 * Constraint:
	 *     (
	 *         GCGID=MODCASTRING? 
	 *         CharInc=EINTEGEROBJECT? 
	 *         AscendHt=EINTEGEROBJECT? 
	 *         DescendDp=EINTEGEROBJECT? 
	 *         Reserved=EINTEGEROBJECT? 
	 *         FNMCnt=EINTEGEROBJECT? 
	 *         ASpace=EINTEGEROBJECT? 
	 *         BSpace=EINTEGEROBJECT? 
	 *         CSpace=EINTEGEROBJECT? 
	 *         Reserved2=EINTEGEROBJECT? 
	 *         BaseOset=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_FNIRG(ISerializationContext context, FNIRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns FNI
	 *     FNI returns FNI
	 *
	 * Constraint:
	 *     rg+=FNIRG*
	 */
	protected void sequence_FNI(ISerializationContext context, FNI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FNMRG returns FNMRG
	 *
	 * Constraint:
	 *     (CharBoxWd=EINTEGEROBJECT? CharBoxHt=EINTEGEROBJECT? PatDOset=EINTEGEROBJECT?)
	 */
	protected void sequence_FNMRG(ISerializationContext context, FNMRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns FNM
	 *     FNM returns FNM
	 *
	 * Constraint:
	 *     rg+=FNMRG*
	 */
	protected void sequence_FNM(ISerializationContext context, FNM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns FNNRG2
	 *     FNNRG2 returns FNNRG2
	 *
	 * Constraint:
	 *     (TSIDLen=EINTEGEROBJECT? TSID=EBYTEARRAY?)
	 */
	protected void sequence_FNNRG2(ISerializationContext context, FNNRG2 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FNNRG returns FNNRG
	 *
	 * Constraint:
	 *     (GCGID=MODCASTRING? TSOffset=EINTEGEROBJECT?)
	 */
	protected void sequence_FNNRG(ISerializationContext context, FNNRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns FNN
	 *     FNN returns FNN
	 *
	 * Constraint:
	 *     FNNData=EBYTEARRAY?
	 */
	protected void sequence_FNN(ISerializationContext context, FNN semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FNORG returns FNORG
	 *
	 * Constraint:
	 *     (
	 *         Reserved=EINTEGEROBJECT? 
	 *         CharRot=EINTEGEROBJECT? 
	 *         MaxBOset=EINTEGEROBJECT? 
	 *         MaxCharInc=EINTEGEROBJECT? 
	 *         SpCharInc=EINTEGEROBJECT? 
	 *         MaxBExt=EINTEGEROBJECT? 
	 *         OrntFlgs=EINTEGEROBJECT? 
	 *         Reserved2=EINTEGEROBJECT? 
	 *         EmSpInc=EINTEGEROBJECT? 
	 *         Reserved3=EINTEGEROBJECT? 
	 *         FigSpInc=EINTEGEROBJECT? 
	 *         NomCharInc=EINTEGEROBJECT? 
	 *         DefBInc=EINTEGEROBJECT? 
	 *         MinASp=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_FNORG(ISerializationContext context, FNORG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns FNO
	 *     FNO returns FNO
	 *
	 * Constraint:
	 *     rg+=FNORG*
	 */
	protected void sequence_FNO(ISerializationContext context, FNO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FNPRG returns FNPRG
	 *
	 * Constraint:
	 *     (
	 *         Reserved=EINTEGEROBJECT? 
	 *         LcHeight=EINTEGEROBJECT? 
	 *         CapMHt=EINTEGEROBJECT? 
	 *         MaxAscHt=EINTEGEROBJECT? 
	 *         MaxDesDp=EINTEGEROBJECT? 
	 *         Reserved2=EBYTEARRAY? 
	 *         Retired=EINTEGEROBJECT? 
	 *         Reserved3=EINTEGEROBJECT? 
	 *         UscoreWd=EINTEGEROBJECT? 
	 *         UscoreWdf=EINTEGEROBJECT? 
	 *         UscorePos=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_FNPRG(ISerializationContext context, FNPRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns FNP
	 *     FNP returns FNP
	 *
	 * Constraint:
	 *     rg+=FNPRG*
	 */
	protected void sequence_FNP(ISerializationContext context, FNP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns FinishingFidelity
	 *     FinishingFidelity returns FinishingFidelity
	 *
	 * Constraint:
	 *     (StpFinEx=EINTEGEROBJECT? RepFinEx=EINTEGEROBJECT?)
	 */
	protected void sequence_FinishingFidelity(ISerializationContext context, FinishingFidelity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns FinishingOperation
	 *     FinishingOperation returns FinishingOperation
	 *
	 * Constraint:
	 *     (FOpType=EINTEGEROBJECT? RefEdge=EINTEGEROBJECT? FOpCnt=EINTEGEROBJECT? AxOffst=EINTEGEROBJECT? OpPos=EBYTEARRAY?)
	 */
	protected void sequence_FinishingOperation(ISerializationContext context, FinishingOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns FontCodedGraphicCharacterSetGlobalIdentifier
	 *     FontCodedGraphicCharacterSetGlobalIdentifier returns FontCodedGraphicCharacterSetGlobalIdentifier
	 *
	 * Constraint:
	 *     (GCSGID=EINTEGEROBJECT? CPGID=EINTEGEROBJECT?)
	 */
	protected void sequence_FontCodedGraphicCharacterSetGlobalIdentifier(ISerializationContext context, FontCodedGraphicCharacterSetGlobalIdentifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns FontDescriptorSpecification
	 *     FontDescriptorSpecification returns FontDescriptorSpecification
	 *
	 * Constraint:
	 *     (
	 *         FtWtClass=EINTEGEROBJECT? 
	 *         FtWdClass=EINTEGEROBJECT? 
	 *         FtHeight=EINTEGEROBJECT? 
	 *         FtWidth=EINTEGEROBJECT? 
	 *         FtDsFlags=EINTEGEROBJECT? 
	 *         FtUsFlags=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_FontDescriptorSpecification(ISerializationContext context, FontDescriptorSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns FontFidelity
	 *     FontFidelity returns FontFidelity
	 *
	 * Constraint:
	 *     StpFntEx=EINTEGEROBJECT?
	 */
	protected void sequence_FontFidelity(ISerializationContext context, FontFidelity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns FontHorizontalScaleFactor
	 *     FontHorizontalScaleFactor returns FontHorizontalScaleFactor
	 *
	 * Constraint:
	 *     Hscale=EINTEGEROBJECT?
	 */
	protected void sequence_FontHorizontalScaleFactor(ISerializationContext context, FontHorizontalScaleFactor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns FontResolution
	 *     FontResolution returns FontResolution
	 *
	 * Constraint:
	 *     (MetTech=EINTEGEROBJECT? RPuBase=EINTEGEROBJECT? RPUnits=EINTEGEROBJECT?)
	 */
	protected void sequence_FontResolution(ISerializationContext context, FontResolution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns FullyQualifiedName
	 *     FullyQualifiedName returns FullyQualifiedName
	 *
	 * Constraint:
	 *     (FQNType=EINTEGEROBJECT | FQNFormat=EINTEGEROBJECT | FQName=MODCASTRING)*
	 */
	protected void sequence_FullyQualifiedName(ISerializationContext context, FullyQualifiedName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns GAD
	 *     GAD returns GAD
	 *
	 * Constraint:
	 *     GOCAdat=EBYTEARRAY?
	 */
	protected void sequence_GAD(ISerializationContext context, GAD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GBAR
	 *     GBAR returns GBAR
	 *
	 * Constraint:
	 *     FLAGS=EINTEGEROBJECT?
	 */
	protected void sequence_GBAR(ISerializationContext context, GBAR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GBIMG
	 *     GBIMG returns GBIMG
	 *
	 * Constraint:
	 *     (
	 *         XPOS=EINTEGEROBJECT? 
	 *         YPOS=EINTEGEROBJECT? 
	 *         FORMAT=EINTEGEROBJECT? 
	 *         RES=EINTEGEROBJECT? 
	 *         WIDTH=EINTEGEROBJECT? 
	 *         HEIGHT=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_GBIMG(ISerializationContext context, GBIMG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GBOX
	 *     GBOX returns GBOX
	 *
	 * Constraint:
	 *     (
	 *         RES=EINTEGEROBJECT? 
	 *         XPOS0=EINTEGEROBJECT? 
	 *         YPOS0=EINTEGEROBJECT? 
	 *         XPOS1=EINTEGEROBJECT? 
	 *         YPOS1=EINTEGEROBJECT? 
	 *         HAXIS=EINTEGEROBJECT? 
	 *         VAXIS=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_GBOX(ISerializationContext context, GBOX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GCBEZRG returns GCBEZRG
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT?)
	 */
	protected void sequence_GCBEZRG(ISerializationContext context, GCBEZRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCBEZ
	 *     GCBEZ returns GCBEZ
	 *
	 * Constraint:
	 *     {GCBEZ}
	 */
	protected void sequence_GCBEZ(ISerializationContext context, GCBEZ semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCBIMG
	 *     GCBIMG returns GCBIMG
	 *
	 * Constraint:
	 *     (FORMAT=EINTEGEROBJECT? RES=EINTEGEROBJECT? WIDTH=EINTEGEROBJECT? HEIGHT=EINTEGEROBJECT?)
	 */
	protected void sequence_GCBIMG(ISerializationContext context, GCBIMG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCBOX
	 *     GCBOX returns GCBOX
	 *
	 * Constraint:
	 *     (RES=EINTEGEROBJECT? XPOS1=EINTEGEROBJECT? YPOS1=EINTEGEROBJECT? HAXIS=EINTEGEROBJECT? VAXIS=EINTEGEROBJECT?)
	 */
	protected void sequence_GCBOX(ISerializationContext context, GCBOX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GCCBEZRG returns GCCBEZRG
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT?)
	 */
	protected void sequence_GCCBEZRG(ISerializationContext context, GCCBEZRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCCBEZ
	 *     GCCBEZ returns GCCBEZ
	 *
	 * Constraint:
	 *     {GCCBEZ}
	 */
	protected void sequence_GCCBEZ(ISerializationContext context, GCCBEZ semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCCHST
	 *     GCCHST returns GCCHST
	 *
	 * Constraint:
	 *     CP=MODCASTRING?
	 */
	protected void sequence_GCCHST(ISerializationContext context, GCCHST semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCFARC
	 *     GCFARC returns GCFARC
	 *
	 * Constraint:
	 *     (MH=EINTEGEROBJECT? MFR=EINTEGEROBJECT?)
	 */
	protected void sequence_GCFARC(ISerializationContext context, GCFARC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GCFLTRG returns GCFLTRG
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT?)
	 */
	protected void sequence_GCFLTRG(ISerializationContext context, GCFLTRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCFLT
	 *     GCFLT returns GCFLT
	 *
	 * Constraint:
	 *     {GCFLT}
	 */
	protected void sequence_GCFLT(ISerializationContext context, GCFLT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCHST
	 *     GCHST returns GCHST
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT? CP=MODCASTRING?)
	 */
	protected void sequence_GCHST(ISerializationContext context, GCHST semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GCLINERG returns GCLINERG
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT?)
	 */
	protected void sequence_GCLINERG(ISerializationContext context, GCLINERG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCLINE
	 *     GCLINE returns GCLINE
	 *
	 * Constraint:
	 *     {GCLINE}
	 */
	protected void sequence_GCLINE(ISerializationContext context, GCLINE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GCMRKRG returns GCMRKRG
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT?)
	 */
	protected void sequence_GCMRKRG(ISerializationContext context, GCMRKRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCMRK
	 *     GCMRK returns GCMRK
	 *
	 * Constraint:
	 *     {GCMRK}
	 */
	protected void sequence_GCMRK(ISerializationContext context, GCMRK semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCOMT
	 *     GCOMT returns GCOMT
	 *
	 * Constraint:
	 *     DATA=EBYTEARRAY?
	 */
	protected void sequence_GCOMT(ISerializationContext context, GCOMT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCPARC
	 *     GCPARC returns GCPARC
	 *
	 * Constraint:
	 *     (
	 *         XCENT=EINTEGEROBJECT? 
	 *         YCENT=EINTEGEROBJECT? 
	 *         MH=EINTEGEROBJECT? 
	 *         MFR=EINTEGEROBJECT? 
	 *         START=EINTEGEROBJECT? 
	 *         SWEEP=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_GCPARC(ISerializationContext context, GCPARC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GCRLINERG returns GCRLINERG
	 *
	 * Constraint:
	 *     (XOSSF=EINTEGEROBJECT? YOFFS=EINTEGEROBJECT?)
	 */
	protected void sequence_GCRLINERG(ISerializationContext context, GCRLINERG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GCRLINE
	 *     GCRLINE returns GCRLINE
	 *
	 * Constraint:
	 *     {GCRLINE}
	 */
	protected void sequence_GCRLINE(ISerializationContext context, GCRLINE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns GDD
	 *     GDD returns GDD
	 *
	 * Constraint:
	 *     GOCAdes=EBYTEARRAY?
	 */
	protected void sequence_GDD(ISerializationContext context, GDD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GEAR
	 *     GEAR returns GEAR
	 *
	 * Constraint:
	 *     DATA=EBYTEARRAY?
	 */
	protected void sequence_GEAR(ISerializationContext context, GEAR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GEIMG
	 *     GEIMG returns GEIMG
	 *
	 * Constraint:
	 *     DATA=EBYTEARRAY?
	 */
	protected void sequence_GEIMG(ISerializationContext context, GEIMG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GEPROL
	 *     GEPROL returns GEPROL
	 *
	 * Constraint:
	 *     RES=EINTEGEROBJECT?
	 */
	protected void sequence_GEPROL(ISerializationContext context, GEPROL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GFARC
	 *     GFARC returns GFARC
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT? MH=EINTEGEROBJECT? MFR=EINTEGEROBJECT?)
	 */
	protected void sequence_GFARC(ISerializationContext context, GFARC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GFLTRG returns GFLTRG
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT?)
	 */
	protected void sequence_GFLTRG(ISerializationContext context, GFLTRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GFLT
	 *     GFLT returns GFLT
	 *
	 * Constraint:
	 *     {GFLT}
	 */
	protected void sequence_GFLT(ISerializationContext context, GFLT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GIMD
	 *     GIMD returns GIMD
	 *
	 * Constraint:
	 *     DATA=EBYTEARRAY?
	 */
	protected void sequence_GIMD(ISerializationContext context, GIMD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GLINERG returns GLINERG
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT?)
	 */
	protected void sequence_GLINERG(ISerializationContext context, GLINERG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GLINE
	 *     GLINE returns GLINE
	 *
	 * Constraint:
	 *     {GLINE}
	 */
	protected void sequence_GLINE(ISerializationContext context, GLINE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GMRKRG returns GMRKRG
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT?)
	 */
	protected void sequence_GMRKRG(ISerializationContext context, GMRKRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GMRK
	 *     GMRK returns GMRK
	 *
	 * Constraint:
	 *     {GMRK}
	 */
	protected void sequence_GMRK(ISerializationContext context, GMRK semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GNOP1
	 *     GNOP1 returns GNOP1
	 *
	 * Constraint:
	 *     {GNOP1}
	 */
	protected void sequence_GNOP1(ISerializationContext context, GNOP1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GPARC
	 *     GPARC returns GPARC
	 *
	 * Constraint:
	 *     (
	 *         XPOS=EINTEGEROBJECT? 
	 *         YPOS=EINTEGEROBJECT? 
	 *         XCENT=EINTEGEROBJECT? 
	 *         YCENT=EINTEGEROBJECT? 
	 *         MH=EINTEGEROBJECT? 
	 *         MFR=EINTEGEROBJECT? 
	 *         START=EINTEGEROBJECT? 
	 *         SWEEP=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_GPARC(ISerializationContext context, GPARC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GRLINERG returns GRLINERG
	 *
	 * Constraint:
	 *     (XOSSF=EINTEGEROBJECT? YOFFS=EINTEGEROBJECT?)
	 */
	protected void sequence_GRLINERG(ISerializationContext context, GRLINERG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GRLINE
	 *     GRLINE returns GRLINE
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT?)
	 */
	protected void sequence_GRLINE(ISerializationContext context, GRLINE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSAP
	 *     GSAP returns GSAP
	 *
	 * Constraint:
	 *     (P=EINTEGEROBJECT? Q=EINTEGEROBJECT? R=EINTEGEROBJECT? S=EINTEGEROBJECT?)
	 */
	protected void sequence_GSAP(ISerializationContext context, GSAP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSBMX
	 *     GSBMX returns GSBMX
	 *
	 * Constraint:
	 *     MODE=EINTEGEROBJECT?
	 */
	protected void sequence_GSBMX(ISerializationContext context, GSBMX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSCA
	 *     GSCA returns GSCA
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT?)
	 */
	protected void sequence_GSCA(ISerializationContext context, GSCA semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSCC
	 *     GSCC returns GSCC
	 *
	 * Constraint:
	 *     (CELLWI=EINTEGEROBJECT? CELLHI=EINTEGEROBJECT? CELLWFR=EINTEGEROBJECT? CELLHFR=EINTEGEROBJECT?)
	 */
	protected void sequence_GSCC(ISerializationContext context, GSCC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSCD
	 *     GSCD returns GSCD
	 *
	 * Constraint:
	 *     DIRECTION=EINTEGEROBJECT?
	 */
	protected void sequence_GSCD(ISerializationContext context, GSCD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSCH
	 *     GSCH returns GSCH
	 *
	 * Constraint:
	 *     (HX=EINTEGEROBJECT? HY=EINTEGEROBJECT?)
	 */
	protected void sequence_GSCH(ISerializationContext context, GSCH semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSCOL
	 *     GSCOL returns GSCOL
	 *
	 * Constraint:
	 *     COL=EINTEGEROBJECT?
	 */
	protected void sequence_GSCOL(ISerializationContext context, GSCOL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSCP
	 *     GSCP returns GSCP
	 *
	 * Constraint:
	 *     (XPOS=EINTEGEROBJECT? YPOS=EINTEGEROBJECT?)
	 */
	protected void sequence_GSCP(ISerializationContext context, GSCP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSCR
	 *     GSCR returns GSCR
	 *
	 * Constraint:
	 *     PREC=EINTEGEROBJECT?
	 */
	protected void sequence_GSCR(ISerializationContext context, GSCR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSCS
	 *     GSCS returns GSCS
	 *
	 * Constraint:
	 *     LCID=EINTEGEROBJECT?
	 */
	protected void sequence_GSCS(ISerializationContext context, GSCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSECOL
	 *     GSECOL returns GSECOL
	 *
	 * Constraint:
	 *     COLOR=EINTEGEROBJECT?
	 */
	protected void sequence_GSECOL(ISerializationContext context, GSECOL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSFLW
	 *     GSFLW returns GSFLW
	 *
	 * Constraint:
	 *     (MH=EINTEGEROBJECT? MFR=EINTEGEROBJECT?)
	 */
	protected void sequence_GSFLW(ISerializationContext context, GSFLW semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSGCH
	 *     GSGCH returns GSGCH
	 *
	 * Constraint:
	 *     {GSGCH}
	 */
	protected void sequence_GSGCH(ISerializationContext context, GSGCH semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSLE
	 *     GSLE returns GSLE
	 *
	 * Constraint:
	 *     LINEEND=EINTEGEROBJECT?
	 */
	protected void sequence_GSLE(ISerializationContext context, GSLE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSLJ
	 *     GSLJ returns GSLJ
	 *
	 * Constraint:
	 *     LINEJOIN=EINTEGEROBJECT?
	 */
	protected void sequence_GSLJ(ISerializationContext context, GSLJ semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSLT
	 *     GSLT returns GSLT
	 *
	 * Constraint:
	 *     LINETYPE=EINTEGEROBJECT?
	 */
	protected void sequence_GSLT(ISerializationContext context, GSLT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSLW
	 *     GSLW returns GSLW
	 *
	 * Constraint:
	 *     MH=EINTEGEROBJECT?
	 */
	protected void sequence_GSLW(ISerializationContext context, GSLW semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSMC
	 *     GSMC returns GSMC
	 *
	 * Constraint:
	 *     (CELLWI=EINTEGEROBJECT? CELLHI=EINTEGEROBJECT?)
	 */
	protected void sequence_GSMC(ISerializationContext context, GSMC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSMP
	 *     GSMP returns GSMP
	 *
	 * Constraint:
	 *     PREC=EINTEGEROBJECT?
	 */
	protected void sequence_GSMP(ISerializationContext context, GSMP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSMS
	 *     GSMS returns GSMS
	 *
	 * Constraint:
	 *     LCID=EINTEGEROBJECT?
	 */
	protected void sequence_GSMS(ISerializationContext context, GSMS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSMT
	 *     GSMT returns GSMT
	 *
	 * Constraint:
	 *     MCPT=EINTEGEROBJECT?
	 */
	protected void sequence_GSMT(ISerializationContext context, GSMT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSMX
	 *     GSMX returns GSMX
	 *
	 * Constraint:
	 *     MODE=EINTEGEROBJECT?
	 */
	protected void sequence_GSMX(ISerializationContext context, GSMX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSPCOL
	 *     GSPCOL returns GSPCOL
	 *
	 * Constraint:
	 *     (
	 *         RES1=EINTEGEROBJECT? 
	 *         COLSPCE=EINTEGEROBJECT? 
	 *         RES2=EINTEGEROBJECT? 
	 *         COLSIZE1=EINTEGEROBJECT? 
	 *         COLSIZE2=EINTEGEROBJECT? 
	 *         COLSIZE3=EINTEGEROBJECT? 
	 *         COLSIZE4=EINTEGEROBJECT? 
	 *         COLVALUE=EBYTEARRAY?
	 *     )
	 */
	protected void sequence_GSPCOL(ISerializationContext context, GSPCOL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSPS
	 *     GSPS returns GSPS
	 *
	 * Constraint:
	 *     LCID=EINTEGEROBJECT?
	 */
	protected void sequence_GSPS(ISerializationContext context, GSPS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns GSPT
	 *     GSPT returns GSPT
	 *
	 * Constraint:
	 *     PATT=EINTEGEROBJECT?
	 */
	protected void sequence_GSPT(ISerializationContext context, GSPT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns ICP
	 *     ICP returns ICP
	 *
	 * Constraint:
	 *     (
	 *         XCOset=EINTEGEROBJECT? 
	 *         YCOset=EINTEGEROBJECT? 
	 *         XCSize=EINTEGEROBJECT? 
	 *         YCSize=EINTEGEROBJECT? 
	 *         XFilSize=EINTEGEROBJECT? 
	 *         YFilSize=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_ICP(ISerializationContext context, ICP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns IDD
	 *     IDD returns IDD
	 *
	 * Constraint:
	 *     (UNITBASE=EINTEGEROBJECT? XRESOL=EINTEGEROBJECT? YRESOL=EINTEGEROBJECT? XSIZE=EINTEGEROBJECT? YSIZE=EINTEGEROBJECT?)
	 */
	protected void sequence_IDD(ISerializationContext context, IDD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns IDESize
	 *     IDESize returns IDESize
	 *
	 * Constraint:
	 *     IDESZ=EINTEGEROBJECT?
	 */
	protected void sequence_IDESize(ISerializationContext context, IDESize semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns IDEStructure
	 *     IDEStructure returns IDEStructure
	 *
	 * Constraint:
	 *     (
	 *         FLAGS=EINTEGEROBJECT? 
	 *         FORMAT=EINTEGEROBJECT? 
	 *         SIZE1=EINTEGEROBJECT? 
	 *         SIZE2=EINTEGEROBJECT? 
	 *         SIZE3=EINTEGEROBJECT? 
	 *         SIZE4=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_IDEStructure(ISerializationContext context, IDEStructure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns IEL
	 *     IEL returns IEL
	 *
	 * Constraint:
	 *     triplets+=triplet*
	 */
	protected void sequence_IEL(ISerializationContext context, IEL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns IID
	 *     IID returns IID
	 *
	 * Constraint:
	 *     (
	 *         ConData1=EBYTEARRAY? 
	 *         XBase=EINTEGEROBJECT? 
	 *         YBase=EINTEGEROBJECT? 
	 *         XUnits=EINTEGEROBJECT? 
	 *         YUnits=EINTEGEROBJECT? 
	 *         XSize=EINTEGEROBJECT? 
	 *         YSize=EINTEGEROBJECT? 
	 *         ConData2=EBYTEARRAY? 
	 *         XCSizeD=EINTEGEROBJECT? 
	 *         YCSizeD=EINTEGEROBJECT? 
	 *         ConData3=EBYTEARRAY? 
	 *         Color=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_IID(ISerializationContext context, IID semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns IMM
	 *     IMM returns IMM
	 *
	 * Constraint:
	 *     (MMPName=MODCASTRING? triplets+=triplet*)
	 */
	protected void sequence_IMM(ISerializationContext context, IMM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns IOB
	 *     IOB returns IOB
	 *
	 * Constraint:
	 *     (
	 *         ObjName=MODCASTRING? 
	 *         ObjType=EINTEGEROBJECT? 
	 *         XoaOset=EINTEGEROBJECT? 
	 *         YoaOset=EINTEGEROBJECT? 
	 *         XoaOrent=EINTEGEROBJECT? 
	 *         YoaOrent=EINTEGEROBJECT? 
	 *         XocaOset=EINTEGEROBJECT? 
	 *         YocaOset=EINTEGEROBJECT? 
	 *         RefCSys=EINTEGEROBJECT? 
	 *         triplets+=triplet*
	 *     )
	 */
	protected void sequence_IOB(ISerializationContext context, IOB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns IOCAFunctionSetIdentification
	 *     IOCAFunctionSetIdentification returns IOCAFunctionSetIdentification
	 *
	 * Constraint:
	 *     (CATEGORY=EINTEGEROBJECT? FCNSET=EINTEGEROBJECT?)
	 */
	protected void sequence_IOCAFunctionSetIdentification(ISerializationContext context, IOCAFunctionSetIdentification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns IOC
	 *     IOC returns IOC
	 *
	 * Constraint:
	 *     (
	 *         XoaOset=EINTEGEROBJECT? 
	 *         YoaOset=EINTEGEROBJECT? 
	 *         XoaOrent=EINTEGEROBJECT? 
	 *         YoaOrent=EINTEGEROBJECT? 
	 *         ConData1=EBYTEARRAY? 
	 *         XMap=EINTEGEROBJECT? 
	 *         YMap=EINTEGEROBJECT? 
	 *         ConData2=EBYTEARRAY?
	 *     )
	 */
	protected void sequence_IOC(ISerializationContext context, IOC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns IPD
	 *     IPD returns IPD
	 *
	 * Constraint:
	 *     (IOCAdat=EBYTEARRAY? imageData=EBYTEARRAY?)
	 */
	protected void sequence_IPD(ISerializationContext context, IPD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns IPG
	 *     IPG returns IPG
	 *
	 * Constraint:
	 *     (PgName=MODCASTRING? IPgFlgs=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_IPG(ISerializationContext context, IPG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns IPO
	 *     IPO returns IPO
	 *
	 * Constraint:
	 *     (OvlyName=MODCASTRING? XolOset=EINTEGEROBJECT? YolOset=EINTEGEROBJECT? OvlyOrent=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_IPO(ISerializationContext context, IPO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns IPS
	 *     IPS returns IPS
	 *
	 * Constraint:
	 *     (PsegName=MODCASTRING? XpsOset=EINTEGEROBJECT? YpsOset=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_IPS(ISerializationContext context, IPS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns IRD
	 *     IRD returns IRD
	 *
	 * Constraint:
	 *     IMdata=EBYTEARRAY?
	 */
	protected void sequence_IRD(ISerializationContext context, IRD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ImageData
	 *     ImageData returns ImageData
	 *
	 * Constraint:
	 *     DATA=EBYTEARRAY?
	 */
	protected void sequence_ImageData(ISerializationContext context, ImageData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ImageEncoding
	 *     ImageEncoding returns ImageEncoding
	 *
	 * Constraint:
	 *     (COMPRID=EINTEGEROBJECT? RECID=EINTEGEROBJECT? BITORDR=EINTEGEROBJECT?)
	 */
	protected void sequence_ImageEncoding(ISerializationContext context, ImageEncoding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ImageLUTID
	 *     ImageLUTID returns ImageLUTID
	 *
	 * Constraint:
	 *     LUTID=EINTEGEROBJECT?
	 */
	protected void sequence_ImageLUTID(ISerializationContext context, ImageLUTID semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ImageResolution
	 *     ImageResolution returns ImageResolution
	 *
	 * Constraint:
	 *     (XBase=EINTEGEROBJECT? YBase=EINTEGEROBJECT? XResol=EINTEGEROBJECT? YResol=EINTEGEROBJECT?)
	 */
	protected void sequence_ImageResolution(ISerializationContext context, ImageResolution semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ImageSize
	 *     ImageSize returns ImageSize
	 *
	 * Constraint:
	 *     (UNITBASE=EINTEGEROBJECT? HRESOL=EINTEGEROBJECT? VRESOL=EINTEGEROBJECT? HSIZE=EINTEGEROBJECT? VSIZE=EINTEGEROBJECT?)
	 */
	protected void sequence_ImageSize(ISerializationContext context, ImageSize semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ImageSubsampling
	 *     ImageSubsampling returns ImageSubsampling
	 *
	 * Constraint:
	 *     {ImageSubsampling}
	 */
	protected void sequence_ImageSubsampling(ISerializationContext context, ImageSubsampling semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns IncludeTile
	 *     IncludeTile returns IncludeTile
	 *
	 * Constraint:
	 *     TIRID=EINTEGEROBJECT?
	 */
	protected void sequence_IncludeTile(ISerializationContext context, IncludeTile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LLERG returns LLERG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? RGFunct=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_LLERG(ISerializationContext context, LLERG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns LLE
	 *     LLE returns LLE
	 *
	 * Constraint:
	 *     (LnkType=EINTEGEROBJECT? rg+=LLERG*)
	 */
	protected void sequence_LLE(ISerializationContext context, LLE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns LNC
	 *     LNC returns LNC
	 *
	 * Constraint:
	 *     NumDSC=EINTEGEROBJECT?
	 */
	protected void sequence_LNC(ISerializationContext context, LNC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns LND
	 *     LND returns LND
	 *
	 * Constraint:
	 *     (
	 *         LNDFlgs=EINTEGEROBJECT? 
	 *         IPos=EINTEGEROBJECT? 
	 *         BPos=EINTEGEROBJECT? 
	 *         TxtOrent=EINTEGEROBJECT? 
	 *         FntLID=EINTEGEROBJECT? 
	 *         ChnlCde=EINTEGEROBJECT? 
	 *         NLNDskp=EINTEGEROBJECT? 
	 *         NLNDsp=EINTEGEROBJECT? 
	 *         NLNDreu=EINTEGEROBJECT? 
	 *         SupName=MODCASTRING? 
	 *         SOLid=EINTEGEROBJECT? 
	 *         DataStrt=EINTEGEROBJECT? 
	 *         DataLgth=EINTEGEROBJECT? 
	 *         TxtColor=EINTEGEROBJECT? 
	 *         NLNDccp=EINTEGEROBJECT? 
	 *         SubpgID=EINTEGEROBJECT? 
	 *         CCPID=EINTEGEROBJECT? 
	 *         triplets+=triplet*
	 *     )
	 */
	protected void sequence_LND(ISerializationContext context, LND semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns LineDataObjectPositionMigration
	 *     LineDataObjectPositionMigration returns LineDataObjectPositionMigration
	 *
	 * Constraint:
	 *     TempOrient=EINTEGEROBJECT?
	 */
	protected void sequence_LineDataObjectPositionMigration(ISerializationContext context, LineDataObjectPositionMigration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns LineData
	 *     LineData returns LineData
	 *
	 * Constraint:
	 *     linedata=MODCASTRING?
	 */
	protected void sequence_LineData(ISerializationContext context, LineData semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns LocalDateAndTimeStamp
	 *     LocalDateAndTimeStamp returns LocalDateAndTimeStamp
	 *
	 * Constraint:
	 *     (
	 *         StampType=EINTEGEROBJECT? 
	 *         THunYear=EINTEGEROBJECT? 
	 *         TenYear=EINTEGEROBJECT? 
	 *         Day=EINTEGEROBJECT? 
	 *         Hour=EINTEGEROBJECT? 
	 *         Minute=EINTEGEROBJECT? 
	 *         Second=EINTEGEROBJECT? 
	 *         HundSec=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_LocalDateAndTimeStamp(ISerializationContext context, LocalDateAndTimeStamp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns LocaleSelector
	 *     LocaleSelector returns LocaleSelector
	 *
	 * Constraint:
	 *     (
	 *         LocFlgs=EINTEGEROBJECT? 
	 *         LangCode=MODCASTRING? 
	 *         ScrptCde=MODCASTRING? 
	 *         RegCde=MODCASTRING? 
	 *         Reserved=EBYTEARRAY? 
	 *         VarCde=MODCASTRING?
	 *     )
	 */
	protected void sequence_LocaleSelector(ISerializationContext context, LocaleSelector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MBCRG returns MBCRG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MBCRG(ISerializationContext context, MBCRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MBC
	 *     MBC returns MBC
	 *
	 * Constraint:
	 *     rg+=MBCRG*
	 */
	protected void sequence_MBC(ISerializationContext context, MBC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MCARG returns MCARG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MCARG(ISerializationContext context, MCARG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MCA
	 *     MCA returns MCA
	 *
	 * Constraint:
	 *     rg+=MCARG*
	 */
	protected void sequence_MCA(ISerializationContext context, MCA semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MCCRG returns MCCRG
	 *
	 * Constraint:
	 *     (Startnum=EINTEGEROBJECT? Stopnum=EINTEGEROBJECT? MMCid=EINTEGEROBJECT?)
	 */
	protected void sequence_MCCRG(ISerializationContext context, MCCRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MCC
	 *     MCC returns MCC
	 *
	 * Constraint:
	 *     rg+=MCCRG*
	 */
	protected void sequence_MCC(ISerializationContext context, MCC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MCDRG returns MCDRG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MCDRG(ISerializationContext context, MCDRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MCD
	 *     MCD returns MCD
	 *
	 * Constraint:
	 *     rg+=MCDRG*
	 */
	protected void sequence_MCD(ISerializationContext context, MCD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MCF1RG returns MCF1RG
	 *
	 * Constraint:
	 *     (
	 *         CFLid=EINTEGEROBJECT? 
	 *         Sectid=EINTEGEROBJECT? 
	 *         CFName=MODCASTRING? 
	 *         CPName=MODCASTRING? 
	 *         FCSName=MODCASTRING? 
	 *         CharRot=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_MCF1RG(ISerializationContext context, MCF1RG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MCF1
	 *     MCF1 returns MCF1
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? rg+=MCF1RG*)
	 */
	protected void sequence_MCF1(ISerializationContext context, MCF1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MCFRG returns MCFRG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MCFRG(ISerializationContext context, MCFRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MCF
	 *     MCF returns MCF
	 *
	 * Constraint:
	 *     rg+=MCFRG*
	 */
	protected void sequence_MCF(ISerializationContext context, MCF semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MDD
	 *     MDD returns MDD
	 *
	 * Constraint:
	 *     (
	 *         XmBase=EINTEGEROBJECT? 
	 *         YmBase=EINTEGEROBJECT? 
	 *         XmUnits=EINTEGEROBJECT? 
	 *         YmUnits=EINTEGEROBJECT? 
	 *         XmSize=EINTEGEROBJECT? 
	 *         YmSize=EINTEGEROBJECT? 
	 *         MDDFlgs=EINTEGEROBJECT? 
	 *         triplets+=triplet*
	 *     )
	 */
	protected void sequence_MDD(ISerializationContext context, MDD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MDRRG returns MDRRG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MDRRG(ISerializationContext context, MDRRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MDR
	 *     MDR returns MDR
	 *
	 * Constraint:
	 *     rg+=MDRRG*
	 */
	protected void sequence_MDR(ISerializationContext context, MDR semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MFC
	 *     MFC returns MFC
	 *
	 * Constraint:
	 *     (MFCFlgs=EINTEGEROBJECT? MedColl=EINTEGEROBJECT? MFCScpe=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MFC(ISerializationContext context, MFC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MGORG returns MGORG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MGORG(ISerializationContext context, MGORG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MGO
	 *     MGO returns MGO
	 *
	 * Constraint:
	 *     rg+=MGORG*
	 */
	protected void sequence_MGO(ISerializationContext context, MGO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MIORG returns MIORG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MIORG(ISerializationContext context, MIORG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MIO
	 *     MIO returns MIO
	 *
	 * Constraint:
	 *     rg+=MIORG*
	 */
	protected void sequence_MIO(ISerializationContext context, MIO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MMCRG returns MMCRG
	 *
	 * Constraint:
	 *     (key=EINTEGEROBJECT? value=EINTEGEROBJECT?)
	 */
	protected void sequence_MMCRG(ISerializationContext context, MMCRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MMC
	 *     MMC returns MMC
	 *
	 * Constraint:
	 *     (MMCid=EINTEGEROBJECT? PARAMETER1=EINTEGEROBJECT? rg+=MMCRG*)
	 */
	protected void sequence_MMC(ISerializationContext context, MMC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MMDRG returns MMDRG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MMDRG(ISerializationContext context, MMDRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MMD
	 *     MMD returns MMD
	 *
	 * Constraint:
	 *     rg+=MMDRG*
	 */
	protected void sequence_MMD(ISerializationContext context, MMD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MMORG returns MMORG
	 *
	 * Constraint:
	 *     (OVLid=EINTEGEROBJECT? Flags=EINTEGEROBJECT? OVLname=MODCASTRING?)
	 */
	protected void sequence_MMORG(ISerializationContext context, MMORG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MMO
	 *     MMO returns MMO
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? rg+=MMORG*)
	 */
	protected void sequence_MMO(ISerializationContext context, MMO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MMTRG returns MMTRG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MMTRG(ISerializationContext context, MMTRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MMT
	 *     MMT returns MMT
	 *
	 * Constraint:
	 *     rg+=MMTRG*
	 */
	protected void sequence_MMT(ISerializationContext context, MMT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns MODCAInterchangeSet
	 *     MODCAInterchangeSet returns MODCAInterchangeSet
	 *
	 * Constraint:
	 *     (IStype=EINTEGEROBJECT? ISid=EINTEGEROBJECT?)
	 */
	protected void sequence_MODCAInterchangeSet(ISerializationContext context, MODCAInterchangeSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MPGRG returns MPGRG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MPGRG(ISerializationContext context, MPGRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MPG
	 *     MPG returns MPG
	 *
	 * Constraint:
	 *     rg+=MPGRG*
	 */
	protected void sequence_MPG(ISerializationContext context, MPG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MPORG returns MPORG
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_MPORG(ISerializationContext context, MPORG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MPO
	 *     MPO returns MPO
	 *
	 * Constraint:
	 *     rg+=MPORG*
	 */
	protected void sequence_MPO(ISerializationContext context, MPO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MPSRG returns MPSRG
	 *
	 * Constraint:
	 *     (Reserved=EINTEGEROBJECT? PsegName=MODCASTRING?)
	 */
	protected void sequence_MPSRG(ISerializationContext context, MPSRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MPS
	 *     MPS returns MPS
	 *
	 * Constraint:
	 *     (RGLength=EINTEGEROBJECT? Reserved=EBYTEARRAY?)
	 */
	protected void sequence_MPS(ISerializationContext context, MPS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MSURG returns MSURG
	 *
	 * Constraint:
	 *     (SUPname=MODCASTRING? Reserved=EBYTEARRAY? SUPid=EINTEGEROBJECT?)
	 */
	protected void sequence_MSURG(ISerializationContext context, MSURG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns MSU
	 *     MSU returns MSU
	 *
	 * Constraint:
	 *     rg+=MSURG*
	 */
	protected void sequence_MSU(ISerializationContext context, MSU semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns MappingOption
	 *     MappingOption returns MappingOption
	 *
	 * Constraint:
	 *     MapValue=EINTEGEROBJECT?
	 */
	protected void sequence_MappingOption(ISerializationContext context, MappingOption semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns MeasurementUnits
	 *     MeasurementUnits returns MeasurementUnits
	 *
	 * Constraint:
	 *     (XoaBase=EINTEGEROBJECT? YoaBase=EINTEGEROBJECT? XoaUnits=EINTEGEROBJECT? YoaUnits=EINTEGEROBJECT?)
	 */
	protected void sequence_MeasurementUnits(ISerializationContext context, MeasurementUnits semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns MediaEjectControl
	 *     MediaEjectControl returns MediaEjectControl
	 *
	 * Constraint:
	 *     (Reserved=EINTEGEROBJECT? EjCtrl=EINTEGEROBJECT?)
	 */
	protected void sequence_MediaEjectControl(ISerializationContext context, MediaEjectControl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns MediaFidelity
	 *     MediaFidelity returns MediaFidelity
	 *
	 * Constraint:
	 *     (StpMedEx=EINTEGEROBJECT? Reserved=EBYTEARRAY?)
	 */
	protected void sequence_MediaFidelity(ISerializationContext context, MediaFidelity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns MediumMapPageNumber
	 *     MediumMapPageNumber returns MediumMapPageNumber
	 *
	 * Constraint:
	 *     PageNum=EINTEGEROBJECT?
	 */
	protected void sequence_MediumMapPageNumber(ISerializationContext context, MediumMapPageNumber semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns MediumOrientation
	 *     MediumOrientation returns MediumOrientation
	 *
	 * Constraint:
	 *     MedOrient=EINTEGEROBJECT?
	 */
	protected void sequence_MediumOrientation(ISerializationContext context, MediumOrientation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns MetricAdjustment
	 *     MetricAdjustment returns MetricAdjustment
	 *
	 * Constraint:
	 *     (
	 *         UnitBase=EINTEGEROBJECT? 
	 *         XUPUB=EINTEGEROBJECT? 
	 *         YUPUB=EINTEGEROBJECT? 
	 *         HUniformIncrement=EINTEGEROBJECT? 
	 *         VUniformIncrement=EINTEGEROBJECT? 
	 *         HBaselineIncrement=EINTEGEROBJECT? 
	 *         VBaselineIncrement=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_MetricAdjustment(ISerializationContext context, MetricAdjustment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     structuredFields+=structuredField+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns NOPCS
	 *     NOPCS returns NOPCS
	 *
	 * Constraint:
	 *     IGNDATA=EBYTEARRAY?
	 */
	protected void sequence_NOPCS(ISerializationContext context, NOPCS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns NOP
	 *     NOP returns NOP
	 *
	 * Constraint:
	 *     UndfData=EBYTEARRAY?
	 */
	protected void sequence_NOP(ISerializationContext context, NOP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns OBD
	 *     OBD returns OBD
	 *
	 * Constraint:
	 *     triplets+=triplet*
	 */
	protected void sequence_OBD(ISerializationContext context, OBD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns OBP
	 *     OBP returns OBP
	 *
	 * Constraint:
	 *     (
	 *         OAPosID=EINTEGEROBJECT? 
	 *         RGLength=EINTEGEROBJECT? 
	 *         XoaOset=EINTEGEROBJECT? 
	 *         YoaOset=EINTEGEROBJECT? 
	 *         XoaOrent=EINTEGEROBJECT? 
	 *         YoaOrent=EINTEGEROBJECT? 
	 *         XocaOset=EINTEGEROBJECT? 
	 *         YocaOset=EINTEGEROBJECT? 
	 *         XocaOrent=EINTEGEROBJECT? 
	 *         YocaOrent=EINTEGEROBJECT? 
	 *         RefCSys=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_OBP(ISerializationContext context, OBP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns OCD
	 *     OCD returns OCD
	 *
	 * Constraint:
	 *     ObjCdat=EBYTEARRAY?
	 */
	protected void sequence_OCD(ISerializationContext context, OCD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns OVS
	 *     OVS returns OVS
	 *
	 * Constraint:
	 *     (BYPSIDEN=EINTEGEROBJECT? OVERCHAR=EINTEGEROBJECT?)
	 */
	protected void sequence_OVS(ISerializationContext context, OVS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ObjectAreaSize
	 *     ObjectAreaSize returns ObjectAreaSize
	 *
	 * Constraint:
	 *     (SizeType=EINTEGEROBJECT? XoaSize=EINTEGEROBJECT? YoaSize=EINTEGEROBJECT?)
	 */
	protected void sequence_ObjectAreaSize(ISerializationContext context, ObjectAreaSize semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ObjectByteExtent
	 *     ObjectByteExtent returns ObjectByteExtent
	 *
	 * Constraint:
	 *     (ByteExt=EINTEGEROBJECT? ByteExtHi=EINTEGEROBJECT?)
	 */
	protected void sequence_ObjectByteExtent(ISerializationContext context, ObjectByteExtent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ObjectByteOffset
	 *     ObjectByteOffset returns ObjectByteOffset
	 *
	 * Constraint:
	 *     (DirByOff=EINTEGEROBJECT? DirByHi=EINTEGEROBJECT?)
	 */
	protected void sequence_ObjectByteOffset(ISerializationContext context, ObjectByteOffset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ObjectClassification
	 *     ObjectClassification returns ObjectClassification
	 *
	 * Constraint:
	 *     (
	 *         ObjClass=EINTEGEROBJECT? 
	 *         StrucFlgs=EINTEGEROBJECT? 
	 *         RegObjId=EBYTEARRAY? 
	 *         ObjTpName=MODCASTRING? 
	 *         ObjLev=MODCASTRING? 
	 *         CompName=MODCASTRING?
	 *     )
	 */
	protected void sequence_ObjectClassification(ISerializationContext context, ObjectClassification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ObjectContainerPresentationSpaceSize
	 *     ObjectContainerPresentationSpaceSize returns ObjectContainerPresentationSpaceSize
	 *
	 * Constraint:
	 *     PDFSize=EINTEGEROBJECT?
	 */
	protected void sequence_ObjectContainerPresentationSpaceSize(ISerializationContext context, ObjectContainerPresentationSpaceSize semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ObjectCount
	 *     ObjectCount returns ObjectCount
	 *
	 * Constraint:
	 *     (SubObj=EINTEGEROBJECT? SObjNum=EINTEGEROBJECT? SobjNmHi=EINTEGEROBJECT?)
	 */
	protected void sequence_ObjectCount(ISerializationContext context, ObjectCount semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ObjectFunctionSetSpecification
	 *     ObjectFunctionSetSpecification returns ObjectFunctionSetSpecification
	 *
	 * Constraint:
	 *     (ObjType=EINTEGEROBJECT? ArchVrsn=EINTEGEROBJECT? DCAFnSet=EINTEGEROBJECT? OCAFnSet=EINTEGEROBJECT?)
	 */
	protected void sequence_ObjectFunctionSetSpecification(ISerializationContext context, ObjectFunctionSetSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ObjectOffset
	 *     ObjectOffset returns ObjectOffset
	 *
	 * Constraint:
	 *     (ObjTpe=EINTEGEROBJECT? ObjOset=EINTEGEROBJECT? ObjOstHi=EINTEGEROBJECT?)
	 */
	protected void sequence_ObjectOffset(ISerializationContext context, ObjectOffset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ObjectOriginIdentifier
	 *     ObjectOriginIdentifier returns ObjectOriginIdentifier
	 *
	 * Constraint:
	 *     (System=EINTEGEROBJECT? SysID=EBYTEARRAY? MedID=EBYTEARRAY? DSID=EBYTEARRAY?)
	 */
	protected void sequence_ObjectOriginIdentifier(ISerializationContext context, ObjectOriginIdentifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ObjectStructuredFieldExtent
	 *     ObjectStructuredFieldExtent returns ObjectStructuredFieldExtent
	 *
	 * Constraint:
	 *     (SFExt=EINTEGEROBJECT? SFExtHi=EINTEGEROBJECT?)
	 */
	protected void sequence_ObjectStructuredFieldExtent(ISerializationContext context, ObjectStructuredFieldExtent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ObjectStructuredFieldOffset
	 *     ObjectStructuredFieldOffset returns ObjectStructuredFieldOffset
	 *
	 * Constraint:
	 *     (SFOff=EINTEGEROBJECT? SFOffHi=EINTEGEROBJECT?)
	 */
	protected void sequence_ObjectStructuredFieldOffset(ISerializationContext context, ObjectStructuredFieldOffset semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns PEC
	 *     PEC returns PEC
	 *
	 * Constraint:
	 *     triplets+=triplet*
	 */
	protected void sequence_PEC(ISerializationContext context, PEC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns PFC
	 *     PFC returns PFC
	 *
	 * Constraint:
	 *     (PFCFlgs=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_PFC(ISerializationContext context, PFC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns PGD
	 *     PGD returns PGD
	 *
	 * Constraint:
	 *     (
	 *         XpgBase=EINTEGEROBJECT? 
	 *         YpgBase=EINTEGEROBJECT? 
	 *         XpgUnits=EINTEGEROBJECT? 
	 *         YpgUnits=EINTEGEROBJECT? 
	 *         XpgSize=EINTEGEROBJECT? 
	 *         YpgSize=EINTEGEROBJECT? 
	 *         Reserved=EINTEGEROBJECT? 
	 *         triplets+=triplet*
	 *     )
	 */
	protected void sequence_PGD(ISerializationContext context, PGD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns PGP1
	 *     PGP1 returns PGP1
	 *
	 * Constraint:
	 *     (XOset=EINTEGEROBJECT? YOset=EINTEGEROBJECT?)
	 */
	protected void sequence_PGP1(ISerializationContext context, PGP1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PGPRG returns PGPRG
	 *
	 * Constraint:
	 *     (
	 *         RGLength=EINTEGEROBJECT? 
	 *         XmOset=EINTEGEROBJECT? 
	 *         YmOset=EINTEGEROBJECT? 
	 *         PGorient=EINTEGEROBJECT? 
	 *         SHside=EINTEGEROBJECT? 
	 *         PgFlgs=EINTEGEROBJECT? 
	 *         PMCid=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_PGPRG(ISerializationContext context, PGPRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns PGP
	 *     PGP returns PGP
	 *
	 * Constraint:
	 *     (Constant=EINTEGEROBJECT? rg+=PGPRG*)
	 */
	protected void sequence_PGP(ISerializationContext context, PGP semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns PMC
	 *     PMC returns PMC
	 *
	 * Constraint:
	 *     (PMCid=EINTEGEROBJECT? triplets+=triplet*)
	 */
	protected void sequence_PMC(ISerializationContext context, PMC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PPORG returns PPORG
	 *
	 * Constraint:
	 *     (
	 *         RGLength=EINTEGEROBJECT? 
	 *         ObjType=EINTEGEROBJECT? 
	 *         ProcFlgs=EINTEGEROBJECT? 
	 *         XocaOset=EINTEGEROBJECT? 
	 *         YocaOset=EINTEGEROBJECT? 
	 *         triplets+=triplet*
	 *     )
	 */
	protected void sequence_PPORG(ISerializationContext context, PPORG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns PPO
	 *     PPO returns PPO
	 *
	 * Constraint:
	 *     rg+=PPORG*
	 */
	protected void sequence_PPO(ISerializationContext context, PPO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns PTD1
	 *     PTD1 returns PTD1
	 *
	 * Constraint:
	 *     (
	 *         XPBASE=EINTEGEROBJECT? 
	 *         YPBASE=EINTEGEROBJECT? 
	 *         XPUNITVL=EINTEGEROBJECT? 
	 *         YPUNITVL=EINTEGEROBJECT? 
	 *         XPEXTENT=EINTEGEROBJECT? 
	 *         YPEXTENT=EINTEGEROBJECT? 
	 *         RESERVED=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_PTD1(ISerializationContext context, PTD1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns PTD
	 *     PTD returns PTD
	 *
	 * Constraint:
	 *     (
	 *         XPBASE=EINTEGEROBJECT? 
	 *         YPBASE=EINTEGEROBJECT? 
	 *         XPUNITVL=EINTEGEROBJECT? 
	 *         YPUNITVL=EINTEGEROBJECT? 
	 *         XPEXTENT=EINTEGEROBJECT? 
	 *         YPEXTENT=EINTEGEROBJECT? 
	 *         RESERVED=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_PTD(ISerializationContext context, PTD semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns PTX
	 *     PTX returns PTX
	 *
	 * Constraint:
	 *     {PTX}
	 */
	protected void sequence_PTX(ISerializationContext context, PTX semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns PageOverlayConditionalProcessing
	 *     PageOverlayConditionalProcessing returns PageOverlayConditionalProcessing
	 *
	 * Constraint:
	 *     (PgOvType=EINTEGEROBJECT? Level=EINTEGEROBJECT?)
	 */
	protected void sequence_PageOverlayConditionalProcessing(ISerializationContext context, PageOverlayConditionalProcessing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns PagePositionInformation
	 *     PagePositionInformation returns PagePositionInformation
	 *
	 * Constraint:
	 *     PGPRG=EINTEGEROBJECT?
	 */
	protected void sequence_PagePositionInformation(ISerializationContext context, PagePositionInformation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns PresentationControl
	 *     PresentationControl returns PresentationControl
	 *
	 * Constraint:
	 *     PRSFlg=EINTEGEROBJECT?
	 */
	protected void sequence_PresentationControl(ISerializationContext context, PresentationControl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns PresentationSpaceMixingRules
	 *     PresentationSpaceMixingRules returns PresentationSpaceMixingRules
	 *
	 * Constraint:
	 *     {PresentationSpaceMixingRules}
	 */
	protected void sequence_PresentationSpaceMixingRules(ISerializationContext context, PresentationSpaceMixingRules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns PresentationSpaceResetMixing
	 *     PresentationSpaceResetMixing returns PresentationSpaceResetMixing
	 *
	 * Constraint:
	 *     BgMxFlag=EINTEGEROBJECT?
	 */
	protected void sequence_PresentationSpaceResetMixing(ISerializationContext context, PresentationSpaceResetMixing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns RMB
	 *     RMB returns RMB
	 *
	 * Constraint:
	 *     INCRMENT=EINTEGEROBJECT?
	 */
	protected void sequence_RMB(ISerializationContext context, RMB semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns RMI
	 *     RMI returns RMI
	 *
	 * Constraint:
	 *     INCRMENT=EINTEGEROBJECT?
	 */
	protected void sequence_RMI(ISerializationContext context, RMI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns RPS
	 *     RPS returns RPS
	 *
	 * Constraint:
	 *     (RLENGTH=EINTEGEROBJECT? RPTDATA=MODCASTRING?)
	 */
	protected void sequence_RPS(ISerializationContext context, RPS semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns RenderingIntent
	 *     RenderingIntent returns RenderingIntent
	 *
	 * Constraint:
	 *     (
	 *         Reserved=EINTEGEROBJECT? 
	 *         IOCARI=EINTEGEROBJECT? 
	 *         OCRI=EINTEGEROBJECT? 
	 *         PTOCRI=EINTEGEROBJECT? 
	 *         GOCARI=EINTEGEROBJECT? 
	 *         Reserved2=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_RenderingIntent(ISerializationContext context, RenderingIntent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ResourceLocalIdentifier
	 *     ResourceLocalIdentifier returns ResourceLocalIdentifier
	 *
	 * Constraint:
	 *     (ResType=EINTEGEROBJECT? ResLID=EINTEGEROBJECT?)
	 */
	protected void sequence_ResourceLocalIdentifier(ISerializationContext context, ResourceLocalIdentifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ResourceObjectInclude
	 *     ResourceObjectInclude returns ResourceObjectInclude
	 *
	 * Constraint:
	 *     (ObjType=EINTEGEROBJECT? ObjName=MODCASTRING? XobjOset=EINTEGEROBJECT? YobjOset=EINTEGEROBJECT? ObOrent=EINTEGEROBJECT?)
	 */
	protected void sequence_ResourceObjectInclude(ISerializationContext context, ResourceObjectInclude semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ResourceObjectType
	 *     ResourceObjectType returns ResourceObjectType
	 *
	 * Constraint:
	 *     (ObjType=EINTEGEROBJECT? ConData=EBYTEARRAY?)
	 */
	protected void sequence_ResourceObjectType(ISerializationContext context, ResourceObjectType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ResourceSectionNumber
	 *     ResourceSectionNumber returns ResourceSectionNumber
	 *
	 * Constraint:
	 *     ResSNum=EINTEGEROBJECT?
	 */
	protected void sequence_ResourceSectionNumber(ISerializationContext context, ResourceSectionNumber semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns ResourceUsageAttribute
	 *     ResourceUsageAttribute returns ResourceUsageAttribute
	 *
	 * Constraint:
	 *     Frequency=EINTEGEROBJECT?
	 */
	protected void sequence_ResourceUsageAttribute(ISerializationContext context, ResourceUsageAttribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns SBI
	 *     SBI returns SBI
	 *
	 * Constraint:
	 *     INCRMENT=EINTEGEROBJECT?
	 */
	protected void sequence_SBI(ISerializationContext context, SBI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns SCFL
	 *     SCFL returns SCFL
	 *
	 * Constraint:
	 *     LID=EINTEGEROBJECT?
	 */
	protected void sequence_SCFL(ISerializationContext context, SCFL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns SEC
	 *     SEC returns SEC
	 *
	 * Constraint:
	 *     (
	 *         RESERVED=EINTEGEROBJECT? 
	 *         COLSPCE=EINTEGEROBJECT? 
	 *         COLSIZE1=EINTEGEROBJECT? 
	 *         COLSIZE2=EINTEGEROBJECT? 
	 *         COLSIZE3=EINTEGEROBJECT? 
	 *         COLSIZE4=EINTEGEROBJECT? 
	 *         COLVALUE=EBYTEARRAY?
	 *     )
	 */
	protected void sequence_SEC(ISerializationContext context, SEC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns SIA
	 *     SIA returns SIA
	 *
	 * Constraint:
	 *     (ADJSTMNT=EINTEGEROBJECT? DIRCTION=EINTEGEROBJECT?)
	 */
	protected void sequence_SIA(ISerializationContext context, SIA semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns SIM
	 *     SIM returns SIM
	 *
	 * Constraint:
	 *     DSPLCMNT=EINTEGEROBJECT?
	 */
	protected void sequence_SIM(ISerializationContext context, SIM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns STC
	 *     STC returns STC
	 *
	 * Constraint:
	 *     (FRGCOLOR=EINTEGEROBJECT? PRECSION=EINTEGEROBJECT?)
	 */
	protected void sequence_STC(ISerializationContext context, STC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns STO
	 *     STO returns STO
	 *
	 * Constraint:
	 *     (IORNTION=EINTEGEROBJECT? BORNTION=EINTEGEROBJECT?)
	 */
	protected void sequence_STO(ISerializationContext context, STO semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns SVI
	 *     SVI returns SVI
	 *
	 * Constraint:
	 *     INCRMENT=EINTEGEROBJECT?
	 */
	protected void sequence_SVI(ISerializationContext context, SVI semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SamplingRatiosRG returns SamplingRatiosRG
	 *
	 * Constraint:
	 *     (HSAMPLE=EINTEGEROBJECT? VSAMPLE=EINTEGEROBJECT?)
	 */
	protected void sequence_SamplingRatiosRG(ISerializationContext context, SamplingRatiosRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns SamplingRatios
	 *     SamplingRatios returns SamplingRatios
	 *
	 * Constraint:
	 *     {SamplingRatios}
	 */
	protected void sequence_SamplingRatios(ISerializationContext context, SamplingRatios semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns SetBiLevelImageColor
	 *     SetBiLevelImageColor returns SetBiLevelImageColor
	 *
	 * Constraint:
	 *     (AREA=EINTEGEROBJECT? Reserved=EBYTEARRAY? NAMECOLR=EINTEGEROBJECT?)
	 */
	protected void sequence_SetBiLevelImageColor(ISerializationContext context, SetBiLevelImageColor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns TBM
	 *     TBM returns TBM
	 *
	 * Constraint:
	 *     (DIRCTION=EINTEGEROBJECT? PRECSION=EINTEGEROBJECT? INCRMENT=EINTEGEROBJECT?)
	 */
	protected void sequence_TBM(ISerializationContext context, TBM semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     structuredField returns TLE
	 *     TLE returns TLE
	 *
	 * Constraint:
	 *     triplets+=triplet*
	 */
	protected void sequence_TLE(ISerializationContext context, TLE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns TRN
	 *     TRN returns TRN
	 *
	 * Constraint:
	 *     TRNDATA=EBYTEARRAY?
	 */
	protected void sequence_TRN(ISerializationContext context, TRN semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns TextFidelity
	 *     TextFidelity returns TextFidelity
	 *
	 * Constraint:
	 *     (StpTxtEx=EINTEGEROBJECT? RepTxtEx=EINTEGEROBJECT?)
	 */
	protected void sequence_TextFidelity(ISerializationContext context, TextFidelity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns TextOrientation
	 *     TextOrientation returns TextOrientation
	 *
	 * Constraint:
	 *     (IAxis=EINTEGEROBJECT? BAxis=EINTEGEROBJECT?)
	 */
	protected void sequence_TextOrientation(ISerializationContext context, TextOrientation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns TilePosition
	 *     TilePosition returns TilePosition
	 *
	 * Constraint:
	 *     (XOFFSET=EINTEGEROBJECT? YOFFSET=EINTEGEROBJECT?)
	 */
	protected void sequence_TilePosition(ISerializationContext context, TilePosition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns TileSetColor
	 *     TileSetColor returns TileSetColor
	 *
	 * Constraint:
	 *     (
	 *         CSPACE=EINTEGEROBJECT? 
	 *         RESERVED=EINTEGEROBJECT? 
	 *         SIZE1=EINTEGEROBJECT? 
	 *         SIZE2=EINTEGEROBJECT? 
	 *         SIZE3=EINTEGEROBJECT? 
	 *         SIZE4=EINTEGEROBJECT? 
	 *         CVAL1=EINTEGEROBJECT? 
	 *         CVAL2=EINTEGEROBJECT? 
	 *         CVAL3=EINTEGEROBJECT? 
	 *         CVAL4=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_TileSetColor(ISerializationContext context, TileSetColor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns TileSize
	 *     TileSize returns TileSize
	 *
	 * Constraint:
	 *     (THSIZE=EINTEGEROBJECT? TVSIZE=EINTEGEROBJECT? RELRES=EINTEGEROBJECT?)
	 */
	protected void sequence_TileSize(ISerializationContext context, TileSize semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TileTOCRG returns TileTOCRG
	 *
	 * Constraint:
	 *     (
	 *         XOFFSET=EINTEGEROBJECT? 
	 *         YOFFSET=EINTEGEROBJECT? 
	 *         THSIZE=EINTEGEROBJECT? 
	 *         TVSIZE=EINTEGEROBJECT? 
	 *         RELRES=EINTEGEROBJECT? 
	 *         COMPR=EINTEGEROBJECT? 
	 *         DATAPOS=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_TileTOCRG(ISerializationContext context, TileTOCRG semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns TileTOC
	 *     TileTOC returns TileTOC
	 *
	 * Constraint:
	 *     Reserved=EINTEGEROBJECT?
	 */
	protected void sequence_TileTOC(ISerializationContext context, TileTOC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns TonerSaver
	 *     TonerSaver returns TonerSaver
	 *
	 * Constraint:
	 *     TSvCtrl=EINTEGEROBJECT?
	 */
	protected void sequence_TonerSaver(ISerializationContext context, TonerSaver semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns UP3iFinishingOperation
	 *     UP3iFinishingOperation returns UP3iFinishingOperation
	 *
	 * Constraint:
	 *     (Seqnum=EINTEGEROBJECT? UP3iDat=EBYTEARRAY?)
	 */
	protected void sequence_UP3iFinishingOperation(ISerializationContext context, UP3iFinishingOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns USC
	 *     USC returns USC
	 *
	 * Constraint:
	 *     BYPSIDEN=EINTEGEROBJECT?
	 */
	protected void sequence_USC(ISerializationContext context, USC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns UniversalDateAndTimeStamp
	 *     UniversalDateAndTimeStamp returns UniversalDateAndTimeStamp
	 *
	 * Constraint:
	 *     (
	 *         Reserved=EINTEGEROBJECT? 
	 *         YearAD=EINTEGEROBJECT? 
	 *         Month=EINTEGEROBJECT? 
	 *         Day=EINTEGEROBJECT? 
	 *         Hour=EINTEGEROBJECT? 
	 *         Minute=EINTEGEROBJECT? 
	 *         Second=EINTEGEROBJECT? 
	 *         TimeZone=EINTEGEROBJECT? 
	 *         UTCDiffH=EINTEGEROBJECT? 
	 *         UTCDiffM=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_UniversalDateAndTimeStamp(ISerializationContext context, UniversalDateAndTimeStamp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     triplet returns WindowSpecification
	 *     WindowSpecification returns WindowSpecification
	 *
	 * Constraint:
	 *     (
	 *         FLAGS=EINTEGEROBJECT? 
	 *         RES3=EINTEGEROBJECT? 
	 *         CFORMAT=EINTEGEROBJECT? 
	 *         UBASE=EINTEGEROBJECT? 
	 *         XRESOL=EINTEGEROBJECT? 
	 *         YRESOL=EINTEGEROBJECT? 
	 *         IMGXYRES=EINTEGEROBJECT? 
	 *         XLWIND=EINTEGEROBJECT? 
	 *         XRWIND=EINTEGEROBJECT? 
	 *         YBWIND=EINTEGEROBJECT? 
	 *         YTWIND=EINTEGEROBJECT?
	 *     )
	 */
	protected void sequence_WindowSpecification(ISerializationContext context, WindowSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
